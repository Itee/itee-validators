"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var r=require("fs");
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArray
 * @desc Export functions to validate if a value is an array or not
 * @example {@lang javascript}
 *
 * import { isArray } from 'itee-validators'
 *
 * if( isArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function t(r){return Array.isArray(r)}function n(r){return!Array.isArray(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isEmptyArray
 * @desc Export function to validate if a value is an array of null length or not
 * @example
 *
 * import { isEmptyArray } from 'itee-validators'
 *
 * if( isEmptyArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function e(r){return!n(r)&&0===r.length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isBoolean
 * @desc Export function to validate if a value is a boolean or not
 * @example
 *
 * import { isBoolean } from 'itee-validators'
 *
 * if( isBoolean( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function i(r){return"boolean"==typeof r}function o(r){return"boolean"!=typeof r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of booleans or not
 * @example
 *
 * import { isArrayOfBoolean } from 'itee-validators'
 *
 * if( isArrayOfBoolean( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/functions/isFunction
 * @desc Export function to validate if a value is a function or not
 * @example
 *
 * import { isFunction } from 'itee-validators'
 *
 * if( isFunction( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function u(r){return"function"==typeof r}function s(r){return"function"!=typeof r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of functions or not
 * @example
 *
 * import { isArrayOfFunction } from 'itee-validators'
 *
 * if( isArrayOfFunction( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function f(r){return null!==r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfNull
 * @desc Export function to validate if a value is an array of null values or not
 * @example
 *
 * import { isArrayOfNull } from 'itee-validators'
 *
 * if( isArrayOfNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * } *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isDefined
 * @desc Export function to validate if a value is a defined or not
 * @example
 *
 * import { isDefined } from 'itee-validators'
 *
 * if( isDefined( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function a(r){return null!=r}function c(r){return null==r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isInfinite
 * @desc Export function to validate if a value is a finite or infinite number
 * @example
 *
 * import { isInfinite } from 'itee-validators'
 *
 * if( isInfinite( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function p(r){return r===Number.NEGATIVE_INFINITY}function l(r){return r===Number.POSITIVE_INFINITY}function y(r){return p(r)||l(r)}function x(r){return 0===r&&1/r===Number.POSITIVE_INFINITY}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isNumber
 * @desc Export function to validate if a value is a number, or with special sign
 * @example
 *
 * import { isNumber } from 'itee-validators'
 *
 * if( isNumber( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function h(r){return!c(r)&&r.constructor===Number}function N(r){return!h(r)}function A(r){return Number.isInteger(r)}function d(r){return!N(r)&&(!Number.isNaN(r)&&(!y(r)&&r%1!=0))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isObject
 * @desc Export function to validate if a value is an object
 * @example
 *
 * import { isObject } from 'itee-validators'
 *
 * if( isObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function I(r){return!c(r)&&r.constructor===Object}function E(r){return!I(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfObject
 * @desc Export function to validate if a value is an array of objects or not
 * @example
 *
 * import { isArrayOfObject } from 'itee-validators'
 *
 * if( isArrayOfObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isString
 * @desc Export function to validate if a value is a string
 * @example
 *
 * import { isString } from 'itee-validators'
 *
 * if( isString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function g(r){return"string"==typeof r||r instanceof String}function v(r){return!g(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfString
 * @desc Export function to validate if a value is an array of string or not
 * @example
 *
 * import { isArrayOfString } from 'itee-validators'
 *
 * if( isArrayOfString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function b(r){return void 0!==r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfUndefined
 * @desc Export function to validate if a value is an array of undefined values or not
 * @example
 *
 * import { isArrayOfUndefined } from 'itee-validators'
 *
 * if( isArrayOfUndefined( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isEmptyObject
 * @desc Export function to validate if a value is an empty object
 * @example
 *
 * import { isEmptyObject } from 'itee-validators'
 *
 * if( isEmptyObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function m(r){if(E(r))return!1;if(0===r.length)return!0;for(let t in r)if(Object.prototype.hasOwnProperty.call(r,t))return!1;return!0}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isEmptyString
 * @desc Export function to validate if a value is a empty string
 * @example
 *
 * import { isEmptyString } from 'itee-validators'
 *
 * if( isEmptyString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function S(r){return!v(r)&&0===r.length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isBlankString
 * @desc Export function to validate if a value is a blank string
 * @example
 *
 * import { isBlankString } from 'itee-validators'
 *
 * if( isBlankString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function w(r){return!v(r)&&(!S(r)&&!/\S/.test(r))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/symbols/isSymbol
 * @desc Export function to validate if a value is a symbol
 * @example
 *
 * import { isSymbol } from 'itee-validators'
 *
 * if( isSymbol( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function F(r){return"symbol"==typeof r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isEmpty
 * @desc Export function to validate if a value could be considered as empty
 * @example
 *
 * import { isEmpty } from 'itee-validators'
 *
 * if( isEmpty( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function O(r){return!c(r)&&(!!S(r)||(!!e(r)||!!m(r)))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/cores
 * @description Export the Validator singleton instance that allow to validate complex data structure
 * @example
 *
 const validator = Itee.Validators.Validator

 // Using unique function for One registered type
 // Usefull when a simple data structure is used multiple times
 validator.add( 'ColorType', color => {

 const r = color.r
 if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
 return false
 }

 const g = color.g
 if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
 return false
 }

 const b = color.b
 if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
 return false
 }

 return true
 } )

 // Using schema composition
 // Usefull for design validation schema faster and based on previous declared validation types
 validator.add( 'Range_0_255', ( value ) => {

 if ( Itee.Validators.isNotNumber( value ) ) {
 return false
 }

 return !(value <= 0 || value > 255)

 } )

 validator.add( 'ColorSchema', {
 r: {
 required: true,
 type:     'Range_0_255'
 },
 g: {
 required: true,
 type:     'Range_0_255'
 },
 b: {
 required: true,
 type:     'Range_0_255'
 }
 } )

 validator.add( 'ColorStructure', {
 color_from_type: {
 type: 'ColorType'
 },
 col_from_schema: {
 type: 'ColorSchema'
 },
 col_from_fn:     {
 // Inner function
 // Usefull for specific validation requirement that cannot match other previous validation schema or type
 fn: function ColorValidator ( color ) {

 const r = color.r
 if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
 return false
 }

 const g = color.g
 if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
 return false
 }

 const b = color.b
 if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
 return false
 }

 return true
 }
 }
 } )

 // The data to validate
 const colorStruct = {
 color_from_type: {
 r: 0,
 g: 1,
 b: 2
 },
 col_from_schema: {
 r: 10,
 g: 20,
 b: 30
 },
 col_from_fn:     {
 r: 0,
 g: 127,
 b: 255
 }
 }

 // Execute

 try {

 if ( validator.check( colorStruct, 'ColorStructure' ) ) {
 alert( 'ColorStructure is valid !' )
 } else {
 alert( validator.errors )
 }

 } catch ( err ) {
 alert( err )
 }
 *
 */
class P{constructor(){this.validators={Boolean:i,Number:h,Integer:A,Float:d,Array:t,String:g,Object:I,Symbol:F,Function:u},this.errors=[]}add(r,t){if(v(r))throw new TypeError("Validator: Expect type to be a string");if(s(t)&&E(t))throw new TypeError("Validator: Expect validator to be an object or a function");if(a(this.validators[r]))throw new TypeError(`Validator: a validator is already defined for type '${r}'`);this.validators[r]=t}remove(r){delete this.validators[r]}getAvalaibleTypes(){const r=[];for(let t in this.validators)r.push(t);return r}check(r,t,n=!0){const e=this.validators[t];if(c(e))throw new TypeError(`Validator: Unable to find schema validation of type '${t}'`);let i=!0;if(u(e))i=e(r);else{if(!I(e))throw new TypeError(`Validator: Unknown validator of type '${t}'`);{let o=!0;for(let u in e){const f=e[u];if(c(f))throw new TypeError(`Validator: Missing validator for key '${u}' of type '${t}'`);const p=r[u],l=f.required;if(c(p)){if(!l)continue;o=!1}let y=f.fn;if(a(y)){if(s(y))throw new TypeError(`Validator: Invalid validation function for '${u}' with type '${t}'`);o=y(p)}else o=this.check(p,f.type,n);if(!1===o&&(this.errors.push(`Validator: Invalid property '${u}' of type '${f.type}' with value '${p}' in object of type '${t}'`),i=!1,n))break}}}return i}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isArrayBuffer
 * @desc Export function to validate if a value is a array buffer
 * @example
 *
 * import { isArrayBuffer } from 'itee-validators'
 *
 * if( isArrayBuffer( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function U(r){return r instanceof ArrayBuffer}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigInt64Array
 * @desc Export function to validate if a value is a big int 64 array buffer
 * @example
 *
 * import { isBigInt64Array } from 'itee-validators'
 *
 * if( isBigInt64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function T(r){return r instanceof BigInt64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigUint64Array
 * @desc Export function to validate if a value is a big unsigned int 64 array buffer
 * @example
 *
 * import { isBigUint64Array } from 'itee-validators'
 *
 * if( isBigUint64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function B(r){return r instanceof BigUint64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat32Array
 * @desc Export function to validate if a value is a float 32 array buffer
 * @example
 *
 * import { isFloat32Array } from 'itee-validators'
 *
 * if( isFloat32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function V(r){return r instanceof Float32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat64Array
 * @desc Export function to validate if a value is a float 64 array buffer
 * @example
 *
 * import { isFloat64Array } from 'itee-validators'
 *
 * if( isFloat64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function k(r){return r instanceof Float64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt16Array
 * @desc Export function to validate if a value is a int 16 array buffer
 * @example
 *
 * import { isInt16Array } from 'itee-validators'
 *
 * if( isInt16Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function L(r){return r instanceof Int16Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt32Array
 * @desc Export function to validate if a value is a int 32 array buffer
 * @example
 *
 * import { isInt32Array } from 'itee-validators'
 *
 * if( isInt32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function _(r){return r instanceof Int32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt8Array
 * @desc Export function to validate if a value is a int 8 array buffer
 * @example
 *
 * import { isInt8Array } from 'itee-validators'
 *
 * if( isInt8Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function D(r){return r instanceof Int8Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint16Array
 * @desc Export function to validate if a value is a unsigned int 16 array buffer
 * @example
 *
 * import { isUint16Array } from 'itee-validators'
 *
 * if( isUint16Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function M(r){return r instanceof Uint16Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint32Array
 * @desc Export function to validate if a value is a unsigned int 32 array buffer
 * @example
 *
 * import { isUint32Array } from 'itee-validators'
 *
 * if( isUint32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function R(r){return r instanceof Uint32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8Array
 * @desc Export function to validate if a value is a unsigned int 8 array buffer
 * @example
 *
 * import { isUint8Array } from 'itee-validators'
 *
 * if( isUint8Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function j(r){return r instanceof Uint8Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8ClampedArray
 * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer
 * @example
 *
 * import { isUint8ClampedArray } from 'itee-validators'
 *
 * if( isUint8ClampedArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function C(r){return r instanceof Uint8ClampedArray}exports.Validator=void 0,c(exports.Validator)&&(exports.Validator=new P);
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a Celsius temperature
 * @example
 *
 * import { isCelsius } from 'itee-validators'
 *
 * if( isCelsius( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function $(r){return h(r)&&r>=-273.14999999955}function Z(r){return!$(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a Fahrenheit temperature
 * @example
 *
 * import { isFahrenheit } from 'itee-validators'
 *
 * if( isFahrenheit( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function G(r){return h(r)&&r>=-459.67}function Y(r){return!G(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a kelvin temperature
 * @example
 *
 * import { isKelvin } from 'itee-validators'
 *
 * if( isKelvin( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function K(r){return h(r)&&r>=4.5e-10}function X(r){return!K(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a temperature
 * @example
 *
 * import { isTemperature } from 'itee-validators'
 *
 * if( isTemperature( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/block-devices/isBlockDevicePath
 * @description Export function to validate if a value is a block device path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isBlockDevicePath } from 'itee-validators'
 *
 * if( isBlockDevicePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function q(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isBlockDevice()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/paths/isValidPath
 * @description Export function to validate if a value is a valid path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isValidPath } from 'itee-validators'
 *
 * if( isValidPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function H(t){return r.existsSync(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/block-devices/isValidBlockDevicePath
 * @description Export function to validate if a value is a valid block device path.
 * @example
 *
 * import { isValidBlockDevicePath } from 'itee-validators'
 *
 * if( isValidBlockDevicePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function z(r){return H(r)&&q(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/character-devices/isCharacterDevicePath
 * @description Export function to validate if a value is a character device path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isCharacterDevicePath } from 'itee-validators'
 *
 * if( isCharacterDevicePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function J(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isCharacterDevice()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/character-devices/isValidCharacterDevicePath
 * @description Export function to validate if a value is a valid character device path
 * @example
 *
 * import { isValidCharacterDevicePath } from 'itee-validators'
 *
 * if( isValidCharacterDevicePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function Q(r){return H(r)&&J(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isDirectoryPath
 * @description Export function to validate if a value is a directories path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isDirectoryPath } from 'itee-validators'
 *
 * if( isDirectoryPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function W(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isDirectory()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isEmptyDirectory
 * @description Export function to validate if a value is a empty directories
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isEmptyDirectory } from 'itee-validators'
 *
 * if( isEmptyDirectory( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function rr(t){return W(t)&&0===r.readdirSync(t).length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isValidDirectoryPath
 * @description Export function to validate if a value is a valid directory path
 * @example
 *
 * import { isValidDirectoryPath } from 'itee-validators'
 *
 * if( isValidDirectoryPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function tr(r){return H(r)&&W(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/fifo-pipes/isFIFOPath
 * @description Export function to validate if a value is a fifo pipes path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isFIFOPath } from 'itee-validators'
 *
 * if( isFIFOPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function nr(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isFIFO()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/fifo-pipes/isValidFIFOPath
 * @description Export function to validate if a value is a valid fifo pipes path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isValidFIFOPath } from 'itee-validators'
 *
 * if( isValidFIFOPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function er(r){return H(r)&&nr(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isFilePath
 * @description Export function to validate if a value is a file path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isFilePath } from 'itee-validators'
 *
 * if( isFilePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function ir(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isFile()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isEmptyFile
 * @description Export function to validate if a value is an empty file
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isEmptyFile } from 'itee-validators'
 *
 * if( isEmptyFile( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function or(t,n=0){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");return ir(t)&&r.statSync(t).size<=n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isValidFilePath
 * @description Export function to validate if a value is a valid file path
 * @example
 *
 * import { isValidFilePath } from 'itee-validators'
 *
 * if( isValidFilePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function ur(r){return H(r)&&ir(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/sockets/isSocketPath
 * @description Export function to validate if a value is a socket path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isSocketPath } from 'itee-validators'
 *
 * if( isSocketPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function sr(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isSocket()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/sockets/isValidSocketPath
 * @description Export function to validate if a value is a valid socket path
 * @example
 *
 * import { isValidSocketPath } from 'itee-validators'
 *
 * if( isValidSocketPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function fr(r){return H(r)&&sr(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/symbolic-links/isSocketPath
 * @description Export function to validate if a value is a symbolic links path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isSymbolicLinkPath } from 'itee-validators'
 *
 * if( isSymbolicLinkPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function ar(t){if(v(t)&&!(t instanceof Buffer)&&!(t instanceof URL))throw new TypeError("Invalid path type! Expect string, buffer or url.");const n=r.statSync(t,{throwIfNoEntry:!1});return a(n)&&n.isSymbolicLink()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/symbolic-links/isSocketPath
 * @description Export function to validate if a value is a valid symbolic links path
 * @example
 *
 * import { isValidSymbolicLinkPath } from 'itee-validators'
 *
 * if( isValidSymbolicLinkPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function cr(r){return H(r)&&ar(r)}exports.ABSOLUTE_ZERO_CELSIUS=-273.14999999955,exports.ABSOLUTE_ZERO_FAHRENHEIT=-459.67,exports.ABSOLUTE_ZERO_KELVIN=4.5e-10,exports.isArray=t,exports.isArrayBuffer=U,exports.isArrayOfArray=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfArray
 * @desc Export function to validate if a value is an array of array or not
 * @example
 *
 * import { isArrayOfArray } from 'itee-validators'
 *
 * if( isArrayOfArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,e=r.length;t<e;t++)if(n(r[t]))return!1;return!0},exports.isArrayOfBoolean=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(o(r[t]))return!1;return!0},exports.isArrayOfFunction=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(s(r[t]))return!1;return!0},exports.isArrayOfMultiElement=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfMultiElement
 * @desc Export function to validate if a value is an array with more than one value
 * @example
 *
 * import { isArrayOfMultiElement } from 'itee-validators'
 *
 * if( isArrayOfMultiElement( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function(r){return!n(r)&&r.length>1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isNull
 * @desc Export function to validate if a value is null or not
 * @example
 *
 * import { isNull } from 'itee-validators'
 *
 * if( isNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isArrayOfNull=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(f(r[t]))return!1;return!0},exports.isArrayOfNumber=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of numbers or not
 * @example
 *
 * import { isArrayOfNumber } from 'itee-validators'
 *
 * if( isArrayOfNumber( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(N(r[t]))return!1;return!0},exports.isArrayOfObject=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(E(r[t]))return!1;return!0},exports.isArrayOfSingleElement=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfSingleElement
 * @desc Export function to validate if a value is an array of single value or not
 * @example
 *
 * import { isArrayOfSingleElement } from 'itee-validators'
 *
 * if( isArrayOfSingleElement( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function(r){return!n(r)&&1===r.length},exports.isArrayOfString=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(v(r[t]))return!1;return!0},exports.isArrayOfUndefined=function(r){if(n(r))return!1;if(e(r))return!1;for(let t=0,n=r.length;t<n;t++)if(b(r[t]))return!1;return!0},exports.isBigInt64Array=T,exports.isBigUint64Array=B,exports.isBlankString=w,exports.isBlockDevicePath=q,exports.isBoolean=i,exports.isCelsius=$,exports.isCharacterDevicePath=J,exports.isDefined=a,exports.isDirectoryPath=W,exports.isEmpty=O,exports.isEmptyArray=e,exports.isEmptyDirectory=rr,exports.isEmptyFile=or,exports.isEmptyObject=m,exports.isEmptyString=S,exports.isFIFOPath=nr,exports.isFahrenheit=G,exports.isFalse=function(r){return i(r)&&!1===r}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMax
 * @desc Export function to validate if a value is a maximum javascript number
 * @example
 *
 * import { isMaxPositive } from 'itee-validators'
 *
 * if( isMaxPositive( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isFilePath=ir,exports.isFinite=function(r){return Number.isFinite(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isZero
 * @desc Export function to validate if a value is zero, with a special sign
 * @example
 *
 * import { isZero } from 'itee-validators'
 *
 * if( isZero( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isFloat=d,exports.isFloat32Array=V,exports.isFloat64Array=k,exports.isFunction=u,exports.isInfinite=y,exports.isInfiniteNegative=p,exports.isInfinitePositive=l,exports.isInt16Array=L,exports.isInt32Array=_,exports.isInt8Array=D,exports.isInteger=A,exports.isInvalidBlockDevicePath=function(r){return!z(r)},exports.isInvalidCharacterDevicePath=function(r){return!Q(r)},exports.isInvalidDirectoryPath=function(r){return!tr(r)},exports.isInvalidFIFOPath=function(r){return!er(r)},exports.isInvalidFilePath=function(r){return!ur(r)},exports.isInvalidPath=function(r){return!H(r)},exports.isInvalidSocketPath=function(r){return!fr(r)},exports.isInvalidSymbolicLinkPath=function(r){return!cr(r)},exports.isKelvin=K,exports.isMaxNegative=function(r){return r===-Number.MAX_VALUE}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMin
 * @desc Export function to validate if a value is a minimum javascript number
 * @example
 *
 * import { isMaxPositive } from 'itee-validators'
 *
 * if( isMaxPositive( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isMaxPositive=function(r){return r===Number.MAX_VALUE},exports.isMaxSafeInteger=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isSafeInteger
 * @desc Export function to validate if a value is a safe integer number
 * @example
 *
 * import { isMaxSafeInteger } from 'itee-validators'
 *
 * if( isMaxSafeInteger( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function(r){return r===Number.MAX_SAFE_INTEGER},exports.isMinNegative=function(r){return r===-Number.MIN_VALUE},exports.isMinPositive=function(r){return r===Number.MIN_VALUE},exports.isMinSafeInteger=function(r){return r===Number.MIN_SAFE_INTEGER},exports.isNaN=function(r){return Number.isNaN(r)},exports.isNotArray=n,exports.isNotArrayBuffer=function(r){return!U(r)},exports.isNotArrayOfArray=function(r){if(n(r))return!0;if(e(r))return!0;for(let n=0,e=r.length;n<e;n++)if(t(r[n]))return!1;return!0},exports.isNotArrayOfBoolean=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(o(r[t]))return!0;return!1},exports.isNotArrayOfFunction=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(s(r[t]))return!0;return!1},exports.isNotArrayOfNull=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(f(r[t]))return!0;return!1},exports.isNotArrayOfNumber=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(N(r[t]))return!0;return!1},exports.isNotArrayOfObject=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(E(r[t]))return!0;return!1},exports.isNotArrayOfString=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(v(r[t]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isUndefined
 * @desc Export function to validate if a value is a void
 * @example
 *
 * import { isNull } from 'itee-validators'
 *
 * if( isNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isNotArrayOfUndefined=function(r){if(n(r))return!0;if(e(r))return!0;for(let t=0,n=r.length;t<n;t++)if(b(r[t]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isTrue
 * @desc Export function to validate if a value is a boolean set to true or false
 * @example
 *
 * import { isTrue } from 'itee-validators'
 *
 * if( isTrue( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */,exports.isNotBigInt64Array=function(r){return!T(r)},exports.isNotBigUint64Array=function(r){return!B(r)},exports.isNotBlankString=function(r){return!w(r)},exports.isNotBlockDevicePath=function(r){return!q(r)},exports.isNotBoolean=o,exports.isNotCelsius=Z,exports.isNotCharacterDevicePath=function(r){return!J(r)},exports.isNotDefined=c,exports.isNotDirectoryPath=function(r){return!W(r)},exports.isNotEmpty=function(r){return!O(r)},exports.isNotEmptyArray=function(r){return!!n(r)||r.length>0},exports.isNotEmptyDirectory=function(r){return!rr(r)},exports.isNotEmptyFile=function(r,t=0){return!or(r,t)},exports.isNotEmptyObject=function(r){return!m(r)},exports.isNotEmptyString=function(r){return!S(r)},exports.isNotFIFOPath=function(r){return!nr(r)},exports.isNotFahrenheit=Y,exports.isNotFilePath=function(r){return!ir(r)},exports.isNotFloat32Array=function(r){return!V(r)},exports.isNotFloat64Array=function(r){return!k(r)},exports.isNotFunction=s,exports.isNotInt16Array=function(r){return!L(r)},exports.isNotInt32Array=function(r){return!_(r)},exports.isNotInt8Array=function(r){return!D(r)},exports.isNotKelvin=X,exports.isNotNull=f,exports.isNotNumber=N,exports.isNotObject=E,exports.isNotSocketPath=function(r){return!sr(r)},exports.isNotString=v,exports.isNotSymbol=function(r){return"symbol"!=typeof r},exports.isNotSymbolicLinkPath=function(r){return!ar(r)},exports.isNotTemperature=function(r){return X(r)&&Z(r)&&Y(r)},exports.isNotUint16Array=function(r){return!M(r)},exports.isNotUint32Array=function(r){return!R(r)},exports.isNotUint8Array=function(r){return!j(r)},exports.isNotUint8ClampedArray=function(r){return!C(r)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/constants
 * @desc Export constants about temperatures
 *
 */,exports.isNotUndefined=b,exports.isNull=function(r){return null===r},exports.isNumber=h,exports.isNumberNegative=function(r){return h(r)&&r<0},exports.isNumberPositive=function(r){return!N(r)&&(r>0||x(r)||l(r))},exports.isObject=I,exports.isSocketPath=sr,exports.isString=g,exports.isSymbol=F,exports.isSymbolicLinkPath=ar,exports.isTemperature=function(r){return K(r)||$(r)||G(r)},exports.isTrue=function(r){return i(r)&&!0===r},exports.isUint16Array=M,exports.isUint32Array=R,exports.isUint8Array=j,exports.isUint8ClampedArray=C,exports.isUndefined=function(r){return void 0===r},exports.isValidBlockDevicePath=z,exports.isValidCharacterDevicePath=Q,exports.isValidDirectoryPath=tr,exports.isValidFIFOPath=er,exports.isValidFilePath=ur,exports.isValidPath=H,exports.isValidSocketPath=fr,exports.isValidSymbolicLinkPath=cr,exports.isZero=function(r){return 0===r},exports.isZeroNegative=function(r){return 0===r&&1/r===Number.NEGATIVE_INFINITY},exports.isZeroPositive=x;
