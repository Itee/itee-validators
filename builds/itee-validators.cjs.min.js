"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t,r=(t=require("fs"))&&"object"==typeof t&&"default"in t?t.default:t;
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArray
 * @desc Export function to validate if a value is an array or not
 * @example
 *
 * import { isArray } from 'itee-validators'
 *
 * if( isArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function n(t){return Array.isArray(t)}function e(t){return!Array.isArray(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isEmptyArray
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */function i(t){return!e(t)&&0===t.length}function o(t){return null!==t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfNull
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isDefined
 * @desc Export function to validate if a value is a void
 * @example todo
 *
 */
function s(t){return null!=t}function u(t){return null==t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isObject
 * @desc Export function to validate if a value is an object
 * @example todo
 *
 */function f(t){return!u(t)&&t.constructor===Object}function a(t){return!f(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfObject
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isString
 * @desc Export function to validate if a value is a string
 * @example todo
 *
 */
function c(t){return"string"==typeof t||t instanceof String}function p(t){return!c(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfString
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */function l(t){return void 0!==t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfUndefined
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isBoolean
 * @desc Export function to validate if a value is a boolean or not
 * @example todo
 *
 */
function x(t){return"boolean"==typeof t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/functions/isFunction
 * @desc Export function to validate if a value is a function or not
 * @example todo
 *
 */
function y(t){return"function"==typeof t}function N(t){return"function"!=typeof t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isZero
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */function h(t){return 0===t&&1/t===Number.POSITIVE_INFINITY}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isNumber
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */
function A(t){return!u(t)&&t.constructor===Number}function d(t){return!A(t)}function I(t){return Number.isInteger(t)}function m(t){return!d(t)&&(!Number.isNaN(t)&&(!b(t)&&t%1!=0))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isInfinite
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */
function b(t){return!d(t)&&(!Number.isNaN(t)&&!Number.isFinite(t))}function v(t){return t===Number.POSITIVE_INFINITY}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isEmptyObject
 * @desc Export function to validate if a value is an object
 * @example todo
 *
 */
function E(t){if(a(t))return!1;if(0===t.length)return!0;for(let r in t)if(Object.prototype.hasOwnProperty.call(t,r))return!1;return!0}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isEmptyString
 * @desc Export function to validate if a value is a empty string
 * @example todo
 *
 */
function g(t){return!p(t)&&0===t.length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isBlankString
 * @desc Export function to validate if a value is a blank string
 * @example todo
 *
 */
function S(t){return!p(t)&&(!g(t)&&!/\S/.test(t))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/symbols/isSymbol
 * @desc Export function to validate if a value is a symbol
 * @example todo
 *
 */
function F(t){return"symbol"==typeof t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isEmpty
 * @desc Export function to validate if a value is a void
 * @example todo
 *
 */
function P(t){return!u(t)&&(!!g(t)||(!!i(t)||!!E(t)))}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/cores
 * @description Export the Validator singleton instance that allow to validate complex data structure
 * @example
 *
 const validator = Itee.Validators.Validator

 // Using unique function for One registered type
 // Usefull when a simple data structure is used multiple times
 validator.add( 'ColorType', color => {

                const r = color.r
                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
                    return false
                }

                const g = color.g
                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
                    return false
                }

                const b = color.b
                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
                    return false
                }

                return true
            } )

 // Using schema composition
 // Usefull for design validation schema faster and based on previous declared validation types
 validator.add( 'Range_0_255', ( value ) => {

                if ( Itee.Validators.isNotNumber( value ) ) {
                    return false
                }

                return !(value < 0 || value > 255)

            } )

 validator.add( 'ColorSchema', {
                r: {
                    required: true,
                    type:     'Range_0_255'
                },
                g: {
                    required: true,
                    type:     'Range_0_255'
                },
                b: {
                    required: true,
                    type:     'Range_0_255'
                }
            } )

 validator.add( 'ColorStructure', {
                color_from_type: {
                    type: 'ColorType'
                },
                col_from_schema: {
                    type: 'ColorSchema'
                },
                col_from_fn:     {
                    // Inner function
	                // Usefull for specific validation requirement that cannot match other previous validation schema or type
                    fn: function ColorValidator ( color ) {

                        const r = color.r
                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
                            return false
                        }

                        const g = color.g
                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
                            return false
                        }

                        const b = color.b
                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
                            return false
                        }

                        return true
                    }
                }
            } )

 // The data to validate
 const colorStruct = {
                color_from_type: {
                    r: 0,
                    g: 1,
                    b: 2
                },
                col_from_schema: {
                    r: 10,
                    g: 20,
                    b: 30
                },
                col_from_fn:     {
                    r: 0,
                    g: 127,
                    b: 255
                }
            }

 // Execute

 try {

    if ( validator.check( colorStruct, 'ColorStructure' ) ) {
        alert( 'ColorStructure is valid !' )
    } else {
        alert( validator.errors )
    }

} catch ( err ) {
    alert( err )
}
 *
 */
class O{constructor(){this.validators={Boolean:x,Number:A,Integer:I,Float:m,Array:n,String:c,Object:f,Symbol:F,Function:y},this.errors=[]}add(t,r){if(p(t))throw new TypeError("Validator: Expect type to be a string");if(N(r)&&a(r))throw new TypeError("Validator: Expect validator to be an object or a function");if(s(this.validators[t]))throw new TypeError(`Validator: a validator is already defined for type '${t}'`);this.validators[t]=r}remove(t){delete this.validators[t]}getAvalaibleTypes(){const t=[];for(let r in this.validators)t.push(r);return t}check(t,r,n=!0){const e=this.validators[r];if(u(e))throw new TypeError(`Validator: Unable to find schema validation of type '${r}'`);let i=!0;if(y(e))i=e(t);else{if(!f(e))throw new TypeError(`Validator: Unknown validator of type '${r}'`);{let o=!0;for(let f in e){const a=e[f];if(u(a))throw new TypeError(`Validator: Missing validator for key '${f}' of type '${r}'`);const c=t[f],p=a.required;if(u(c)){if(!p)continue;o=!1}let l=a.fn;if(s(l)){if(N(l))throw new TypeError(`Validator: Invalid validation function for '${f}' with type '${r}'`);o=l(c)}else o=this.check(c,a.type,n);if(!1===o&&(this.errors.push(`Validator: Invalid property '${f}' of type '${a.type}' with value '${c}' in object of type '${r}'`),i=!1,n))break}}}return i}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isArrayBuffer
 * @desc Export function to validate if a value is a array buffer
 * @example todo
 *
 */
function U(t){return t instanceof ArrayBuffer}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigInt64Array
 * @desc Export function to validate if a value is a big int 64 array buffer
 * @example todo
 *
 */
function V(t){return t instanceof BigInt64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigUint64Array
 * @desc Export function to validate if a value is a big unsigned int 64 array buffer
 * @example todo
 *
 */
function T(t){return t instanceof BigUint64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat32Array
 * @desc Export function to validate if a value is a float 32 array buffer
 * @example todo
 *
 */
function k(t){return t instanceof Float32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat64Array
 * @desc Export function to validate if a value is a float 64 array buffer
 * @example todo
 *
 */
function B(t){return t instanceof Float64Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt16Array
 * @desc Export function to validate if a value is a int 16 array buffer
 * @example todo
 *
 */
function _(t){return t instanceof Int16Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt32Array
 * @desc Export function to validate if a value is a int 32 array buffer
 * @example todo
 *
 */
function w(t){return t instanceof Int32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt8Array
 * @desc Export function to validate if a value is a int 8 array buffer
 * @example todo
 *
 */
function D(t){return t instanceof Int8Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint16Array
 * @desc Export function to validate if a value is a unsigned int 16 array buffer
 * @example todo
 *
 */
function M(t){return t instanceof Uint16Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint32Array
 * @desc Export function to validate if a value is a unsigned int 32 array buffer
 * @example todo
 *
 */
function L(t){return t instanceof Uint32Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8Array
 * @desc Export function to validate if a value is a unsigned int 8 array buffer
 * @example todo
 *
 */
function j(t){return t instanceof Uint8Array}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8ClampedArray
 * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer
 * @example todo
 *
 */
function C(t){return t instanceof Uint8ClampedArray}exports.Validator=void 0,u(exports.Validator)&&(exports.Validator=new O);
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatues
 * @desc Export function to validate if a value is a temperature
 * @example todo
 *
 */
function $(t){return A(t)&&t>=-273.14999999955}function R(t){return!$(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatues
 * @desc Export function to validate if a value is a temperature
 * @example todo
 *
 */function Z(t){return A(t)&&t>=-459.67}function G(t){return!Z(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatues
 * @desc Export function to validate if a value is a temperature
 * @example todo
 *
 */function Y(t){return A(t)&&t>=4.5e-10}function K(t){return!Y(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatues
 * @desc Export function to validate if a value is a temperature
 * @example todo
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/block-devices/isBlockDevicePath
 * @description Export function to validate if a value is a block device path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function X(t){return r.statSync(t).isBlockDevice()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/paths/isValidPath
 * @description Export function to validate if a value is a valid path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function q(t){return r.existsSync(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/block-devices/isValidBlockDevicePath
 * @description Export function to validate if a value is a valid block device path.
 * @example todo
 *
 */
function z(t){return q(t)&&X(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/character-devices/isCharacterDevicePath
 * @description Export function to validate if a value is a character device path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function H(t){return r.statSync(t).isCharacterDevice()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/character-devices/isValidCharacterDevicePath
 * @description Export function to validate if a value is a valid character device path
 * @example todo
 *
 */
function J(t){return q(t)&&H(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isDirectoryPath
 * @description Export function to validate if a value is a directories path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function Q(t){return r.statSync(t).isDirectory()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isEmptyDirectory
 * @description Export function to validate if a value is a empty directories
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function W(t){return 0===r.readdirSync(t).length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isValidDirectoryPath
 * @description Export function to validate if a value is a valid directory path
 * @example todo
 *
 */
function tt(t){return q(t)&&Q(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/fifo-pipes/isFIFOPath
 * @description Export function to validate if a value is a fifo pipes path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function rt(t){return r.statSync(t).isFIFO()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/fifo-pipes/isValidFIFOPath
 * @description Export function to validate if a value is a valid fifo pipes path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function nt(t){return q(t)&&rt(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isFilePath
 * @description Export function to validate if a value is a file path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function et(t){return r.statSync(t).isFile()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isValidFilePath
 * @description Export function to validate if a value is a valid file path
 * @example todo
 *
 */
function it(t){return q(t)&&et(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/sockets/isSocketPath
 * @description Export function to validate if a value is a socket path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function ot(t){return r.statSync(t).isSocket()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/sockets/isValidSocketPath
 * @description Export function to validate if a value is a valid socket path
 * @example todo
 *
 */
function st(t){return q(t)&&ot(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/symbolic-links/isSocketPath
 * @description Export function to validate if a value is a symbolic links path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function ut(t){return r.statSync(t).isSymbolicLink()}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/symbolic-links/isSocketPath
 * @description Export function to validate if a value is a valid symbolic links path
 * @example todo
 *
 */
function ft(t){return q(t)&&ut(t)}exports.ABSOLUTE_ZERO_CELSIUS=-273.14999999955,exports.ABSOLUTE_ZERO_FAHRENHEIT=-459.67,exports.ABSOLUTE_ZERO_KELVIN=4.5e-10,exports.isArray=n,exports.isArrayBuffer=U,exports.isArrayOfArray=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfArray
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
function(t){if(e(t))return!1;if(i(t))return!1;for(let r=0,n=t.length;r<n;r++)if(e(t[r]))return!1;return!0},exports.isArrayOfMultiElement=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfMultiElement
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
function(t){return!e(t)&&t.length>1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isNull
 * @desc Export function to validate if a value is a void
 * @example todo
 *
 */,exports.isArrayOfNull=function(t){if(e(t))return!1;if(i(t))return!1;for(let r=0,n=t.length;r<n;r++)if(o(t[r]))return!1;return!0},exports.isArrayOfObject=function(t){if(e(t))return!1;if(i(t))return!1;for(let r=0,n=t.length;r<n;r++)if(a(t[r]))return!1;return!0},exports.isArrayOfSingleElement=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfSingleElement
 * @desc Export function to validate if a value is an array of array or not
 * @example todo
 *
 */
function(t){return!e(t)&&1===t.length},exports.isArrayOfString=function(t){if(e(t))return!1;if(i(t))return!1;for(let r=0,n=t.length;r<n;r++)if(p(t[r]))return!1;return!0},exports.isArrayOfUndefined=function(t){if(e(t))return!1;if(i(t))return!1;for(let r=0,n=t.length;r<n;r++)if(l(t[r]))return!1;return!0},exports.isBigInt64Array=V,exports.isBigUint64Array=T,exports.isBlankString=S,exports.isBlockDevicePath=X,exports.isBoolean=x,exports.isCelsius=$,exports.isCharacterDevicePath=H,exports.isDefined=s,exports.isDirectoryPath=Q,exports.isEmpty=P,exports.isEmptyArray=i,exports.isEmptyDirectory=W,exports.isEmptyFile=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isEmptyFile
 * @description Export function to validate if a value is an empty file
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example todo
 *
 */
function(t,n=0){return r.statSync(t).size<=n},exports.isEmptyObject=E,exports.isEmptyString=g,exports.isFIFOPath=rt,exports.isFahrenheit=Z,exports.isFalse=function(t){return x(t)&&!1===t},exports.isFilePath=et,exports.isFinite=function(t){return Number.isFinite(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMax
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */,exports.isFloat=m,exports.isFloat32Array=k,exports.isFloat64Array=B,exports.isFunction=y,exports.isInfinite=b,exports.isInfiniteNegative=function(t){return t===Number.NEGATIVE_INFINITY},exports.isInfinitePositive=v,exports.isInt16Array=_,exports.isInt32Array=w,exports.isInt8Array=D,exports.isInteger=I,exports.isInvalidBlockDevicePath=function(t){return!z(t)},exports.isInvalidCharacterDevicePath=function(t){return!J(t)},exports.isInvalidDirectoryPath=function(t){return!tt(t)},exports.isInvalidFIFOPath=function(t){return!nt(t)},exports.isInvalidFilePath=function(t){return!it(t)},exports.isInvalidPath=function(t){return!q(t)},exports.isInvalidSocketPath=function(t){return!st(t)},exports.isInvalidSymbolicLinkPath=function(t){return!ft(t)},exports.isKelvin=Y,exports.isMaxNegative=function(t){return t===-Number.MAX_VALUE}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMin
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */,exports.isMaxPositive=function(t){return t===Number.MAX_VALUE},exports.isMaxSafeInteger=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isSafeInteger
 * @desc Export function to validate if a value is a finite number
 * @example todo
 *
 */
function(t){return t===Number.MAX_SAFE_INTEGER},exports.isMinNegative=function(t){return t===-Number.MIN_VALUE},exports.isMinPositive=function(t){return t===Number.MIN_VALUE},exports.isMinSafeInteger=function(t){return t===Number.MIN_SAFE_INTEGER},exports.isNaN=function(t){return Number.isNaN(t)},exports.isNotArray=e,exports.isNotArrayBuffer=function(t){return!U(t)},exports.isNotArrayOfArray=function(t){if(e(t))return!0;if(i(t))return!0;for(let r=0,e=t.length;r<e;r++)if(n(t[r]))return!1;return!0},exports.isNotArrayOfNull=function(t){if(e(t))return!0;if(i(t))return!0;for(let r=0,n=t.length;r<n;r++)if(o(t[r]))return!0;return!1},exports.isNotArrayOfObject=function(t){if(e(t))return!0;if(i(t))return!0;for(let r=0,n=t.length;r<n;r++)if(a(t[r]))return!0;return!1},exports.isNotArrayOfString=function(t){if(e(t))return!0;if(i(t))return!0;for(let r=0,n=t.length;r<n;r++)if(p(t[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isUndefined
 * @desc Export function to validate if a value is a void
 * @example todo
 *
 */,exports.isNotArrayOfUndefined=function(t){if(e(t))return!0;if(i(t))return!0;for(let r=0,n=t.length;r<n;r++)if(l(t[r]))return!0;return!1},exports.isNotBigInt64Array=function(t){return!V(t)},exports.isNotBigUint64Array=function(t){return!T(t)},exports.isNotBlankString=function(t){return!S(t)},exports.isNotBlockDevicePath=function(t){return!X(t)},exports.isNotBoolean=function(t){return"boolean"!=typeof t}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isTrue
 * @desc Export function to validate if a value is a boolean set to true or false
 * @example todo
 *
 */,exports.isNotCelsius=R,exports.isNotCharacterDevicePath=function(t){return!H(t)},exports.isNotDefined=u,exports.isNotDirectoryPath=function(t){return!Q(t)},exports.isNotEmpty=function(t){return!P(t)},exports.isNotEmptyArray=function(t){return!!e(t)||t.length>0},exports.isNotEmptyDirectory=function(t){return!W(t)},exports.isNotEmptyFile=function(t,n=0){return r.statSync(t).size>n},exports.isNotEmptyObject=function(t){return!E(t)},exports.isNotEmptyString=function(t){return!g(t)},exports.isNotFIFOPath=function(t){return!rt(t)},exports.isNotFahrenheit=G,exports.isNotFilePath=function(t){return!et(t)},exports.isNotFloat32Array=function(t){return!k(t)},exports.isNotFloat64Array=function(t){return!B(t)},exports.isNotFunction=N,exports.isNotInt16Array=function(t){return!_(t)},exports.isNotInt32Array=function(t){return!w(t)},exports.isNotInt8Array=function(t){return!D(t)},exports.isNotKelvin=K,exports.isNotNull=o,exports.isNotNumber=d,exports.isNotObject=a,exports.isNotSocketPath=function(t){return!ot(t)},exports.isNotString=p,exports.isNotSymbol=function(t){return"symbol"!=typeof t},exports.isNotSymbolicLinkPath=function(t){return!ut(t)},exports.isNotTemperature=function(t){return K(t)&&R(t)&&G(t)},exports.isNotUint16Array=function(t){return!M(t)},exports.isNotUint32Array=function(t){return!L(t)},exports.isNotUint8Array=function(t){return!j(t)},exports.isNotUint8ClampedArray=function(t){return!C(t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/constants
 * @desc Export constants about temperatures
 *
 */,exports.isNotUndefined=l,exports.isNull=function(t){return null===t},exports.isNumber=A,exports.isNumberNegative=function(t){return A(t)&&t<0},exports.isNumberPositive=function(t){return!d(t)&&(t>0||h(t)||v(t))},exports.isObject=f,exports.isSocketPath=ot,exports.isString=c,exports.isSymbol=F,exports.isSymbolicLinkPath=ut,exports.isTemperature=function(t){return Y(t)||$(t)||Z(t)},exports.isTrue=function(t){return x(t)&&!0===t},exports.isUint16Array=M,exports.isUint32Array=L,exports.isUint8Array=j,exports.isUint8ClampedArray=C,exports.isUndefined=function(t){return void 0===t},exports.isValidBlockDevicePath=z,exports.isValidCharacterDevicePath=J,exports.isValidDirectoryPath=tt,exports.isValidFIFOPath=nt,exports.isValidFilePath=it,exports.isValidPath=q,exports.isValidSocketPath=st,exports.isValidSymbolicLinkPath=ft,exports.isZero=function(t){return 0===t},exports.isZeroNegative=function(t){return 0===t&&1/t===Number.NEGATIVE_INFINITY},exports.isZeroPositive=h;
//# sourceMappingURL=itee-validators.cjs.min.js.map
