{"version":3,"file":"itee-validators.cjs.min.js","sources":["../sources/cores/arrays/isArray.js","../sources/cores/arrays/isEmptyArray.js","../sources/cores/arrays/isArrayOfArray.js","../sources/cores/arrays/isArrayOfMultiElement.js","../sources/cores/voids/isNull.js","../sources/cores/arrays/isArrayOfNull.js","../sources/cores/voids/isDefined.js","../sources/cores/objects/isObject.js","../sources/cores/arrays/isArrayOfObject.js","../sources/cores/arrays/isArrayOfSingleElement.js","../sources/cores/strings/isString.js","../sources/cores/arrays/isArrayOfString.js","../sources/cores/voids/isUndefined.js","../sources/cores/arrays/isArrayOfUndefined.js","../sources/cores/booleans/isBoolean.js","../sources/cores/booleans/isTrue.js","../sources/cores/functions/isFunction.js","../sources/cores/numbers/isZero.js","../sources/cores/numbers/isNumber.js","../sources/cores/numbers/isInfinite.js","../sources/cores/numbers/isMax.js","../sources/cores/numbers/isMin.js","../sources/cores/numbers/isSafeInteger.js","../sources/cores/objects/isEmptyObject.js","../sources/cores/strings/isEmptyString.js","../sources/cores/strings/isBlankString.js","../sources/cores/symbols/isSymbol.js","../sources/cores/voids/isEmpty.js","../sources/cores/cores.js","../sources/cores/typed-arrays/isArrayBuffer.js","../sources/cores/typed-arrays/isBigInt64Array.js","../sources/cores/typed-arrays/isBigUint64Array.js","../sources/cores/typed-arrays/isFloat32Array.js","../sources/cores/typed-arrays/isFloat64Array.js","../sources/cores/typed-arrays/isInt16Array.js","../sources/cores/typed-arrays/isInt32Array.js","../sources/cores/typed-arrays/isInt8Array.js","../sources/cores/typed-arrays/isUint16Array.js","../sources/cores/typed-arrays/isUint32Array.js","../sources/cores/typed-arrays/isUint8Array.js","../sources/cores/typed-arrays/isUint8ClampedArray.js","../sources/physics/temperatures/constants.js","../sources/physics/temperatures/isCelsius.js","../sources/physics/temperatures/isFahrenheit.js","../sources/physics/temperatures/isKelvin.js","../sources/physics/temperatures/isTemperature.js","../sources/file-system/block-devices/isBlockDevicePath.js","../sources/file-system/paths/isValidPath.js","../sources/file-system/block-devices/isValidBlockDevicePath.js","../sources/file-system/character-devices/isCharacterDevicePath.js","../sources/file-system/character-devices/isValidCharacterDevicePath.js","../sources/file-system/directories/isDirectoryPath.js","../sources/file-system/directories/isEmptyDirectory.js","../sources/file-system/directories/isValidDirectoryPath.js","../sources/file-system/fifo-pipes/isFIFOPath.js","../sources/file-system/fifo-pipes/isValidFIFOPath.js","../sources/file-system/files/isEmptyFile.js","../sources/file-system/files/isFilePath.js","../sources/file-system/files/isValidFilePath.js","../sources/file-system/sockets/isSocketPath.js","../sources/file-system/sockets/isValidSocketPath.js","../sources/file-system/symbolic-links/isSymbolicLinkPath.js","../sources/file-system/symbolic-links/isValidSymbolicLinkPath.js"],"sourcesContent":["/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArray\r\n * @desc Export function to validate if a value is an array or not\r\n * @example\r\n *\r\n * import { isArray } from 'itee-validators'\r\n *\r\n * if( isArray( value ) ) {\r\n *     //...\r\n * } else {\r\n *     //...\r\n * }\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is array, false otherwise\r\n */\r\nexport function isArray ( data ) {\r\n    return Array.isArray( data )\r\n}\r\n\r\n/**\r\n * Check if given data is not an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is not array, false otherwise\r\n */\r\nexport function isNotArray ( data ) {\r\n    return !Array.isArray( data )\r\n}\r\n\r\n\r\n// #if IS_REMOVE_ON_BUILD\r\n\r\nexport function isArray_0 ( data ) {\r\n    return data instanceof Array\r\n}\r\n\r\nexport function isNotArray_0 ( data ) {\r\n    return !isArray( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isEmptyArray\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is an empty array, false otherwise\r\n */\r\nexport function isEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is not an empty array, false otherwise\r\n */\r\nexport function isNotEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n\r\n    return ( data.length > 0 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfArray\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isArray,\r\n    isNotArray\r\n}                       from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is an array of array, false otherwise\r\n */\r\nexport function isArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an array of array, false otherwise\r\n */\r\nexport function isNotArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfMultiElement\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with multiples values\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with multiples values, false otherwise\r\n */\r\nexport function isArrayOfMultiElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length > 1 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isNull\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is null, false otherwise.\r\n */\r\nexport function isNull ( data ) {\r\n    return ( data === null )\r\n}\r\n\r\n/**\r\n * Check if given data is not null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is not null, false otherwise.\r\n */\r\nexport function isNotNull ( data ) {\r\n    return ( data !== null )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfNull\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNull }    from '../voids/isNull'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are null, false otherwise\r\n */\r\nexport function isArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are not null, false otherwise\r\n */\r\nexport function isNotArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isDefined\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is not null and not undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is not null and not undefined, false otherwise.\r\n */\r\nexport function isDefined ( data ) {\r\n    return ( ( data !== null ) && ( typeof data !== 'undefined' ) )\r\n}\r\n\r\n/**\r\n * Check if given data is null or undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is null or undefined, false otherwise.\r\n */\r\nexport function isNotDefined ( data ) {\r\n    return ( ( data === null ) || ( typeof data === 'undefined' ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/objects/isObject\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotDefined } from '../voids/isDefined'\r\n\r\n/**\r\n * Check if given data is an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is object, false otherwise\r\n */\r\nexport function isObject ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Object )\r\n}\r\n\r\n/**\r\n * Check if given data is not an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is not an object, false otherwise\r\n */\r\nexport function isNotObject ( data ) {\r\n    return !isObject( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfObject\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject }  from '../objects/isObject'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is an array where all values are of object type, false otherwise\r\n */\r\nexport function isArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is not an array where all values are of object type, false otherwise\r\n */\r\nexport function isNotArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfSingleElement\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with a single value\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with a single value, false otherwise\r\n */\r\nexport function isArrayOfSingleElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    if ( data.length !== 1 ) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isString\r\n * @desc Export function to validate if a value is a string\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is a string, false otherwise.\r\n */\r\nexport function isString ( data ) {\r\n    return ( typeof data === 'string' || data instanceof String )\r\n}\r\n\r\n/**\r\n * Check if given data is not a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is not a string, false otherwise.\r\n */\r\nexport function isNotString ( data ) {\r\n    return !isString( data )\r\n}\r\n\r\n// #if IS_REMOVE_ON_BUILD\r\n\r\nexport function isString_0 ( val ) {\r\n    return ( typeof val === 'string' )\r\n}\r\n\r\nexport function isString_1 ( val ) {\r\n    return ( typeof val === 'string' || ( ( !!val && typeof val === 'object' ) && Object.prototype.toString.call( val ) === '[object String]' ) )\r\n}\r\n\r\nexport function isString_2 ( val ) {\r\n    return ( Object.prototype.toString.call( val ) === '[object String]' )\r\n}\r\n\r\nexport function isString_3 ( val ) {\r\n    return ( val !== null && val !== undefined && val.constructor === String )\r\n}\r\n\r\nexport function isString_4 ( val ) {\r\n    return ( val === val + '' )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfString\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString }  from '../strings/isString'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are string, false otherwise\r\n */\r\nexport function isArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are not string, false otherwise\r\n */\r\nexport function isNotArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n\r\n// #if IS_REMOVE_ON_BUILD\r\n\r\nexport function isArrayOfString_1 ( data ) {\r\n\r\n    if ( !Array.isArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n        if ( typeof data[ index ] !== 'string' ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isUndefined\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is undefined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is undefined, false otherwise.\r\n */\r\nexport function isUndefined ( data ) {\r\n    return ( typeof data === 'undefined' )\r\n}\r\n\r\n/**\r\n * Check if given data is defined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is defined, false otherwise.\r\n */\r\nexport function isNotUndefined ( data ) {\r\n    return ( typeof data !== 'undefined' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfUndefined\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotUndefined } from '../voids/isUndefined'\r\nimport { isNotArray }     from './isArray'\r\nimport { isEmptyArray }   from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are undefined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are undefined, false otherwise\r\n */\r\nexport function isArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are defined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are defined, false otherwise\r\n */\r\nexport function isNotArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/booleans/isBoolean\r\n * @desc Export function to validate if a value is a boolean or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is a boolean, false otherwise.\r\n */\r\nexport function isBoolean ( data ) {\r\n    return ( typeof data === 'boolean' )\r\n}\r\n\r\n/**\r\n * Check if given data is not a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is not a boolean, false otherwise.\r\n */\r\nexport function isNotBoolean ( data ) {\r\n    return ( typeof data !== 'boolean' )\r\n}\r\n\r\n// #if IS_REMOVE_ON_BUILD\r\n\r\nexport function isBoolean_alt ( data ) {\r\n    return typeof data === 'boolean' || ( typeof data === 'object' && data !== null && typeof data.valueOf() === 'boolean' )\r\n}\r\n\r\nexport function isNotBoolean_negbase ( data ) {\r\n    return !isBoolean( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/booleans/isTrue\r\n * @desc Export function to validate if a value is a boolean set to true or false\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isBoolean } from './isBoolean'\r\n\r\n/**\r\n * Check if given data is a boolean with value to true\r\n *\r\n * @param data {*} The data to check against true value\r\n * @returns {boolean} true if data is a boolean set to true, false otherwise.\r\n */\r\nexport function isTrue ( data ) {\r\n    return ( isBoolean( data ) && ( data === true ) )\r\n}\r\n\r\n/**\r\n * Check if given data is a boolean with value to false\r\n *\r\n * @param data {*} The data to check against false value\r\n * @returns {boolean} true if data is a boolean set to false, false otherwise.\r\n */\r\nexport function isFalse ( data ) {\r\n    return ( isBoolean( data ) && ( data === false ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/functions/isFunction\r\n * @desc Export function to validate if a value is a function or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is a function, false otherwise.\r\n */\r\nexport function isFunction ( data ) {\r\n    return ( typeof data === 'function' )\r\n}\r\n\r\n/**\r\n * Check if given data is not a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is not a function, false otherwise.\r\n */\r\nexport function isNotFunction ( data ) {\r\n    return ( typeof data !== 'function' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isZero\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is zero\r\n *\r\n * @param data {*} The data to check against the zero value\r\n * @returns {boolean} true if data is zero, false otherwise\r\n */\r\nexport function isZero ( data ) {\r\n    return ( data === 0 )\r\n}\r\n\r\n/**\r\n * Check if the given data is a positive zero\r\n *\r\n * @param data {*} The data to check against the positive zero value\r\n * @returns {boolean} true if data is a positive zero, false otherwise\r\n */\r\nexport function isZeroPositive ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is a negative zero\r\n *\r\n * @param data {*} The data to check against the negative zero value\r\n * @returns {boolean} true if data is a negative zero, false otherwise\r\n */\r\nexport function isZeroNegative ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.NEGATIVE_INFINITY )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isNumber\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n//Todo: isInRange(x, y, value, xInclusive, yInclusive)\r\n//Todo: isInRangeZeroOne(value, zeroInclusive, oneInclusive) //inclusive\r\n\r\nimport { isNotDefined }   from '../voids/isDefined'\r\nimport {\r\n    isInfinite,\r\n    isInfinitePositive\r\n}                         from './isInfinite'\r\nimport { isZeroPositive } from './isZero'\r\n\r\n/**\r\n * Check if given data is a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a number, false otherwise.\r\n */\r\nexport function isNumber ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Number )\r\n\r\n}\r\n\r\n/**\r\n * Check if the data is a positive number\r\n *\r\n * @param data {*} The data to check against the positivity\r\n * @returns {boolean} true if data is a positive number, false otherwise.\r\n */\r\nexport function isNumberPositive ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n\r\n    return ( data > 0 || isZeroPositive( data ) || isInfinitePositive( data ) )\r\n\r\n}\r\n\r\n/**\r\n * Check if the data is a negative number\r\n *\r\n * @param data {*} The data to check against the negativity\r\n * @returns {boolean} true if data is a negative number, false otherwise.\r\n */\r\nexport function isNumberNegative ( data ) {\r\n    return ( isNumber( data ) && data < 0 )\r\n}\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the number type\r\n * @returns {boolean} true if data is not of type number or not a number, false otherwise.\r\n */\r\nexport function isNotNumber ( data ) {\r\n    return !( isNumber( data ) )\r\n}\r\n\r\n/**\r\n * Check if the given data is an integer number\r\n *\r\n * @param data {*} The data to check against the integer state\r\n * @returns {boolean} true if data is an integer, false otherwise\r\n */\r\nexport function isInteger ( data ) {\r\n    return Number.isInteger( data )\r\n}\r\n\r\n/**\r\n * Check if given data is a floating point number\r\n *\r\n * @param data {*} The data to check against the floating point\r\n * @returns {boolean} true if data is a float, false otherwise\r\n */\r\nexport function isFloat ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n    if ( isInfinite( data ) ) { return false}\r\n\r\n    return data % 1 !== 0\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is not a number, false otherwise.\r\n */\r\nexport function isNaN ( data ) {\r\n    return Number.isNaN( data )\r\n}\r\n\r\n\r\n// #if IS_REMOVE_ON_BUILD\r\n\r\nexport function isNumber_0 ( data ) {\r\n    return ( typeof data === 'number' && !Number.isNaN( data ) )\r\n}\r\n\r\nexport function isNumber_1 ( data ) {\r\n    return ( Number( data ) === data )\r\n}\r\n\r\n///\r\n\r\nexport function isInteger_0 ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\nexport function isInteger_1 ( data ) {\r\n    return data % 1 === 0\r\n}\r\n\r\nexport function isInteger_2 ( n ) {\r\n    return n === +n && n === ( n | 0 )\r\n}\r\n\r\nexport function isInteger_3 ( nVal ) {\r\n    return typeof nVal === 'number' && isFinite( nVal ) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor( nVal ) === nVal\r\n}\r\n\r\n///\r\n\r\nexport function isFloat_1 ( n ) {\r\n    return n === +n && n !== ( n | 0 )\r\n}\r\n\r\nexport function isFloat_2 ( x ) {\r\n    return !!( x % 1 )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isInfinite\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNumber } from './isNumber'\r\n\r\n/**\r\n * Check if the given data is an infinite number\r\n *\r\n * @param data {*} The data to check against the infinite state\r\n * @returns {boolean} true if data is infinite, false otherwise\r\n */\r\nexport function isInfinite ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n\r\n    return !Number.isFinite( data )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite negative number\r\n *\r\n * @param data {*} The data to check against the negative infinite state\r\n * @returns {boolean} true if data is negative infinite, false otherwise\r\n */\r\nexport function isInfiniteNegative ( data ) {\r\n    return ( data === Number.NEGATIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite positive number\r\n *\r\n * @param data {*} The data to check against the positive infinite state\r\n * @returns {boolean} true if data is positive infinite, false otherwise\r\n */\r\nexport function isInfinitePositive ( data ) {\r\n    return ( data === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is a finite number\r\n *\r\n * @param data {*} The data to check against the finite state\r\n * @returns {boolean} true if data is finite, false otherwise\r\n */\r\nexport function isFinite ( data ) {\r\n    return Number.isFinite( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isMax\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum positive number\r\n *\r\n * @param data {*} The data to check against the positive maximum state\r\n * @returns {boolean} true if data is positive maximum, false otherwise\r\n */\r\nexport function isMaxPositive ( data ) {\r\n    return ( data === Number.MAX_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum negative number\r\n *\r\n * @param data {*} The data to check against the maximum infinite state\r\n * @returns {boolean} true if data is negative maximum, false otherwise\r\n */\r\nexport function isMaxNegative ( data ) {\r\n    return ( data === -Number.MAX_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isMin\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a minimum positive number\r\n *\r\n * @param data {*} The data to check against the positive minimum state\r\n * @returns {boolean} true if data is positive minimum, false otherwise\r\n */\r\nexport function isMinPositive ( data ) {\r\n    return ( data === Number.MIN_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum negative number\r\n *\r\n * @param data {*} The data to check against the minimum infinite state\r\n * @returns {boolean} true if data is negative minimum, false otherwise\r\n */\r\nexport function isMinNegative ( data ) {\r\n    return ( data === -Number.MIN_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isSafeInteger\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum safe integer number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a maximum safe integer, false otherwise\r\n */\r\nexport function isMaxSafeInteger ( data ) {\r\n    return ( data === Number.MAX_SAFE_INTEGER )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum safe integer number\r\n *\r\n * @param data {*} The data to check against the minimum safe integer state\r\n * @returns {boolean} true if data is a minimum safe integer, false otherwise\r\n */\r\nexport function isMinSafeInteger ( data ) {\r\n    return ( data === Number.MIN_SAFE_INTEGER )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/objects/isEmptyObject\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject } from './isObject'\r\n\r\n/**\r\n * Check if given data is an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is an empty object, false otherwise\r\n */\r\nexport function isEmptyObject ( data ) {\r\n\r\n    if ( isNotObject( data ) ) { return false }\r\n\r\n    if ( data.length === 0 ) {\r\n        return true\r\n    }\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    for ( let key in data ) {\r\n        if ( Object.prototype.hasOwnProperty.call( data, key ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is not an empty object, false otherwise\r\n */\r\nexport function isNotEmptyObject ( data ) {\r\n    return !( isEmptyObject( data ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isEmptyString\r\n * @desc Export function to validate if a value is a empty string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString } from './isString'\r\n\r\n/**\r\n * Check if given data is an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is an empty string, false otherwise.\r\n */\r\nexport function isEmptyString ( data ) {\r\n\r\n    if ( isNotString( data ) ) {\r\n        return false\r\n    }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is not an empty string, false otherwise.\r\n */\r\nexport function isNotEmptyString ( data ) {\r\n\r\n    return !( isEmptyString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isBlankString\r\n * @desc Export function to validate if a value is a blank string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyString } from './isEmptyString'\r\nimport { isNotString }   from './isString'\r\n\r\n/**\r\n * Check if the given data is a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is a blank string, false otherwise.\r\n */\r\nexport function isBlankString ( data ) {\r\n\r\n    if ( isNotString( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return false }\r\n\r\n    return ( !/\\S/.test( data ) )\r\n}\r\n\r\n/**\r\n * Check if the given data is not a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is not a blank string, false otherwise.\r\n */\r\nexport function isNotBlankString ( data ) {\r\n\r\n    return !( isBlankString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/symbols/isSymbol\r\n * @desc Export function to validate if a value is a symbol\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is a symbol, false otherwise.\r\n */\r\nexport function isSymbol ( data ) {\r\n    return ( typeof data === 'symbol' )\r\n}\r\n\r\n/**\r\n * Check if given data is not a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is not a symbol, false otherwise.\r\n */\r\nexport function isNotSymbol ( data ) {\r\n    return ( typeof data !== 'symbol' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isEmpty\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyArray }  from '../arrays/isEmptyArray'\r\nimport { isEmptyObject } from '../objects/isEmptyObject'\r\nimport { isEmptyString } from '../strings/isEmptyString'\r\nimport { isNotDefined }  from './isDefined'\r\n\r\n/**\r\n * Check emptiness of given data\r\n *\r\n * See: https://stackoverflow.com/questions/4346186/how-to-determine-if-a-function-is-empty\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as empty, false otherwise.\r\n */\r\nexport function isEmpty ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return true}\r\n    if ( isEmptyArray( data ) ) { return true }\r\n    if ( isEmptyObject( data ) ) { return true }\r\n\r\n    return false\r\n\r\n}\r\n\r\n/**\r\n * Check fullness of given data\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as not empty, false otherwise.\r\n */\r\nexport function isNotEmpty ( data ) {\r\n    return !isEmpty( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/cores\r\n * @description Export the Validator singleton instance that allow to validate complex data structure\r\n * @example\r\n *\r\n const validator = Itee.Validators.Validator\r\n\r\n // Using unique function for One registered type\r\n // Usefull when a simple data structure is used multiple times\r\n validator.add( 'ColorType', color => {\r\n\r\n                const r = color.r\r\n                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                    return false\r\n                }\r\n\r\n                const g = color.g\r\n                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                    return false\r\n                }\r\n\r\n                const b = color.b\r\n                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                    return false\r\n                }\r\n\r\n                return true\r\n            } )\r\n\r\n // Using schema composition\r\n // Usefull for design validation schema faster and based on previous declared validation types\r\n validator.add( 'Range_0_255', ( value ) => {\r\n\r\n                if ( Itee.Validators.isNotNumber( value ) ) {\r\n                    return false\r\n                }\r\n\r\n                return !(value < 0 || value > 255)\r\n\r\n            } )\r\n\r\n validator.add( 'ColorSchema', {\r\n                r: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                g: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                b: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                }\r\n            } )\r\n\r\n validator.add( 'ColorStructure', {\r\n                color_from_type: {\r\n                    type: 'ColorType'\r\n                },\r\n                col_from_schema: {\r\n                    type: 'ColorSchema'\r\n                },\r\n                col_from_fn:     {\r\n                    // Inner function\r\n\t                // Usefull for specific validation requirement that cannot match other previous validation schema or type\r\n                    fn: function ColorValidator ( color ) {\r\n\r\n                        const r = color.r\r\n                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const g = color.g\r\n                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const b = color.b\r\n                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    }\r\n                }\r\n            } )\r\n\r\n // The data to validate\r\n const colorStruct = {\r\n                color_from_type: {\r\n                    r: 0,\r\n                    g: 1,\r\n                    b: 2\r\n                },\r\n                col_from_schema: {\r\n                    r: 10,\r\n                    g: 20,\r\n                    b: 30\r\n                },\r\n                col_from_fn:     {\r\n                    r: 0,\r\n                    g: 127,\r\n                    b: 255\r\n                }\r\n            }\r\n\r\n // Execute\r\n\r\n try {\r\n\r\n    if ( validator.check( colorStruct, 'ColorStructure' ) ) {\r\n        alert( 'ColorStructure is valid !' )\r\n    } else {\r\n        alert( validator.errors )\r\n    }\r\n\r\n} catch ( err ) {\r\n    alert( err )\r\n}\r\n *\r\n */\r\n\r\nimport { isArray }   from './arrays/_arrays'\r\nimport { isBoolean } from './booleans/_booleans'\r\nimport {\r\n    isFunction,\r\n    isNotFunction\r\n}                    from './functions/_functions'\r\nimport {\r\n    isFloat,\r\n    isInteger,\r\n    isNumber\r\n}                    from './numbers/_numbers'\r\nimport {\r\n    isNotObject,\r\n    isObject\r\n}                    from './objects/_objects'\r\nimport {\r\n    isNotString,\r\n    isString\r\n}                    from './strings/_strings'\r\nimport { isSymbol }  from './symbols/_symbols'\r\nimport {\r\n    isDefined,\r\n    isNotDefined\r\n}                    from './voids/_voids'\r\n\r\nclass Validator {\r\n\r\n    constructor () {\r\n\r\n        /**\r\n         * The validators store, by default it contains validators for Boolean, Number, Integer, Float, Array, String, Object, Symbol and Function\r\n         *\r\n         * @type {(function|object)}\r\n         */\r\n        this.validators = {\r\n            Boolean:  isBoolean,\r\n            Number:   isNumber,\r\n            Integer:  isInteger,\r\n            Float:    isFloat,\r\n            Array:    isArray,\r\n            String:   isString,\r\n            Object:   isObject,\r\n            Symbol:   isSymbol,\r\n            Function: isFunction\r\n        }\r\n\r\n        /**\r\n         * The list of errors occured during the check\r\n         *\r\n         * @type {Array.<string>}\r\n         */\r\n        this.errors = []\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a new validator schema to the validator instance\r\n     *\r\n     * @param type {string} - A string that represent the type of data to validate\r\n     * @param validator {(function|object)} - A function or validation schema that represent the type of data to validate\r\n     */\r\n    add ( type, validator ) {\r\n\r\n        if ( isNotString( type ) ) { throw new TypeError( `Validator: Expect type to be a string` ) }\r\n        if ( isNotFunction( validator ) && isNotObject( validator ) ) { throw new TypeError( `Validator: Expect validator to be an object or a function` ) }\r\n        if ( isDefined( this.validators[ type ] ) ) { throw new TypeError( `Validator: a validator is already defined for type '${type}'` ) }\r\n\r\n        this.validators[ type ] = validator\r\n\r\n    }\r\n\r\n    /**\r\n     * To remove a registered type\r\n     *\r\n     * @param type {string} - The type to remove\r\n     */\r\n    remove ( type ) {\r\n\r\n        delete this.validators[ type ]\r\n\r\n    }\r\n\r\n    /**\r\n     * Allow to known the available types store in current validator instance\r\n     *\r\n     * @return {Array.<string>} - The list of registered type\r\n     */\r\n    getAvalaibleTypes () {\r\n\r\n        const availablesTypes = []\r\n\r\n        for ( let key in this.validators ) {\r\n            availablesTypes.push( key )\r\n        }\r\n\r\n        return availablesTypes\r\n\r\n    }\r\n\r\n    /**\r\n     * Will perform a deep structural comparison between the given data and the validation schema of the given type\r\n     *\r\n     * @param data {*} - The data to validate\r\n     * @param type {string} - The type of the validation schema to apply\r\n     * @param breakOnError {boolean} - Return on first validation error ( true by default )\r\n     * @return {boolean} - Return true is the data is validated, false otherwise\r\n     */\r\n    check ( data, type, breakOnError = true ) {\r\n\r\n        const validator = this.validators[ type ]\r\n        if ( isNotDefined( validator ) ) {\r\n            throw new TypeError( `Validator: Unable to find schema validation of type '${type}'` )\r\n        }\r\n\r\n        let result = true\r\n        if ( isFunction( validator ) ) {\r\n\r\n            result = validator( data )\r\n\r\n        } else if ( isObject( validator ) ) {\r\n\r\n            let subResult = true\r\n            for ( let key in validator ) {\r\n\r\n                const subValidator = validator[ key ]\r\n                if ( isNotDefined( subValidator ) ) {\r\n                    throw new TypeError( `Validator: Missing validator for key '${key}' of type '${type}'` )\r\n                }\r\n\r\n                const value      = data[ key ]\r\n                const isRequired = subValidator.required\r\n                if ( isNotDefined( value ) ) {\r\n                    if ( isRequired ) {\r\n                        subResult = false\r\n                    } else {\r\n                        continue\r\n                    }\r\n                }\r\n\r\n                // In case of overriden validation function check it first\r\n                let validatorFunction = subValidator.fn\r\n                if ( isDefined( validatorFunction ) ) {\r\n\r\n                    if ( isNotFunction( validatorFunction ) ) {\r\n                        throw new TypeError( `Validator: Invalid validation function for '${key}' with type '${type}'` )\r\n                    }\r\n\r\n                    subResult = validatorFunction( value )\r\n\r\n                } else {\r\n\r\n                    subResult = this.check( value, subValidator.type, breakOnError )\r\n\r\n                }\r\n\r\n                if ( subResult === false ) {\r\n\r\n                    this.errors.push( `Validator: Invalid property '${key}' of type '${subValidator.type}' with value '${value}' in object of type '${type}'` )\r\n                    result = false\r\n                    if ( breakOnError ) {\r\n                        break\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new TypeError( `Validator: Unknown validator of type '${type}'` )\r\n\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The singleton instance\r\n *\r\n * @type {Validator}\r\n */\r\nlet validatorInstance = undefined\r\nif ( isNotDefined( validatorInstance ) ) {\r\n    validatorInstance = new Validator()\r\n}\r\n\r\nexport { validatorInstance as Validator }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isArrayBuffer\r\n * @desc Export function to validate if a value is a array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a array buffer\r\n *\r\n * @param data {*} The data to check against the array buffer type\r\n * @returns {boolean} true if data is a array buffer, false otherwise.\r\n */\r\nexport function isArrayBuffer ( data ) {\r\n    return ( data instanceof ArrayBuffer )\r\n}\r\n\r\n/**\r\n * Check if given data is not a array buffer\r\n *\r\n * @param data {*} The data to check against the array buffer type\r\n * @returns {boolean} true if data is not a array buffer, false otherwise.\r\n */\r\nexport function isNotArrayBuffer ( data ) {\r\n    return !isArrayBuffer( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isBigInt64Array\r\n * @desc Export function to validate if a value is a big int 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a big int 64 array\r\n *\r\n * @param data {*} The data to check against the big int 64 array type\r\n * @returns {boolean} true if data is a big int 64 array, false otherwise.\r\n */\r\nexport function isBigInt64Array ( data ) {\r\n    return ( data instanceof BigInt64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a big int 64 array\r\n *\r\n * @param data {*} The data to check against the big int 64 array type\r\n * @returns {boolean} true if data is not a big int 64 array, false otherwise.\r\n */\r\nexport function isNotBigInt64Array ( data ) {\r\n    return !isBigInt64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isBigUint64Array\r\n * @desc Export function to validate if a value is a big unsigned int 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a big unsigned int 64 array\r\n *\r\n * @param data {*} The data to check against the big unsigned int 64 array type\r\n * @returns {boolean} true if data is a big unsigned int 64 array, false otherwise.\r\n */\r\nexport function isBigUint64Array ( data ) {\r\n    return ( data instanceof BigUint64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a big unsigned int 64 array\r\n *\r\n * @param data {*} The data to check against the big unsigned int 64 array type\r\n * @returns {boolean} true if data is not a big unsigned int 64 array, false otherwise.\r\n */\r\nexport function isNotBigUint64Array ( data ) {\r\n    return !isBigUint64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isFloat32Array\r\n * @desc Export function to validate if a value is a float 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a float 32 array\r\n *\r\n * @param data {*} The data to check against the float 32 array  type\r\n * @returns {boolean} true if data is a float 32 array , false otherwise.\r\n */\r\nexport function isFloat32Array ( data ) {\r\n    return ( data instanceof Float32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a float 32 array\r\n *\r\n * @param data {*} The data to check against the float 32 array  type\r\n * @returns {boolean} true if data is not a float 32 array , false otherwise.\r\n */\r\nexport function isNotFloat32Array ( data ) {\r\n    return !isFloat32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isFloat64Array\r\n * @desc Export function to validate if a value is a float 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a float 64 array\r\n *\r\n * @param data {*} The data to check against the float 64 array  type\r\n * @returns {boolean} true if data is a float 64 array , false otherwise.\r\n */\r\nexport function isFloat64Array ( data ) {\r\n    return ( data instanceof Float64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a float 64 array\r\n *\r\n * @param data {*} The data to check against the float 64 array  type\r\n * @returns {boolean} true if data is not a float 64 array , false otherwise.\r\n */\r\nexport function isNotFloat64Array ( data ) {\r\n    return !isFloat64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt16Array\r\n * @desc Export function to validate if a value is a int 16 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 16 array\r\n *\r\n * @param data {*} The data to check against the int 16 array  type\r\n * @returns {boolean} true if data is a int 16 array , false otherwise.\r\n */\r\nexport function isInt16Array ( data ) {\r\n    return ( data instanceof Int16Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 16 array\r\n *\r\n * @param data {*} The data to check against the int 16 array  type\r\n * @returns {boolean} true if data is not a int 16 array , false otherwise.\r\n */\r\nexport function isNotInt16Array ( data ) {\r\n    return !isInt16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt32Array\r\n * @desc Export function to validate if a value is a int 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 32 array\r\n *\r\n * @param data {*} The data to check against the int 32 array  type\r\n * @returns {boolean} true if data is a int 32 array , false otherwise.\r\n */\r\nexport function isInt32Array ( data ) {\r\n    return ( data instanceof Int32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 32 array\r\n *\r\n * @param data {*} The data to check against the int 32 array  type\r\n * @returns {boolean} true if data is not a int 32 array , false otherwise.\r\n */\r\nexport function isNotInt32Array ( data ) {\r\n    return !isInt32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt8Array\r\n * @desc Export function to validate if a value is a int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 8 array\r\n *\r\n * @param data {*} The data to check against the int 8 array  type\r\n * @returns {boolean} true if data is a int 8 array , false otherwise.\r\n */\r\nexport function isInt8Array ( data ) {\r\n    return ( data instanceof Int8Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 8 array\r\n *\r\n * @param data {*} The data to check against the int 8 array  type\r\n * @returns {boolean} true if data is not a int 8 array , false otherwise.\r\n */\r\nexport function isNotInt8Array ( data ) {\r\n    return !isInt8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint16Array\r\n * @desc Export function to validate if a value is a unsigned int 16 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 16 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 16 array  type\r\n * @returns {boolean} true if data is a unsigned int 16 array , false otherwise.\r\n */\r\nexport function isUint16Array ( data ) {\r\n    return ( data instanceof Uint16Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 16 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 16 array  type\r\n * @returns {boolean} true if data is not a unsigned int 16 array , false otherwise.\r\n */\r\nexport function isNotUint16Array ( data ) {\r\n    return !isUint16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint32Array\r\n * @desc Export function to validate if a value is a unsigned int 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 32 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 32 array  type\r\n * @returns {boolean} true if data is a unsigned int 32 array , false otherwise.\r\n */\r\nexport function isUint32Array ( data ) {\r\n    return ( data instanceof Uint32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 32 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 32 array  type\r\n * @returns {boolean} true if data is not a unsigned int 32 array , false otherwise.\r\n */\r\nexport function isNotUint32Array ( data ) {\r\n    return !isUint32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint8Array\r\n * @desc Export function to validate if a value is a unsigned int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 8 array  type\r\n * @returns {boolean} true if data is a unsigned int 8 array , false otherwise.\r\n */\r\nexport function isUint8Array ( data ) {\r\n    return ( data instanceof Uint8Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 8 array  type\r\n * @returns {boolean} true if data is not a unsigned int 8 array , false otherwise.\r\n */\r\nexport function isNotUint8Array ( data ) {\r\n    return !isUint8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint8ClampedArray\r\n * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned clamped int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned clamped int 8 array  type\r\n * @returns {boolean} true if data is a unsigned clamped int 8 array , false otherwise.\r\n */\r\nexport function isUint8ClampedArray ( data ) {\r\n    return ( data instanceof Uint8ClampedArray )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned clamped int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned clamped int 8 array  type\r\n * @returns {boolean} true if data is not a unsigned clamped int 8 array , false otherwise.\r\n */\r\nexport function isNotUint8ClampedArray ( data ) {\r\n    return !isUint8ClampedArray( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/constants\r\n * @desc Export constants about temperatures\r\n *\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default 0.00000000045\r\n * @desc This value corresponding to the absolute zero kelvin value\r\n */\r\nexport const ABSOLUTE_ZERO_KELVIN = 0.00000000045\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default -273.14999999955\r\n * @desc This value corresponding to the absolute zero celsius value\r\n */\r\nexport const ABSOLUTE_ZERO_CELSIUS = -273.14999999955\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default -459.67\r\n * @desc This value corresponding to the absolute zero fahrenheit value\r\n */\r\nexport const ABSOLUTE_ZERO_FAHRENHEIT = -459.67\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }              from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_CELSIUS } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isCelsius ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_CELSIUS )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotCelsius ( data ) {\r\n    return !isCelsius( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }                 from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_FAHRENHEIT } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isFahrenheit ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_FAHRENHEIT )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotFahrenheit ( data ) {\r\n    return !isFahrenheit( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }             from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_KELVIN } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isKelvin ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_KELVIN )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotKelvin ( data ) {\r\n    return !isKelvin( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isCelsius,\r\n    isNotCelsius\r\n} from './isCelsius'\r\nimport {\r\n    isFahrenheit,\r\n    isNotFahrenheit\r\n} from './isFahrenheit'\r\nimport {\r\n    isKelvin,\r\n    isNotKelvin\r\n} from './isKelvin'\r\n\r\n/**\r\n *\r\n * @param data {*}\r\n * @return {boolean}\r\n */\r\nexport function isTemperature ( data ) {\r\n    return ( isKelvin( data ) || isCelsius( data ) || isFahrenheit( data ) )\r\n}\r\n\r\n/**\r\n *\r\n * @param data {*}\r\n * @return {boolean}\r\n */\r\nexport function isNotTemperature ( data ) {\r\n    return ( isNotKelvin( data ) && isNotCelsius( data ) && isNotFahrenheit( data ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/block-devices/isBlockDevicePath\r\n * @description Export function to validate if a value is a block device path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a block device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the block device path type\r\n * @returns {boolean} true if path is a block device path, false otherwise\r\n */\r\nexport function isBlockDevicePath ( path ) {\r\n    return fs.statSync( path ).isBlockDevice()\r\n}\r\n\r\n/**\r\n * Check if given path is not a block device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the block device path type\r\n * @returns {boolean} true if path is not a block device path, false otherwise\r\n */\r\nexport function isNotBlockDevicePath ( path ) {\r\n    return !isBlockDevicePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/paths/isValidPath\r\n * @description Export function to validate if a value is a valid path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given data is a valid file path\r\n *\r\n * @param data {*} The data to check against the path type\r\n * @returns {boolean} true if data is a valid path, false otherwise\r\n */\r\nexport function isValidPath ( data ) {\r\n    return fs.existsSync( data )\r\n}\r\n\r\n/**\r\n * Check if given data is not a valid file path\r\n *\r\n * @param data {*} The data to check against the path type\r\n * @returns {boolean} true if data is a valid path, false otherwise\r\n */\r\nexport function isInvalidPath ( data ) {\r\n    return !isValidPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/block-devices/isValidBlockDevicePath\r\n * @description Export function to validate if a value is a valid block device path.\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }       from '../paths/isValidPath'\r\nimport { isBlockDevicePath } from './isBlockDevicePath'\r\n\r\n/**\r\n * Check if given data is a valid block device path\r\n *\r\n * @param data {*} The data to check against the block device path type\r\n * @returns {boolean} true if data is a valid block device path, false otherwise\r\n */\r\nexport function isValidBlockDevicePath ( data ) {\r\n    return ( isValidPath( data ) && isBlockDevicePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid block device path\r\n *\r\n * @param data {*} The data to check against the block device path type\r\n * @returns {boolean} true if data is an invalid block device path, false otherwise\r\n */\r\nexport function isInvalidBlockDevicePath ( data ) {\r\n    return !isValidBlockDevicePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/character-devices/isCharacterDevicePath\r\n * @description Export function to validate if a value is a character device path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a character device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the character device path type\r\n * @returns {boolean} true if path is a character device path, false otherwise\r\n */\r\nexport function isCharacterDevicePath ( path ) {\r\n    return fs.statSync( path ).isCharacterDevice()\r\n}\r\n\r\n/**\r\n * Check if given path is not a character device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the character device path type\r\n * @returns {boolean} true if path is not a character device path, false otherwise\r\n */\r\nexport function isNotCharacterDevicePath ( path ) {\r\n    return !isCharacterDevicePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/character-devices/isValidCharacterDevicePath\r\n * @description Export function to validate if a value is a valid character device path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }           from '../paths/isValidPath'\r\nimport { isCharacterDevicePath } from './isCharacterDevicePath'\r\n\r\n/**\r\n * Check if given data is a valid character device path\r\n *\r\n * @param data {*} The data to check against the character device path type\r\n * @returns {boolean} true if data is a valid character device path, false otherwise\r\n */\r\nexport function isValidCharacterDevicePath ( data ) {\r\n    return ( isValidPath( data ) && isCharacterDevicePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid character device path\r\n *\r\n * @param data {*} The data to check against the character device path type\r\n * @returns {boolean} true if data is an invalid character device path, false otherwise\r\n */\r\nexport function isInvalidCharacterDevicePath ( data ) {\r\n    return !isValidCharacterDevicePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isDirectoryPath\r\n * @description Export function to validate if a value is a directories path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a directory path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the directory path type\r\n * @returns {boolean} true if path is a directory path, false otherwise\r\n */\r\nexport function isDirectoryPath ( path ) {\r\n    return fs.statSync( path ).isDirectory()\r\n}\r\n\r\n/**\r\n * Check if given path is a not directory path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the directory path type\r\n * @returns {boolean} true if path is a not directory path, false otherwise\r\n */\r\nexport function isNotDirectoryPath ( path ) {\r\n    return !isDirectoryPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isEmptyDirectory\r\n * @description Export function to validate if a value is a empty directories\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given directory path is an empty directory\r\n *\r\n * @param directoryPath {string|Buffer|URL} The directory path to check the emptiness\r\n * @returns {boolean} true if directory is empty, false otherwise\r\n */\r\nexport function isEmptyDirectory ( directoryPath ) {\r\n    return ( fs.readdirSync( directoryPath ).length === 0 )\r\n}\r\n\r\n/**\r\n * Check if given directory path is not an empty directory\r\n *\r\n * @param directoryPath {string|Buffer|URL} The directory path to check the emptiness\r\n * @returns {boolean} true if directory is not empty, false otherwise\r\n */\r\nexport function isNotEmptyDirectory ( directoryPath ) {\r\n    return !isEmptyDirectory( directoryPath )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isValidDirectoryPath\r\n * @description Export function to validate if a value is a valid directory path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }     from '../paths/isValidPath'\r\nimport { isDirectoryPath } from './isDirectoryPath'\r\n\r\n/**\r\n * Check if given data is a valid directory path\r\n *\r\n * @param data {*} The data to check against the directory path type\r\n * @returns {boolean} true if data is a valid directory path, false otherwise\r\n */\r\nexport function isValidDirectoryPath ( data ) {\r\n    return ( isValidPath( data ) && isDirectoryPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid directory path\r\n *\r\n * @param data {*} The data to check against the directory path type\r\n * @returns {boolean} true if data is an invalid directory path, false otherwise\r\n */\r\nexport function isInvalidDirectoryPath ( data ) {\r\n    return !isValidDirectoryPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/fifo-pipes/isFIFOPath\r\n * @description Export function to validate if a value is a fifo pipes path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a fifo path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the fifo path type\r\n * @returns {boolean} true if path is a fifo path, false otherwise\r\n */\r\nexport function isFIFOPath ( path ) {\r\n    return fs.statSync( path ).isFIFO()\r\n}\r\n\r\n/**\r\n * Check if given path is not a fifo path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the fifo path type\r\n * @returns {boolean} true if path is not a fifo path, false otherwise\r\n */\r\nexport function isNotFIFOPath ( path ) {\r\n    return !isFIFOPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/fifo-pipes/isValidFIFOPath\r\n * @description Export function to validate if a value is a valid fifo pipes path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath } from '../paths/isValidPath'\r\nimport { isFIFOPath }  from './isFIFOPath'\r\n\r\n/**\r\n * Check if given data is a valid fifo path\r\n *\r\n * @param data {*} The data to check against the fifo path type\r\n * @returns {boolean} true if data is a valid fifo path, false otherwise\r\n */\r\nexport function isValidFIFOPath ( data ) {\r\n    return ( isValidPath( data ) && isFIFOPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid fifo path\r\n *\r\n * @param data {*} The data to check against the fifo path type\r\n * @returns {boolean} true if data is an invalid fifo path, false otherwise\r\n */\r\nexport function isInvalidFIFOPath ( data ) {\r\n    return !isValidFIFOPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isEmptyFile\r\n * @description Export function to validate if a value is an empty file\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given file path is an empty file more or less a threshold in bytes.\r\n *\r\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\r\n * @param threshold {number} An amount of byte below which it consider the file as empty ( 0 as default ).\r\n * @returns {boolean} true if file is empty, false otherwise\r\n */\r\nexport function isEmptyFile ( filePath, threshold = 0 ) {\r\n    return ( fs.statSync( filePath ).size <= threshold )\r\n}\r\n\r\n/**\r\n * Check if given file path is not an empty file more or less a threshold in bytes.\r\n *\r\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\r\n * @param threshold {number} An amount of byte above which it consider the file as not empty ( 0 as default ).\r\n * @returns {boolean} true if file is not empty, false otherwise\r\n */\r\nexport function isNotEmptyFile ( filePath, threshold = 0 ) {\r\n    return ( fs.statSync( filePath ).size > threshold )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isFilePath\r\n * @description Export function to validate if a value is a file path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a file path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the file path type\r\n * @returns {boolean} true if path is a file path, false otherwise\r\n */\r\nexport function isFilePath ( path ) {\r\n    return fs.statSync( path ).isFile()\r\n}\r\n\r\n/**\r\n * Check if given path is not a file path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the file path type\r\n * @returns {boolean} true if path is not a file path, false otherwise\r\n */\r\nexport function isNotFilePath ( path ) {\r\n    return !isFilePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isValidFilePath\r\n * @description Export function to validate if a value is a valid file path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath } from '../paths/isValidPath'\r\nimport { isFilePath }  from './isFilePath'\r\n\r\n/**\r\n * Check if given data is a valid file path\r\n *\r\n * @param data {*} The data to check against the file path type\r\n * @returns {boolean} true if data is a valid file path, false otherwise\r\n */\r\nexport function isValidFilePath ( data ) {\r\n    return ( isValidPath( data ) && isFilePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid file path\r\n *\r\n * @param data {*} The data to check against the file path type\r\n * @returns {boolean} true if data is an invalid file path, false otherwise\r\n */\r\nexport function isInvalidFilePath ( data ) {\r\n    return !isValidFilePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/sockets/isSocketPath\r\n * @description Export function to validate if a value is a socket path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a socket path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the socket path type\r\n * @returns {boolean} true if path is a socket path, false otherwise\r\n */\r\nexport function isSocketPath ( path ) {\r\n    return fs.statSync( path ).isSocket()\r\n}\r\n\r\n/**\r\n * Check if given path is not a socket path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the socket path type\r\n * @returns {boolean} true if path is not a socket path, false otherwise\r\n */\r\nexport function isNotSocketPath ( path ) {\r\n    return !isSocketPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/sockets/isValidSocketPath\r\n * @description Export function to validate if a value is a valid socket path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }  from '../paths/isValidPath'\r\nimport { isSocketPath } from './isSocketPath'\r\n\r\n/**\r\n * Check if given data is a valid socket path\r\n *\r\n * @param data {*} The data to check against the socket path type\r\n * @returns {boolean} true if data is a valid socket path, false otherwise\r\n */\r\nexport function isValidSocketPath ( data ) {\r\n    return ( isValidPath( data ) && isSocketPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid socket path\r\n *\r\n * @param data {*} The data to check against the socket path type\r\n * @returns {boolean} true if data is an invalid socket path, false otherwise\r\n */\r\nexport function isInvalidSocketPath ( data ) {\r\n    return !isValidSocketPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/symbolic-links/isSocketPath\r\n * @description Export function to validate if a value is a symbolic links path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a symbolic link path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the symbolic link path type\r\n * @returns {boolean} true if path is a symbolic link path, false otherwise\r\n */\r\nexport function isSymbolicLinkPath ( path ) {\r\n    return fs.statSync( path ).isSymbolicLink()\r\n}\r\n\r\n/**\r\n * Check if given path is not a symbolic link path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the symbolic link path type\r\n * @returns {boolean} true if path is not a symbolic link path, false otherwise\r\n */\r\nexport function isNotSymbolicLinkPath ( path ) {\r\n    return !isSymbolicLinkPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/symbolic-links/isSocketPath\r\n * @description Export function to validate if a value is a valid symbolic links path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }        from '../paths/isValidPath'\r\nimport { isSymbolicLinkPath } from './isSymbolicLinkPath'\r\n\r\n/**\r\n * Check if given data is a valid symbolic link path\r\n *\r\n * @param data {*} The data to check against the symbolic link path type\r\n * @returns {boolean} true if data is a valid symbolic link path, false otherwise\r\n */\r\nexport function isValidSymbolicLinkPath ( data ) {\r\n    return ( isValidPath( data ) && isSymbolicLinkPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid symbolic link path\r\n *\r\n * @param data {*} The data to check against the symbolic link path type\r\n * @returns {boolean} true if data is an invalid symbolic link path, false otherwise\r\n */\r\nexport function isInvalidSymbolicLinkPath ( data ) {\r\n    return !isValidSymbolicLinkPath( data )\r\n}\r\n"],"names":["isArray","data","Array","isNotArray","isEmptyArray","length","isNotEmptyArray","isArrayOfArray","index","dataLength","isNotArrayOfArray","isArrayOfMultiElement","isNull","isNotNull","isArrayOfNull","isNotArrayOfNull","isDefined","isNotDefined","isObject","constructor","Object","isNotObject","isArrayOfObject","isNotArrayOfObject","isArrayOfSingleElement","isString","String","isNotString","isArrayOfString","isNotArrayOfString","isUndefined","isNotUndefined","isArrayOfUndefined","isNotArrayOfUndefined","isBoolean","isNotBoolean","isTrue","isFalse","isFunction","isNotFunction","isZero","isZeroPositive","Number","POSITIVE_INFINITY","isZeroNegative","NEGATIVE_INFINITY","isNumber","isNumberPositive","isNotNumber","isInfinitePositive","isNumberNegative","isInteger","isFloat","isNaN","isInfinite","isFinite","isInfiniteNegative","isMaxPositive","MAX_VALUE","isMaxNegative","isMinPositive","MIN_VALUE","isMinNegative","isMaxSafeInteger","MAX_SAFE_INTEGER","isMinSafeInteger","MIN_SAFE_INTEGER","isEmptyObject","key","prototype","hasOwnProperty","call","isNotEmptyObject","isEmptyString","isNotEmptyString","isBlankString","test","isNotBlankString","isSymbol","isNotSymbol","isEmpty","isNotEmpty","Validator","[object Object]","this","validators","Boolean","Integer","Float","Symbol","Function","errors","type","validator","TypeError","availablesTypes","push","breakOnError","result","subResult","subValidator","value","isRequired","required","validatorFunction","fn","check","isArrayBuffer","ArrayBuffer","isNotArrayBuffer","isBigInt64Array","BigInt64Array","isNotBigInt64Array","isBigUint64Array","BigUint64Array","isNotBigUint64Array","isFloat32Array","Float32Array","isNotFloat32Array","isFloat64Array","Float64Array","isNotFloat64Array","isInt16Array","Int16Array","isNotInt16Array","isInt32Array","Int32Array","isNotInt32Array","isInt8Array","Int8Array","isNotInt8Array","isUint16Array","Uint16Array","isNotUint16Array","isUint32Array","Uint32Array","isNotUint32Array","isUint8Array","Uint8Array","isNotUint8Array","isUint8ClampedArray","Uint8ClampedArray","isNotUint8ClampedArray","exports","undefined","validatorInstance","ABSOLUTE_ZERO_KELVIN","ABSOLUTE_ZERO_CELSIUS","ABSOLUTE_ZERO_FAHRENHEIT","isCelsius","isNotCelsius","isFahrenheit","isNotFahrenheit","isKelvin","isNotKelvin","isTemperature","isNotTemperature","isBlockDevicePath","path","fs","statSync","isBlockDevice","isNotBlockDevicePath","isValidPath","existsSync","isInvalidPath","isValidBlockDevicePath","isInvalidBlockDevicePath","isCharacterDevicePath","isCharacterDevice","isNotCharacterDevicePath","isValidCharacterDevicePath","isInvalidCharacterDevicePath","isDirectoryPath","isDirectory","isNotDirectoryPath","isEmptyDirectory","directoryPath","readdirSync","isNotEmptyDirectory","isValidDirectoryPath","isInvalidDirectoryPath","isFIFOPath","isFIFO","isNotFIFOPath","isValidFIFOPath","isInvalidFIFOPath","isEmptyFile","filePath","threshold","size","isNotEmptyFile","isFilePath","isFile","isNotFilePath","isValidFilePath","isInvalidFilePath","isSocketPath","isSocket","isNotSocketPath","isValidSocketPath","isInvalidSocketPath","isSymbolicLinkPath","isSymbolicLink","isNotSymbolicLinkPath","isValidSymbolicLinkPath","isInvalidSymbolicLinkPath"],"mappings":"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"}