{"version":3,"file":"itee-validators.cjs.min.js","sources":["../sources/cores/arrays/isArray.js","../sources/cores/arrays/isEmptyArray.js","../sources/cores/arrays/isArrayOfArray.js","../sources/cores/arrays/isArrayOfMultiElement.js","../sources/cores/voids/isNull.js","../sources/cores/arrays/isArrayOfNull.js","../sources/cores/voids/isDefined.js","../sources/cores/objects/isObject.js","../sources/cores/arrays/isArrayOfObject.js","../sources/cores/arrays/isArrayOfSingleElement.js","../sources/cores/strings/isString.js","../sources/cores/arrays/isArrayOfString.js","../sources/cores/voids/isUndefined.js","../sources/cores/arrays/isArrayOfUndefined.js","../sources/cores/booleans/isBoolean.js","../sources/cores/booleans/isTrue.js","../sources/cores/functions/isFunction.js","../sources/cores/numbers/isZero.js","../sources/cores/numbers/isNumber.js","../sources/cores/numbers/isInfinite.js","../sources/cores/numbers/isMax.js","../sources/cores/numbers/isMin.js","../sources/cores/numbers/isSafeInteger.js","../sources/cores/objects/isEmptyObject.js","../sources/cores/strings/isEmptyString.js","../sources/cores/strings/isBlankString.js","../sources/cores/symbols/isSymbol.js","../sources/cores/voids/isEmpty.js","../sources/cores/cores.js","../sources/cores/typed-arrays/isArrayBuffer.js","../sources/cores/typed-arrays/isBigInt64Array.js","../sources/cores/typed-arrays/isBigUint64Array.js","../sources/cores/typed-arrays/isFloat32Array.js","../sources/cores/typed-arrays/isFloat64Array.js","../sources/cores/typed-arrays/isInt16Array.js","../sources/cores/typed-arrays/isInt32Array.js","../sources/cores/typed-arrays/isInt8Array.js","../sources/cores/typed-arrays/isUint16Array.js","../sources/cores/typed-arrays/isUint32Array.js","../sources/cores/typed-arrays/isUint8Array.js","../sources/cores/typed-arrays/isUint8ClampedArray.js","../sources/file-system/block-devices/isBlockDevicePath.js","../sources/file-system/paths/isValidPath.js","../sources/file-system/block-devices/isValidBlockDevicePath.js","../sources/file-system/character-devices/isCharacterDevicePath.js","../sources/file-system/character-devices/isValidCharacterDevicePath.js","../sources/file-system/directories/isDirectoryPath.js","../sources/file-system/directories/isEmptyDirectory.js","../sources/file-system/directories/isValidDirectoryPath.js","../sources/file-system/fifo-pipes/isFIFOPath.js","../sources/file-system/fifo-pipes/isValidFIFOPath.js","../sources/file-system/files/isEmptyFile.js","../sources/file-system/files/isFilePath.js","../sources/file-system/files/isValidFilePath.js","../sources/file-system/sockets/isSocketPath.js","../sources/file-system/sockets/isValidSocketPath.js","../sources/file-system/symbolic-links/isSymbolicLinkPath.js","../sources/file-system/symbolic-links/isValidSymbolicLinkPath.js","../sources/physics/temperatures/constants.js","../sources/physics/temperatures/isCelsius.js","../sources/physics/temperatures/isFahrenheit.js","../sources/physics/temperatures/isKelvin.js","../sources/physics/temperatures/isTemperature.js"],"sourcesContent":["/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArray\r\n * @desc Export function to validate if a value is an array or not\r\n * @example\r\n *\r\n * import { isArray } from 'itee-validators'\r\n *\r\n * if( isArray( value ) ) {\r\n *     //...\r\n * } else {\r\n *     //...\r\n * }\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is array, false otherwise\r\n */\r\nexport function isArray ( data ) {\r\n    return Array.isArray( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\n\r\n// Not exported alternative for benchmark\r\nexport function isArray_0 ( data ) {\r\n    return data instanceof Array\r\n}\r\n\r\n// #endif\r\n\r\n////////////////////\r\n\r\n/**\r\n * Check if given data is not an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is not array, false otherwise\r\n */\r\nexport function isNotArray ( data ) {\r\n    return !Array.isArray( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\n\r\nexport function isNotArray_0 ( data ) {\r\n    return !isArray( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isEmptyArray\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is an empty array, false otherwise\r\n */\r\nexport function isEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n///////\r\n\r\n/**\r\n * Check if given data is not an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is not an empty array, false otherwise\r\n */\r\nexport function isNotEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n\r\n    return ( data.length > 0 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfArray\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isArray,\r\n    isNotArray\r\n}                       from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is an array of array, false otherwise\r\n */\r\nexport function isArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is not an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an array of array, false otherwise\r\n */\r\nexport function isNotArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfMultiElement\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with multiples values\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with multiples values, false otherwise\r\n */\r\nexport function isArrayOfMultiElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length > 1 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isNull\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is null, false otherwise.\r\n */\r\nexport function isNull ( data ) {\r\n    return ( data === null )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is not null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is not null, false otherwise.\r\n */\r\nexport function isNotNull ( data ) {\r\n    return ( data !== null )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfNull\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNull }    from '../voids/isNull'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are null, false otherwise\r\n */\r\nexport function isArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are not null, false otherwise\r\n */\r\nexport function isNotArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isDefined\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is not null and not undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is not null and not undefined, false otherwise.\r\n */\r\nexport function isDefined ( data ) {\r\n    return ( ( data !== null ) && ( typeof data !== 'undefined' ) )\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is null or undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is null or undefined, false otherwise.\r\n */\r\nexport function isNotDefined ( data ) {\r\n    return ( ( data === null ) || ( typeof data === 'undefined' ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/objects/isObject\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotDefined } from '../voids/isDefined'\r\n\r\n/**\r\n * Check if given data is an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is object, false otherwise\r\n */\r\nexport function isObject ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Object )\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is not an object, false otherwise\r\n */\r\nexport function isNotObject ( data ) {\r\n    return !isObject( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfObject\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject }  from '../objects/isObject'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is an array where all values are of object type, false otherwise\r\n */\r\nexport function isArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is not an array where all values are of object type, false otherwise\r\n */\r\nexport function isNotArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfSingleElement\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with a single value\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with a single value, false otherwise\r\n */\r\nexport function isArrayOfSingleElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    if ( data.length !== 1 ) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isString\r\n * @desc Export function to validate if a value is a string\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is a string, false otherwise.\r\n */\r\nexport function isString ( data ) {\r\n    return ( typeof data === 'string' || data instanceof String )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isString_0 ( val ) {\r\n    return ( typeof val === 'string' )\r\n}\r\n\r\nexport function isString_1 ( val ) {\r\n    return ( typeof val === 'string' || ( ( !!val && typeof val === 'object' ) && Object.prototype.toString.call( val ) === '[object String]' ) )\r\n}\r\n\r\nexport function isString_2 ( val ) {\r\n    return ( Object.prototype.toString.call( val ) === '[object String]' )\r\n}\r\n\r\nexport function isString_3 ( val ) {\r\n    return ( val !== null && val !== undefined && val.constructor === String )\r\n}\r\n\r\nexport function isString_4 ( val ) {\r\n    return ( val === val + '' )\r\n}\r\n\r\n// #endif\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is not a string, false otherwise.\r\n */\r\nexport function isNotString ( data ) {\r\n    return !isString( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfString\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString }  from '../strings/isString'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are string, false otherwise\r\n */\r\nexport function isArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isArrayOfString_1 ( data ) {\r\n\r\n    if ( !Array.isArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n        if ( typeof data[ index ] !== 'string' ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n// #endif\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are not string, false otherwise\r\n */\r\nexport function isNotArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isUndefined\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is undefined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is undefined, false otherwise.\r\n */\r\nexport function isUndefined ( data ) {\r\n    return ( typeof data === 'undefined' )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is defined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is defined, false otherwise.\r\n */\r\nexport function isNotUndefined ( data ) {\r\n    return ( typeof data !== 'undefined' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/arrays/isArrayOfUndefined\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotUndefined } from '../voids/isUndefined'\r\nimport { isNotArray }     from './isArray'\r\nimport { isEmptyArray }   from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are undefined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are undefined, false otherwise\r\n */\r\nexport function isArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are defined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are defined, false otherwise\r\n */\r\nexport function isNotArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/booleans/isBoolean\r\n * @desc Export function to validate if a value is a boolean or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is a boolean, false otherwise.\r\n */\r\nexport function isBoolean ( data ) {\r\n    return ( typeof data === 'boolean' )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isBoolean_alt ( data ) {\r\n    return typeof data === 'boolean' || ( typeof data === 'object' && data !== null && typeof data.valueOf() === 'boolean' )\r\n}\r\n\r\n// #endif\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is not a boolean, false otherwise.\r\n */\r\nexport function isNotBoolean ( data ) {\r\n    return ( typeof data !== 'boolean' )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isNotBoolean_negbase ( data ) {\r\n    return !isBoolean( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/booleans/isTrue\r\n * @desc Export function to validate if a value is a boolean set to true or false\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isBoolean } from './isBoolean'\r\n\r\n/**\r\n * Check if given data is a boolean with value to true\r\n *\r\n * @param data {*} The data to check against true value\r\n * @returns {boolean} true if data is a boolean set to true, false otherwise.\r\n */\r\nexport function isTrue ( data ) {\r\n    return ( isBoolean( data ) && ( data === true ) )\r\n}\r\n\r\n/**\r\n * Check if given data is a boolean with value to false\r\n *\r\n * @param data {*} The data to check against false value\r\n * @returns {boolean} true if data is a boolean set to false, false otherwise.\r\n */\r\nexport function isFalse ( data ) {\r\n    return ( isBoolean( data ) && ( data === false ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/functions/isFunction\r\n * @desc Export function to validate if a value is a function or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is a function, false otherwise.\r\n */\r\nexport function isFunction ( data ) {\r\n    return ( typeof data === 'function' )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is not a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is not a function, false otherwise.\r\n */\r\nexport function isNotFunction ( data ) {\r\n    return ( typeof data !== 'function' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isZero\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is zero\r\n *\r\n * @param data {*} The data to check against the zero value\r\n * @returns {boolean} true if data is zero, false otherwise\r\n */\r\nexport function isZero ( data ) {\r\n    return ( data === 0 )\r\n}\r\n\r\n/**\r\n * Check if the given data is a positive zero\r\n *\r\n * @param data {*} The data to check against the positive zero value\r\n * @returns {boolean} true if data is a positive zero, false otherwise\r\n */\r\nexport function isZeroPositive ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is a negative zero\r\n *\r\n * @param data {*} The data to check against the negative zero value\r\n * @returns {boolean} true if data is a negative zero, false otherwise\r\n */\r\nexport function isZeroNegative ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.NEGATIVE_INFINITY )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isNumber\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotDefined }   from '../voids/isDefined'\r\nimport {\r\n    isInfinite,\r\n    isInfinitePositive\r\n}                         from './isInfinite'\r\nimport { isZeroPositive } from './isZero'\r\n\r\n/**\r\n * Check if given data is a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a number, false otherwise.\r\n */\r\nexport function isNumber ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Number )\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isNumber_0 ( data ) {\r\n    return ( typeof data === 'number' && !Number.isNaN( data ) )\r\n}\r\n\r\nexport function isNumber_1 ( data ) {\r\n    return ( Number( data ) === data )\r\n}\r\n\r\n// #endif\r\n\r\n/**\r\n * Check if the data is a positive number\r\n *\r\n * @param data {*} The data to check against the positivity\r\n * @returns {boolean} true if data is a positive number, false otherwise.\r\n */\r\nexport function isNumberPositive ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n\r\n    return ( data > 0 || isZeroPositive( data ) || isInfinitePositive( data ) )\r\n\r\n}\r\n\r\n/**\r\n * Check if the data is a negative number\r\n *\r\n * @param data {*} The data to check against the negativity\r\n * @returns {boolean} true if data is a negative number, false otherwise.\r\n */\r\nexport function isNumberNegative ( data ) {\r\n    return ( isNumber( data ) && data < 0 )\r\n}\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the number type\r\n * @returns {boolean} true if data is not of type number or not a number, false otherwise.\r\n */\r\nexport function isNotNumber ( data ) {\r\n    return !( isNumber( data ) )\r\n}\r\n\r\n/////////\r\n\r\n//Todo: isInRange(x, y, value, xInclusive, yInclusive)\r\n//Todo: isInRangeZeroOne(value, zeroInclusive, oneInclusive) //inclusive\r\n\r\n/////////\r\n\r\n/**\r\n * Check if the given data is an integer number\r\n *\r\n * @param data {*} The data to check against the integer state\r\n * @returns {boolean} true if data is an integer, false otherwise\r\n */\r\nexport function isInteger ( data ) {\r\n    return Number.isInteger( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isInteger_0 ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\nexport function isInteger_1 ( data ) {\r\n    return data % 1 === 0\r\n}\r\n\r\nexport function isInteger_2 ( n ) {\r\n    return n === +n && n === ( n | 0 )\r\n}\r\n\r\nexport function isInteger_3 ( nVal ) {\r\n    return typeof nVal === 'number' && isFinite( nVal ) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor( nVal ) === nVal\r\n}\r\n\r\n// #endif\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is a floating point number\r\n *\r\n * @param data {*} The data to check against the floating point\r\n * @returns {boolean} true if data is a float, false otherwise\r\n */\r\nexport function isFloat ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n    if ( isInfinite( data ) ) { return false}\r\n\r\n    return data % 1 !== 0\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isFloat_1 ( n ) {\r\n    return n === +n && n !== ( n | 0 )\r\n}\r\n\r\nexport function isFloat_2 ( x ) {\r\n    return !!( x % 1 )\r\n}\r\n\r\n// #endif\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is not a number, false otherwise.\r\n */\r\nexport function isNaN ( data ) {\r\n    return Number.isNaN( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isInfinite\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNumber } from './isNumber'\r\n\r\n/**\r\n * Check if the given data is an infinite number\r\n *\r\n * @param data {*} The data to check against the infinite state\r\n * @returns {boolean} true if data is infinite, false otherwise\r\n */\r\nexport function isInfinite ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n\r\n    return !Number.isFinite( data )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite negative number\r\n *\r\n * @param data {*} The data to check against the negative infinite state\r\n * @returns {boolean} true if data is negative infinite, false otherwise\r\n */\r\nexport function isInfiniteNegative ( data ) {\r\n    return ( data === Number.NEGATIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite positive number\r\n *\r\n * @param data {*} The data to check against the positive infinite state\r\n * @returns {boolean} true if data is positive infinite, false otherwise\r\n */\r\nexport function isInfinitePositive ( data ) {\r\n    return ( data === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if the given data is a finite number\r\n *\r\n * @param data {*} The data to check against the finite state\r\n * @returns {boolean} true if data is finite, false otherwise\r\n */\r\nexport function isFinite ( data ) {\r\n    return Number.isFinite( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isMax\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum positive number\r\n *\r\n * @param data {*} The data to check against the positive maximum state\r\n * @returns {boolean} true if data is positive maximum, false otherwise\r\n */\r\nexport function isMaxPositive ( data ) {\r\n    return ( data === Number.MAX_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum negative number\r\n *\r\n * @param data {*} The data to check against the maximum infinite state\r\n * @returns {boolean} true if data is negative maximum, false otherwise\r\n */\r\nexport function isMaxNegative ( data ) {\r\n    return ( data === -Number.MAX_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isMin\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a minimum positive number\r\n *\r\n * @param data {*} The data to check against the positive minimum state\r\n * @returns {boolean} true if data is positive minimum, false otherwise\r\n */\r\nexport function isMinPositive ( data ) {\r\n    return ( data === Number.MIN_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum negative number\r\n *\r\n * @param data {*} The data to check against the minimum infinite state\r\n * @returns {boolean} true if data is negative minimum, false otherwise\r\n */\r\nexport function isMinNegative ( data ) {\r\n    return ( data === -Number.MIN_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/numbers/isSafeInteger\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum safe integer number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a maximum safe integer, false otherwise\r\n */\r\nexport function isMaxSafeInteger ( data ) {\r\n    return ( data === Number.MAX_SAFE_INTEGER )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum safe integer number\r\n *\r\n * @param data {*} The data to check against the minimum safe integer state\r\n * @returns {boolean} true if data is a minimum safe integer, false otherwise\r\n */\r\nexport function isMinSafeInteger ( data ) {\r\n    return ( data === Number.MIN_SAFE_INTEGER )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/objects/isEmptyObject\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject } from './isObject'\r\n\r\n/**\r\n * Check if given data is an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is an empty object, false otherwise\r\n */\r\nexport function isEmptyObject ( data ) {\r\n\r\n    if ( isNotObject( data ) ) { return false }\r\n\r\n    if ( data.length === 0 ) {\r\n        return true\r\n    }\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    for ( let key in data ) {\r\n        if ( Object.prototype.hasOwnProperty.call( data, key ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is not an empty object, false otherwise\r\n */\r\nexport function isNotEmptyObject ( data ) {\r\n    return !( isEmptyObject( data ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isEmptyString\r\n * @desc Export function to validate if a value is a empty string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString } from './isString'\r\n\r\n/**\r\n * Check if given data is an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is an empty string, false otherwise.\r\n */\r\nexport function isEmptyString ( data ) {\r\n\r\n    if ( isNotString( data ) ) {\r\n        return false\r\n    }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is not an empty string, false otherwise.\r\n */\r\nexport function isNotEmptyString ( data ) {\r\n\r\n    return !( isEmptyString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/strings/isBlankString\r\n * @desc Export function to validate if a value is a blank string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyString } from './isEmptyString'\r\nimport { isNotString }   from './isString'\r\n\r\n/**\r\n * Check if the given data is a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is a blank string, false otherwise.\r\n */\r\nexport function isBlankString ( data ) {\r\n\r\n    if ( isNotString( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return false }\r\n\r\n    return ( !/\\S/.test( data ) )\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if the given data is not a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is not a blank string, false otherwise.\r\n */\r\nexport function isNotBlankString ( data ) {\r\n\r\n    return !( isBlankString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/symbols/isSymbol\r\n * @desc Export function to validate if a value is a symbol\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is a symbol, false otherwise.\r\n */\r\nexport function isSymbol ( data ) {\r\n    return ( typeof data === 'symbol' )\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is not a symbol, false otherwise.\r\n */\r\nexport function isNotSymbol ( data ) {\r\n    return ( typeof data !== 'symbol' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/voids/isEmpty\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyArray }  from '../arrays/isEmptyArray'\r\nimport { isEmptyObject } from '../objects/isEmptyObject'\r\nimport { isEmptyString } from '../strings/isEmptyString'\r\nimport { isNotDefined }  from './isDefined'\r\n\r\n/**\r\n * Check emptiness of given data\r\n *\r\n * See: https://stackoverflow.com/questions/4346186/how-to-determine-if-a-function-is-empty\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as empty, false otherwise.\r\n */\r\nexport function isEmpty ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return true}\r\n    if ( isEmptyArray( data ) ) { return true }\r\n    if ( isEmptyObject( data ) ) { return true }\r\n\r\n    return false\r\n\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check fullness of given data\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as not empty, false otherwise.\r\n */\r\nexport function isNotEmpty ( data ) {\r\n    return !isEmpty( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/cores\r\n * @description Export the Validator singleton instance that allow to validate complex data structure\r\n * @example\r\n *\r\n const validator = Itee.Validators.Validator\r\n\r\n // Using unique function for One registered type\r\n // Usefull when a simple data structure is used multiple times\r\n validator.add( 'ColorType', color => {\r\n\r\n                const r = color.r\r\n                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                    return false\r\n                }\r\n\r\n                const g = color.g\r\n                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                    return false\r\n                }\r\n\r\n                const b = color.b\r\n                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                    return false\r\n                }\r\n\r\n                return true\r\n            } )\r\n\r\n // Using schema composition\r\n // Usefull for design validation schema faster and based on previous declared validation types\r\n validator.add( 'Range_0_255', ( value ) => {\r\n\r\n                if ( Itee.Validators.isNotNumber( value ) ) {\r\n                    return false\r\n                }\r\n\r\n                return !(value < 0 || value > 255)\r\n\r\n            } )\r\n\r\n validator.add( 'ColorSchema', {\r\n                r: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                g: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                b: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                }\r\n            } )\r\n\r\n validator.add( 'ColorStructure', {\r\n                color_from_type: {\r\n                    type: 'ColorType'\r\n                },\r\n                col_from_schema: {\r\n                    type: 'ColorSchema'\r\n                },\r\n                col_from_fn:     {\r\n                    // Inner function\r\n\t                // Usefull for specific validation requirement that cannot match other previous validation schema or type\r\n                    fn: function ColorValidator ( color ) {\r\n\r\n                        const r = color.r\r\n                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const g = color.g\r\n                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const b = color.b\r\n                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    }\r\n                }\r\n            } )\r\n\r\n // The data to validate\r\n const colorStruct = {\r\n                color_from_type: {\r\n                    r: 0,\r\n                    g: 1,\r\n                    b: 2\r\n                },\r\n                col_from_schema: {\r\n                    r: 10,\r\n                    g: 20,\r\n                    b: 30\r\n                },\r\n                col_from_fn:     {\r\n                    r: 0,\r\n                    g: 127,\r\n                    b: 255\r\n                }\r\n            }\r\n\r\n // Execute\r\n\r\n try {\r\n\r\n    if ( validator.check( colorStruct, 'ColorStructure' ) ) {\r\n        alert( 'ColorStructure is valid !' )\r\n    } else {\r\n        alert( validator.errors )\r\n    }\r\n\r\n} catch ( err ) {\r\n    alert( err )\r\n}\r\n *\r\n */\r\n\r\nimport { isArray }   from './arrays/_arrays'\r\nimport { isBoolean } from './booleans/_booleans'\r\nimport {\r\n    isFunction,\r\n    isNotFunction\r\n}                    from './functions/_functions'\r\nimport {\r\n    isFloat,\r\n    isInteger,\r\n    isNumber\r\n}                    from './numbers/_numbers'\r\nimport {\r\n    isNotObject,\r\n    isObject\r\n}                    from './objects/_objects'\r\nimport {\r\n    isNotString,\r\n    isString\r\n}                    from './strings/_strings'\r\nimport { isSymbol }  from './symbols/_symbols'\r\nimport {\r\n    isDefined,\r\n    isNotDefined\r\n}                    from './voids/_voids'\r\n\r\nclass Validator {\r\n\r\n    constructor () {\r\n\r\n        /**\r\n         * The validators store, by default it contains validators for Boolean, Number, Integer, Float, Array, String, Object, Symbol and Function\r\n         *\r\n         * @type {(function|object)}\r\n         */\r\n        this.validators = {\r\n            Boolean:  isBoolean,\r\n            Number:   isNumber,\r\n            Integer:  isInteger,\r\n            Float:    isFloat,\r\n            Array:    isArray,\r\n            String:   isString,\r\n            Object:   isObject,\r\n            Symbol:   isSymbol,\r\n            Function: isFunction\r\n        }\r\n\r\n        /**\r\n         * The list of errors occured during the check\r\n         *\r\n         * @type {Array.<string>}\r\n         */\r\n        this.errors = []\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a new validator schema to the validator instance\r\n     *\r\n     * @param type {string} - A string that represent the type of data to validate\r\n     * @param validator {(function|object)} - A function or validation schema that represent the type of data to validate\r\n     */\r\n    add ( type, validator ) {\r\n\r\n        if ( isNotString( type ) ) { throw new TypeError( `Validator: Expect type to be a string` ) }\r\n        if ( isNotFunction( validator ) && isNotObject( validator ) ) { throw new TypeError( `Validator: Expect validator to be an object or a function` ) }\r\n        if ( isDefined( this.validators[ type ] ) ) { throw new TypeError( `Validator: a validator is already defined for type '${type}'` ) }\r\n\r\n        this.validators[ type ] = validator\r\n\r\n    }\r\n\r\n    /**\r\n     * To remove a registered type\r\n     *\r\n     * @param type {string} - The type to remove\r\n     */\r\n    remove ( type ) {\r\n\r\n        delete this.validators[ type ]\r\n\r\n    }\r\n\r\n    /**\r\n     * Allow to known the available types store in current validator instance\r\n     *\r\n     * @return {Array.<string>} - The list of registered type\r\n     */\r\n    getAvalaibleTypes () {\r\n\r\n        const availablesTypes = []\r\n\r\n        for ( let key in this.validators ) {\r\n            availablesTypes.push( key )\r\n        }\r\n\r\n        return availablesTypes\r\n\r\n    }\r\n\r\n    /**\r\n     * Will perform a deep structural comparison between the given data and the validation schema of the given type\r\n     *\r\n     * @param data {*} - The data to validate\r\n     * @param type {string} - The type of the validation schema to apply\r\n     * @param breakOnError {boolean} - Return on first validation error ( true by default )\r\n     * @return {boolean} - Return true is the data is validated, false otherwise\r\n     */\r\n    check ( data, type, breakOnError = true ) {\r\n\r\n        const validator = this.validators[ type ]\r\n        if ( isNotDefined( validator ) ) {\r\n            throw new TypeError( `Validator: Unable to find schema validation of type '${type}'` )\r\n        }\r\n\r\n        let result = true\r\n        if ( isFunction( validator ) ) {\r\n\r\n            result = validator( data )\r\n\r\n        } else if ( isObject( validator ) ) {\r\n\r\n            let subResult = true\r\n            for ( let key in validator ) {\r\n\r\n                const subValidator = validator[ key ]\r\n                if ( isNotDefined( subValidator ) ) {\r\n                    throw new TypeError( `Validator: Missing validator for key '${key}' of type '${type}'` )\r\n                }\r\n\r\n                const value      = data[ key ]\r\n                const isRequired = subValidator.required\r\n                if ( isNotDefined( value ) ) {\r\n                    if ( isRequired ) {\r\n                        subResult = false\r\n                    } else {\r\n                        continue\r\n                    }\r\n                }\r\n\r\n                // In case of overriden validation function check it first\r\n                let validatorFunction = subValidator.fn\r\n                if ( isDefined( validatorFunction ) ) {\r\n\r\n                    if ( isNotFunction( validatorFunction ) ) {\r\n                        throw new TypeError( `Validator: Invalid validation function for '${key}' with type '${type}'` )\r\n                    }\r\n\r\n                    subResult = validatorFunction( value )\r\n\r\n                } else {\r\n\r\n                    subResult = this.check( value, subValidator.type, breakOnError )\r\n\r\n                }\r\n\r\n                if ( subResult === false ) {\r\n\r\n                    this.errors.push( `Validator: Invalid property '${key}' of type '${subValidator.type}' with value '${value}' in object of type '${type}'` )\r\n                    result = false\r\n                    if ( breakOnError ) {\r\n                        break\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new TypeError( `Validator: Unknown validator of type '${type}'` )\r\n\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The singleton instance\r\n *\r\n * @type {Validator}\r\n */\r\nlet validatorInstance = undefined\r\nif ( isNotDefined( validatorInstance ) ) {\r\n    validatorInstance = new Validator()\r\n}\r\n\r\nexport { validatorInstance as Validator }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isArrayBuffer\r\n * @desc Export function to validate if a value is a array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a array buffer\r\n *\r\n * @param data {*} The data to check against the array buffer type\r\n * @returns {boolean} true if data is a array buffer, false otherwise.\r\n */\r\nexport function isArrayBuffer ( data ) {\r\n    return ( data instanceof ArrayBuffer )\r\n}\r\n\r\n/**\r\n * Check if given data is not a array buffer\r\n *\r\n * @param data {*} The data to check against the array buffer type\r\n * @returns {boolean} true if data is not a array buffer, false otherwise.\r\n */\r\nexport function isNotArrayBuffer ( data ) {\r\n    return !isArrayBuffer( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isBigInt64Array\r\n * @desc Export function to validate if a value is a big int 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a big int 64 array\r\n *\r\n * @param data {*} The data to check against the big int 64 array type\r\n * @returns {boolean} true if data is a big int 64 array, false otherwise.\r\n */\r\nexport function isBigInt64Array ( data ) {\r\n    return ( data instanceof BigInt64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a big int 64 array\r\n *\r\n * @param data {*} The data to check against the big int 64 array type\r\n * @returns {boolean} true if data is not a big int 64 array, false otherwise.\r\n */\r\nexport function isNotBigInt64Array ( data ) {\r\n    return !isBigInt64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isBigUint64Array\r\n * @desc Export function to validate if a value is a big unsigned int 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a big unsigned int 64 array\r\n *\r\n * @param data {*} The data to check against the big unsigned int 64 array type\r\n * @returns {boolean} true if data is a big unsigned int 64 array, false otherwise.\r\n */\r\nexport function isBigUint64Array ( data ) {\r\n    return ( data instanceof BigUint64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a big unsigned int 64 array\r\n *\r\n * @param data {*} The data to check against the big unsigned int 64 array type\r\n * @returns {boolean} true if data is not a big unsigned int 64 array, false otherwise.\r\n */\r\nexport function isNotBigUint64Array ( data ) {\r\n    return !isBigUint64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isFloat32Array\r\n * @desc Export function to validate if a value is a float 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a float 32 array\r\n *\r\n * @param data {*} The data to check against the float 32 array  type\r\n * @returns {boolean} true if data is a float 32 array , false otherwise.\r\n */\r\nexport function isFloat32Array ( data ) {\r\n    return ( data instanceof Float32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a float 32 array\r\n *\r\n * @param data {*} The data to check against the float 32 array  type\r\n * @returns {boolean} true if data is not a float 32 array , false otherwise.\r\n */\r\nexport function isNotFloat32Array ( data ) {\r\n    return !isFloat32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isFloat64Array\r\n * @desc Export function to validate if a value is a float 64 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a float 64 array\r\n *\r\n * @param data {*} The data to check against the float 64 array  type\r\n * @returns {boolean} true if data is a float 64 array , false otherwise.\r\n */\r\nexport function isFloat64Array ( data ) {\r\n    return ( data instanceof Float64Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a float 64 array\r\n *\r\n * @param data {*} The data to check against the float 64 array  type\r\n * @returns {boolean} true if data is not a float 64 array , false otherwise.\r\n */\r\nexport function isNotFloat64Array ( data ) {\r\n    return !isFloat64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt16Array\r\n * @desc Export function to validate if a value is a int 16 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 16 array\r\n *\r\n * @param data {*} The data to check against the int 16 array  type\r\n * @returns {boolean} true if data is a int 16 array , false otherwise.\r\n */\r\nexport function isInt16Array ( data ) {\r\n    return ( data instanceof Int16Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 16 array\r\n *\r\n * @param data {*} The data to check against the int 16 array  type\r\n * @returns {boolean} true if data is not a int 16 array , false otherwise.\r\n */\r\nexport function isNotInt16Array ( data ) {\r\n    return !isInt16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt32Array\r\n * @desc Export function to validate if a value is a int 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 32 array\r\n *\r\n * @param data {*} The data to check against the int 32 array  type\r\n * @returns {boolean} true if data is a int 32 array , false otherwise.\r\n */\r\nexport function isInt32Array ( data ) {\r\n    return ( data instanceof Int32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 32 array\r\n *\r\n * @param data {*} The data to check against the int 32 array  type\r\n * @returns {boolean} true if data is not a int 32 array , false otherwise.\r\n */\r\nexport function isNotInt32Array ( data ) {\r\n    return !isInt32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isInt8Array\r\n * @desc Export function to validate if a value is a int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a int 8 array\r\n *\r\n * @param data {*} The data to check against the int 8 array  type\r\n * @returns {boolean} true if data is a int 8 array , false otherwise.\r\n */\r\nexport function isInt8Array ( data ) {\r\n    return ( data instanceof Int8Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a int 8 array\r\n *\r\n * @param data {*} The data to check against the int 8 array  type\r\n * @returns {boolean} true if data is not a int 8 array , false otherwise.\r\n */\r\nexport function isNotInt8Array ( data ) {\r\n    return !isInt8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint16Array\r\n * @desc Export function to validate if a value is a unsigned int 16 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 16 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 16 array  type\r\n * @returns {boolean} true if data is a unsigned int 16 array , false otherwise.\r\n */\r\nexport function isUint16Array ( data ) {\r\n    return ( data instanceof Uint16Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 16 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 16 array  type\r\n * @returns {boolean} true if data is not a unsigned int 16 array , false otherwise.\r\n */\r\nexport function isNotUint16Array ( data ) {\r\n    return !isUint16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint32Array\r\n * @desc Export function to validate if a value is a unsigned int 32 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 32 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 32 array  type\r\n * @returns {boolean} true if data is a unsigned int 32 array , false otherwise.\r\n */\r\nexport function isUint32Array ( data ) {\r\n    return ( data instanceof Uint32Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 32 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 32 array  type\r\n * @returns {boolean} true if data is not a unsigned int 32 array , false otherwise.\r\n */\r\nexport function isNotUint32Array ( data ) {\r\n    return !isUint32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint8Array\r\n * @desc Export function to validate if a value is a unsigned int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 8 array  type\r\n * @returns {boolean} true if data is a unsigned int 8 array , false otherwise.\r\n */\r\nexport function isUint8Array ( data ) {\r\n    return ( data instanceof Uint8Array )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned int 8 array  type\r\n * @returns {boolean} true if data is not a unsigned int 8 array , false otherwise.\r\n */\r\nexport function isNotUint8Array ( data ) {\r\n    return !isUint8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/cores/typed-arrays/isUint8ClampedArray\r\n * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a unsigned clamped int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned clamped int 8 array  type\r\n * @returns {boolean} true if data is a unsigned clamped int 8 array , false otherwise.\r\n */\r\nexport function isUint8ClampedArray ( data ) {\r\n    return ( data instanceof Uint8ClampedArray )\r\n}\r\n\r\n/**\r\n * Check if given data is not a unsigned clamped int 8 array\r\n *\r\n * @param data {*} The data to check against the unsigned clamped int 8 array  type\r\n * @returns {boolean} true if data is not a unsigned clamped int 8 array , false otherwise.\r\n */\r\nexport function isNotUint8ClampedArray ( data ) {\r\n    return !isUint8ClampedArray( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/block-devices/isBlockDevicePath\r\n * @description Export function to validate if a value is a block device path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a block device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the block device path type\r\n * @returns {boolean} true if path is a block device path, false otherwise\r\n */\r\nexport function isBlockDevicePath ( path ) {\r\n    return fs.statSync( path ).isBlockDevice()\r\n}\r\n\r\n/**\r\n * Check if given path is not a block device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the block device path type\r\n * @returns {boolean} true if path is not a block device path, false otherwise\r\n */\r\nexport function isNotBlockDevicePath ( path ) {\r\n    return !isBlockDevicePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/paths/isValidPath\r\n * @description Export function to validate if a value is a valid path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given data is a valid file path\r\n *\r\n * @param data {*} The data to check against the path type\r\n * @returns {boolean} true if data is a valid path, false otherwise\r\n */\r\nexport function isValidPath ( data ) {\r\n    return fs.existsSync( data )\r\n}\r\n\r\n/**\r\n * Check if given data is not a valid file path\r\n *\r\n * @param data {*} The data to check against the path type\r\n * @returns {boolean} true if data is a valid path, false otherwise\r\n */\r\nexport function isInvalidPath ( data ) {\r\n    return !isValidPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/block-devices/isValidBlockDevicePath\r\n * @description Export function to validate if a value is a valid block device path.\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }       from '../paths/isValidPath'\r\nimport { isBlockDevicePath } from './isBlockDevicePath'\r\n\r\n/**\r\n * Check if given data is a valid block device path\r\n *\r\n * @param data {*} The data to check against the block device path type\r\n * @returns {boolean} true if data is a valid block device path, false otherwise\r\n */\r\nexport function isValidBlockDevicePath ( data ) {\r\n    return ( isValidPath( data ) && isBlockDevicePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid block device path\r\n *\r\n * @param data {*} The data to check against the block device path type\r\n * @returns {boolean} true if data is an invalid block device path, false otherwise\r\n */\r\nexport function isInvalidBlockDevicePath ( data ) {\r\n    return !isValidBlockDevicePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/character-devices/isCharacterDevicePath\r\n * @description Export function to validate if a value is a character device path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a character device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the character device path type\r\n * @returns {boolean} true if path is a character device path, false otherwise\r\n */\r\nexport function isCharacterDevicePath ( path ) {\r\n    return fs.statSync( path ).isCharacterDevice()\r\n}\r\n\r\n/**\r\n * Check if given path is not a character device path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the character device path type\r\n * @returns {boolean} true if path is not a character device path, false otherwise\r\n */\r\nexport function isNotCharacterDevicePath ( path ) {\r\n    return !isCharacterDevicePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/character-devices/isValidCharacterDevicePath\r\n * @description Export function to validate if a value is a valid character device path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }           from '../paths/isValidPath'\r\nimport { isCharacterDevicePath } from './isCharacterDevicePath'\r\n\r\n/**\r\n * Check if given data is a valid character device path\r\n *\r\n * @param data {*} The data to check against the character device path type\r\n * @returns {boolean} true if data is a valid character device path, false otherwise\r\n */\r\nexport function isValidCharacterDevicePath ( data ) {\r\n    return ( isValidPath( data ) && isCharacterDevicePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid character device path\r\n *\r\n * @param data {*} The data to check against the character device path type\r\n * @returns {boolean} true if data is an invalid character device path, false otherwise\r\n */\r\nexport function isInvalidCharacterDevicePath ( data ) {\r\n    return !isValidCharacterDevicePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isDirectoryPath\r\n * @description Export function to validate if a value is a directories path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a directory path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the directory path type\r\n * @returns {boolean} true if path is a directory path, false otherwise\r\n */\r\nexport function isDirectoryPath ( path ) {\r\n    return fs.statSync( path ).isDirectory()\r\n}\r\n\r\n/**\r\n * Check if given path is a not directory path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the directory path type\r\n * @returns {boolean} true if path is a not directory path, false otherwise\r\n */\r\nexport function isNotDirectoryPath ( path ) {\r\n    return !isDirectoryPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isEmptyDirectory\r\n * @description Export function to validate if a value is a empty directories\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given directory path is an empty directory\r\n *\r\n * @param directoryPath {string|Buffer|URL} The directory path to check the emptiness\r\n * @returns {boolean} true if directory is empty, false otherwise\r\n */\r\nexport function isEmptyDirectory ( directoryPath ) {\r\n    return ( fs.readdirSync( directoryPath ).length === 0 )\r\n}\r\n\r\n/**\r\n * Check if given directory path is not an empty directory\r\n *\r\n * @param directoryPath {string|Buffer|URL} The directory path to check the emptiness\r\n * @returns {boolean} true if directory is not empty, false otherwise\r\n */\r\nexport function isNotEmptyDirectory ( directoryPath ) {\r\n    return !isEmptyDirectory( directoryPath )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/directories/isValidDirectoryPath\r\n * @description Export function to validate if a value is a valid directory path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }     from '../paths/isValidPath'\r\nimport { isDirectoryPath } from './isDirectoryPath'\r\n\r\n/**\r\n * Check if given data is a valid directory path\r\n *\r\n * @param data {*} The data to check against the directory path type\r\n * @returns {boolean} true if data is a valid directory path, false otherwise\r\n */\r\nexport function isValidDirectoryPath ( data ) {\r\n    return ( isValidPath( data ) && isDirectoryPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid directory path\r\n *\r\n * @param data {*} The data to check against the directory path type\r\n * @returns {boolean} true if data is an invalid directory path, false otherwise\r\n */\r\nexport function isInvalidDirectoryPath ( data ) {\r\n    return !isValidDirectoryPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/fifo-pipes/isFIFOPath\r\n * @description Export function to validate if a value is a fifo pipes path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a fifo path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the fifo path type\r\n * @returns {boolean} true if path is a fifo path, false otherwise\r\n */\r\nexport function isFIFOPath ( path ) {\r\n    return fs.statSync( path ).isFIFO()\r\n}\r\n\r\n/**\r\n * Check if given path is not a fifo path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the fifo path type\r\n * @returns {boolean} true if path is not a fifo path, false otherwise\r\n */\r\nexport function isNotFIFOPath ( path ) {\r\n    return !isFIFOPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/fifo-pipes/isValidFIFOPath\r\n * @description Export function to validate if a value is a valid fifo pipes path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath } from '../paths/isValidPath'\r\nimport { isFIFOPath }  from './isFIFOPath'\r\n\r\n/**\r\n * Check if given data is a valid fifo path\r\n *\r\n * @param data {*} The data to check against the fifo path type\r\n * @returns {boolean} true if data is a valid fifo path, false otherwise\r\n */\r\nexport function isValidFIFOPath ( data ) {\r\n    return ( isValidPath( data ) && isFIFOPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid fifo path\r\n *\r\n * @param data {*} The data to check against the fifo path type\r\n * @returns {boolean} true if data is an invalid fifo path, false otherwise\r\n */\r\nexport function isInvalidFIFOPath ( data ) {\r\n    return !isValidFIFOPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isEmptyFile\r\n * @description Export function to validate if a value is an empty file\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given file path is an empty file more or less a threshold in bytes.\r\n *\r\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\r\n * @param threshold {number} An amount of byte below which it consider the file as empty ( 0 as default ).\r\n * @returns {boolean} true if file is empty, false otherwise\r\n */\r\nexport function isEmptyFile ( filePath, threshold = 0 ) {\r\n    return ( fs.statSync( filePath ).size <= threshold )\r\n}\r\n\r\n/**\r\n * Check if given file path is not an empty file more or less a threshold in bytes.\r\n *\r\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\r\n * @param threshold {number} An amount of byte above which it consider the file as not empty ( 0 as default ).\r\n * @returns {boolean} true if file is not empty, false otherwise\r\n */\r\nexport function isNotEmptyFile ( filePath, threshold = 0 ) {\r\n    return ( fs.statSync( filePath ).size > threshold )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isFilePath\r\n * @description Export function to validate if a value is a file path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a file path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the file path type\r\n * @returns {boolean} true if path is a file path, false otherwise\r\n */\r\nexport function isFilePath ( path ) {\r\n    return fs.statSync( path ).isFile()\r\n}\r\n\r\n/**\r\n * Check if given path is not a file path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the file path type\r\n * @returns {boolean} true if path is not a file path, false otherwise\r\n */\r\nexport function isNotFilePath ( path ) {\r\n    return !isFilePath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/files/isValidFilePath\r\n * @description Export function to validate if a value is a valid file path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath } from '../paths/isValidPath'\r\nimport { isFilePath }  from './isFilePath'\r\n\r\n/**\r\n * Check if given data is a valid file path\r\n *\r\n * @param data {*} The data to check against the file path type\r\n * @returns {boolean} true if data is a valid file path, false otherwise\r\n */\r\nexport function isValidFilePath ( data ) {\r\n    return ( isValidPath( data ) && isFilePath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid file path\r\n *\r\n * @param data {*} The data to check against the file path type\r\n * @returns {boolean} true if data is an invalid file path, false otherwise\r\n */\r\nexport function isInvalidFilePath ( data ) {\r\n    return !isValidFilePath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/sockets/isSocketPath\r\n * @description Export function to validate if a value is a socket path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a socket path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the socket path type\r\n * @returns {boolean} true if path is a socket path, false otherwise\r\n */\r\nexport function isSocketPath ( path ) {\r\n    return fs.statSync( path ).isSocket()\r\n}\r\n\r\n/**\r\n * Check if given path is not a socket path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the socket path type\r\n * @returns {boolean} true if path is not a socket path, false otherwise\r\n */\r\nexport function isNotSocketPath ( path ) {\r\n    return !isSocketPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/sockets/isValidSocketPath\r\n * @description Export function to validate if a value is a valid socket path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }  from '../paths/isValidPath'\r\nimport { isSocketPath } from './isSocketPath'\r\n\r\n/**\r\n * Check if given data is a valid socket path\r\n *\r\n * @param data {*} The data to check against the socket path type\r\n * @returns {boolean} true if data is a valid socket path, false otherwise\r\n */\r\nexport function isValidSocketPath ( data ) {\r\n    return ( isValidPath( data ) && isSocketPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid socket path\r\n *\r\n * @param data {*} The data to check against the socket path type\r\n * @returns {boolean} true if data is an invalid socket path, false otherwise\r\n */\r\nexport function isInvalidSocketPath ( data ) {\r\n    return !isValidSocketPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/symbolic-links/isSocketPath\r\n * @description Export function to validate if a value is a symbolic links path\r\n *\r\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\r\n *\r\n * @example todo\r\n *\r\n */\r\n\r\nimport fs from 'fs'\r\n\r\n/**\r\n * Check if given path is a symbolic link path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the symbolic link path type\r\n * @returns {boolean} true if path is a symbolic link path, false otherwise\r\n */\r\nexport function isSymbolicLinkPath ( path ) {\r\n    return fs.statSync( path ).isSymbolicLink()\r\n}\r\n\r\n/**\r\n * Check if given path is not a symbolic link path\r\n *\r\n * @param path {string|Buffer|URL} The data to check against the symbolic link path type\r\n * @returns {boolean} true if path is not a symbolic link path, false otherwise\r\n */\r\nexport function isNotSymbolicLinkPath ( path ) {\r\n    return !isSymbolicLinkPath( path )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/file-system/symbolic-links/isSocketPath\r\n * @description Export function to validate if a value is a valid symbolic links path\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isValidPath }        from '../paths/isValidPath'\r\nimport { isSymbolicLinkPath } from './isSymbolicLinkPath'\r\n\r\n/**\r\n * Check if given data is a valid symbolic link path\r\n *\r\n * @param data {*} The data to check against the symbolic link path type\r\n * @returns {boolean} true if data is a valid symbolic link path, false otherwise\r\n */\r\nexport function isValidSymbolicLinkPath ( data ) {\r\n    return ( isValidPath( data ) && isSymbolicLinkPath( data ) )\r\n}\r\n\r\n/**\r\n * Check if given data is an invalid symbolic link path\r\n *\r\n * @param data {*} The data to check against the symbolic link path type\r\n * @returns {boolean} true if data is an invalid symbolic link path, false otherwise\r\n */\r\nexport function isInvalidSymbolicLinkPath ( data ) {\r\n    return !isValidSymbolicLinkPath( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/constants\r\n * @desc Export constants about temperatures\r\n *\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default 0.00000000045\r\n * @desc This value corresponding to the absolute zero kelvin value\r\n */\r\nexport const ABSOLUTE_ZERO_KELVIN = 0.00000000045\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default -273.14999999955\r\n * @desc This value corresponding to the absolute zero celsius value\r\n */\r\nexport const ABSOLUTE_ZERO_CELSIUS = -273.14999999955\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n * @default -459.67\r\n * @desc This value corresponding to the absolute zero fahrenheit value\r\n */\r\nexport const ABSOLUTE_ZERO_FAHRENHEIT = -459.67\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }              from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_CELSIUS } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isCelsius ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_CELSIUS )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotCelsius ( data ) {\r\n    return !isCelsius( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }                 from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_FAHRENHEIT } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isFahrenheit ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_FAHRENHEIT )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotFahrenheit ( data ) {\r\n    return !isFahrenheit( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }             from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_KELVIN } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isKelvin ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_KELVIN )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotKelvin ( data ) {\r\n    return !isKelvin( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module sources/physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isCelsius,\r\n    isNotCelsius\r\n} from './isCelsius'\r\nimport {\r\n    isFahrenheit,\r\n    isNotFahrenheit\r\n} from './isFahrenheit'\r\nimport {\r\n    isKelvin,\r\n    isNotKelvin\r\n} from './isKelvin'\r\n\r\n/**\r\n *\r\n * @param data {*}\r\n * @return {boolean}\r\n */\r\nexport function isTemperature ( data ) {\r\n    return ( isKelvin( data ) || isCelsius( data ) || isFahrenheit( data ) )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data {*}\r\n * @return {boolean}\r\n */\r\nexport function isNotTemperature ( data ) {\r\n    return ( isNotKelvin( data ) && isNotCelsius( data ) && isNotFahrenheit( data ) )\r\n}\r\n"],"names":["isArray","data","Array","isArray_0","isNotArray","isNotArray_0","isEmptyArray","length","isNotEmptyArray","isArrayOfArray","index","dataLength","isNotArrayOfArray","isArrayOfMultiElement","isNull","isNotNull","isArrayOfNull","isNotArrayOfNull","isDefined","isNotDefined","isObject","constructor","Object","isNotObject","isArrayOfObject","isNotArrayOfObject","isArrayOfSingleElement","isString","String","isString_0","val","isString_1","prototype","toString","call","isString_2","isString_3","isString_4","isNotString","isArrayOfString","isArrayOfString_1","arrayLength","isNotArrayOfString","isUndefined","isNotUndefined","isArrayOfUndefined","isNotArrayOfUndefined","isBoolean","isBoolean_alt","valueOf","isNotBoolean","isNotBoolean_negbase","isTrue","isFalse","isFunction","isNotFunction","isZero","isZeroPositive","Number","POSITIVE_INFINITY","isZeroNegative","NEGATIVE_INFINITY","isNumber","isNumber_0","isNaN","isNumber_1","isNumberPositive","isNotNumber","isInfinitePositive","isNumberNegative","isInteger","isInteger_0","isInteger_1","isInteger_2","n","isInteger_3","nVal","isFinite","Math","floor","isFloat","isInfinite","isFloat_1","isFloat_2","x","isInfiniteNegative","isMaxPositive","MAX_VALUE","isMaxNegative","isMinPositive","MIN_VALUE","isMinNegative","isMaxSafeInteger","MAX_SAFE_INTEGER","isMinSafeInteger","MIN_SAFE_INTEGER","isEmptyObject","key","hasOwnProperty","isNotEmptyObject","isEmptyString","isNotEmptyString","isBlankString","test","isNotBlankString","isSymbol","isNotSymbol","isEmpty","isNotEmpty","Validator","[object Object]","this","validators","Boolean","Integer","Float","Symbol","Function","errors","type","validator","TypeError","availablesTypes","push","breakOnError","result","subResult","subValidator","value","isRequired","required","validatorFunction","fn","check","isArrayBuffer","ArrayBuffer","isNotArrayBuffer","isBigInt64Array","BigInt64Array","isNotBigInt64Array","isBigUint64Array","BigUint64Array","isNotBigUint64Array","isFloat32Array","Float32Array","isNotFloat32Array","isFloat64Array","Float64Array","isNotFloat64Array","isInt16Array","Int16Array","isNotInt16Array","isInt32Array","Int32Array","isNotInt32Array","isInt8Array","Int8Array","isNotInt8Array","isUint16Array","Uint16Array","isNotUint16Array","isUint32Array","Uint32Array","isNotUint32Array","isUint8Array","Uint8Array","isNotUint8Array","isUint8ClampedArray","Uint8ClampedArray","isNotUint8ClampedArray","isBlockDevicePath","path","fs","statSync","isBlockDevice","isNotBlockDevicePath","isValidPath","existsSync","isInvalidPath","isValidBlockDevicePath","isInvalidBlockDevicePath","isCharacterDevicePath","isCharacterDevice","isNotCharacterDevicePath","isValidCharacterDevicePath","isInvalidCharacterDevicePath","isDirectoryPath","isDirectory","isNotDirectoryPath","isEmptyDirectory","directoryPath","readdirSync","isNotEmptyDirectory","isValidDirectoryPath","isInvalidDirectoryPath","isFIFOPath","isFIFO","isNotFIFOPath","isValidFIFOPath","isInvalidFIFOPath","isEmptyFile","filePath","threshold","size","isNotEmptyFile","isFilePath","isFile","isNotFilePath","isValidFilePath","isInvalidFilePath","isSocketPath","isSocket","isNotSocketPath","isValidSocketPath","isInvalidSocketPath","isSymbolicLinkPath","isSymbolicLink","isNotSymbolicLinkPath","isValidSymbolicLinkPath","isInvalidSymbolicLinkPath","exports","undefined","validatorInstance","ABSOLUTE_ZERO_KELVIN","ABSOLUTE_ZERO_CELSIUS","ABSOLUTE_ZERO_FAHRENHEIT","isCelsius","isNotCelsius","isFahrenheit","isNotFahrenheit","isKelvin","isNotKelvin","isTemperature","isNotTemperature"],"mappings":"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"}