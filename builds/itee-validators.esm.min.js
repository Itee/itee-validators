/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArray
 * @desc Export functions to validate if a value is an array or not
 * @example {@lang javascript}
 *
 * import { isArray } from 'itee-validators'
 *
 * if( isArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function n(n){return Array.isArray(n)}function r(n){return!Array.isArray(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isEmptyArray
 * @desc Export function to validate if a value is an array of null length or not
 * @example
 *
 * import { isEmptyArray } from 'itee-validators'
 *
 * if( isEmptyArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function t(n){return!r(n)&&0===n.length}function e(n){return!!r(n)||n.length>0}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfArray
 * @desc Export function to validate if a value is an array of array or not
 * @example
 *
 * import { isArrayOfArray } from 'itee-validators'
 *
 * if( isArrayOfArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function u(n){if(r(n))return!1;if(t(n))return!1;for(let t=0,e=n.length;t<e;t++)if(r(n[t]))return!1;return!0}function i(e){if(r(e))return!0;if(t(e))return!0;for(let r=0,t=e.length;r<t;r++)if(n(e[r]))return!1;return!0}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isBoolean
 * @desc Export function to validate if a value is a boolean or not
 * @example
 *
 * import { isBoolean } from 'itee-validators'
 *
 * if( isBoolean( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function o(n){return"boolean"==typeof n}function f(n){return"boolean"!=typeof n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of booleans or not
 * @example
 *
 * import { isArrayOfBoolean } from 'itee-validators'
 *
 * if( isArrayOfBoolean( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function c(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(f(n[r]))return!1;return!0}function a(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(f(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/functions/isFunction
 * @desc Export function to validate if a value is a function or not
 * @example
 *
 * import { isFunction } from 'itee-validators'
 *
 * if( isFunction( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function l(n){return"function"==typeof n}function s(n){return"function"!=typeof n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of functions or not
 * @example
 *
 * import { isArrayOfFunction } from 'itee-validators'
 *
 * if( isArrayOfFunction( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function y(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(s(n[r]))return!1;return!0}function h(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(s(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfMultiElement
 * @desc Export function to validate if a value is an array with more than one value
 * @example
 *
 * import { isArrayOfMultiElement } from 'itee-validators'
 *
 * if( isArrayOfMultiElement( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function N(n){return!r(n)&&n.length>1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isNull
 * @desc Export function to validate if a value is null or not
 * @example
 *
 * import { isNull } from 'itee-validators'
 *
 * if( isNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function p(n){return null===n}function d(n){return null!==n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfNull
 * @desc Export function to validate if a value is an array of null values or not
 * @example
 *
 * import { isArrayOfNull } from 'itee-validators'
 *
 * if( isArrayOfNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * } *
 */function b(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(d(n[r]))return!1;return!0}function g(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(d(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isDefined
 * @desc Export function to validate if a value is a defined or not
 * @example
 *
 * import { isDefined } from 'itee-validators'
 *
 * if( isDefined( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function I(n){return null!=n}function A(n){return null==n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isInfinite
 * @desc Export function to validate if a value is a finite or infinite number
 * @example
 *
 * import { isInfinite } from 'itee-validators'
 *
 * if( isInfinite( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function E(n){return!S(n)&&(!Number.isNaN(n)&&!Number.isFinite(n))}function m(n){return n===Number.NEGATIVE_INFINITY}function v(n){return n===Number.POSITIVE_INFINITY}function w(n){return Number.isFinite(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isZero
 * @desc Export function to validate if a value is zero, with a special sign
 * @example
 *
 * import { isZero } from 'itee-validators'
 *
 * if( isZero( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function T(n){return 0===n}function V(n){return 0===n&&1/n===Number.POSITIVE_INFINITY}function F(n){return 0===n&&1/n===Number.NEGATIVE_INFINITY}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isNumber
 * @desc Export function to validate if a value is a number, or with special sign
 * @example
 *
 * import { isNumber } from 'itee-validators'
 *
 * if( isNumber( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function _(n){return!A(n)&&n.constructor===Number}function U(n){return!S(n)&&(n>0||V(n)||v(n))}function $(n){return _(n)&&n<0}function S(n){return!_(n)}function M(n){return Number.isInteger(n)}function O(n){return!S(n)&&(!Number.isNaN(n)&&(!E(n)&&n%1!=0))}function j(n){return Number.isNaN(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfBoolean
 * @desc Export function to validate if a value is an array of numbers or not
 * @example
 *
 * import { isArrayOfNumber } from 'itee-validators'
 *
 * if( isArrayOfNumber( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function k(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(S(n[r]))return!1;return!0}function B(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(S(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isObject
 * @desc Export function to validate if a value is an object
 * @example
 *
 * import { isObject } from 'itee-validators'
 *
 * if( isObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function G(n){return!A(n)&&n.constructor===Object}function L(n){return!G(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfObject
 * @desc Export function to validate if a value is an array of objects or not
 * @example
 *
 * import { isArrayOfObject } from 'itee-validators'
 *
 * if( isArrayOfObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Y(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(L(n[r]))return!1;return!0}function x(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(L(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfSingleElement
 * @desc Export function to validate if a value is an array of single value or not
 * @example
 *
 * import { isArrayOfSingleElement } from 'itee-validators'
 *
 * if( isArrayOfSingleElement( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function P(n){return!r(n)&&1===n.length}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isString
 * @desc Export function to validate if a value is a string
 * @example
 *
 * import { isString } from 'itee-validators'
 *
 * if( isString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function X(n){return"string"==typeof n||n instanceof String}function R(n){return!X(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfString
 * @desc Export function to validate if a value is an array of string or not
 * @example
 *
 * import { isArrayOfString } from 'itee-validators'
 *
 * if( isArrayOfString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function q(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(R(n[r]))return!1;return!0}function C(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(R(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isUndefined
 * @desc Export function to validate if a value is a void
 * @example
 *
 * import { isNull } from 'itee-validators'
 *
 * if( isNull( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function z(n){return void 0===n}function D(n){return void 0!==n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/arrays/isArrayOfUndefined
 * @desc Export function to validate if a value is an array of undefined values or not
 * @example
 *
 * import { isArrayOfUndefined } from 'itee-validators'
 *
 * if( isArrayOfUndefined( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function H(n){if(r(n))return!1;if(t(n))return!1;for(let r=0,t=n.length;r<t;r++)if(D(n[r]))return!1;return!0}function J(n){if(r(n))return!0;if(t(n))return!0;for(let r=0,t=n.length;r<t;r++)if(D(n[r]))return!0;return!1}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/booleans/isTrue
 * @desc Export function to validate if a value is a boolean set to true or false
 * @example
 *
 * import { isTrue } from 'itee-validators'
 *
 * if( isTrue( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function K(n){return o(n)&&!0===n}function Q(n){return o(n)&&!1===n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMax
 * @desc Export function to validate if a value is a maximum javascript number
 * @example
 *
 * import { isMaxPositive } from 'itee-validators'
 *
 * if( isMaxPositive( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function W(n){return n===Number.MAX_VALUE}function Z(n){return n===-Number.MAX_VALUE}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isMin
 * @desc Export function to validate if a value is a minimum javascript number
 * @example
 *
 * import { isMaxPositive } from 'itee-validators'
 *
 * if( isMaxPositive( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function nn(n){return n===Number.MIN_VALUE}function rn(n){return n===-Number.MIN_VALUE}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/numbers/isSafeInteger
 * @desc Export function to validate if a value is a safe integer number
 * @example
 *
 * import { isMaxSafeInteger } from 'itee-validators'
 *
 * if( isMaxSafeInteger( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function tn(n){return n===Number.MAX_SAFE_INTEGER}function en(n){return n===Number.MIN_SAFE_INTEGER}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/objects/isEmptyObject
 * @desc Export function to validate if a value is an empty object
 * @example
 *
 * import { isEmptyObject } from 'itee-validators'
 *
 * if( isEmptyObject( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function un(n){if(L(n))return!1;if(0===n.length)return!0;for(let r in n)if(Object.prototype.hasOwnProperty.call(n,r))return!1;return!0}function on(n){return!un(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isEmptyString
 * @desc Export function to validate if a value is a empty string
 * @example
 *
 * import { isEmptyString } from 'itee-validators'
 *
 * if( isEmptyString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function fn(n){return!R(n)&&0===n.length}function cn(n){return!fn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isBlankString
 * @desc Export function to validate if a value is a blank string
 * @example
 *
 * import { isBlankString } from 'itee-validators'
 *
 * if( isBlankString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function an(n){return!R(n)&&(!fn(n)&&!/\S/.test(n))}function ln(n){return!an(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/symbols/isSymbol
 * @desc Export function to validate if a value is a symbol
 * @example
 *
 * import { isSymbol } from 'itee-validators'
 *
 * if( isSymbol( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function sn(n){return"symbol"==typeof n}function yn(n){return"symbol"!=typeof n}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isEmpty
 * @desc Export function to validate if a value could be considered as empty
 * @example
 *
 * import { isEmpty } from 'itee-validators'
 *
 * if( isEmpty( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function hn(n){return!A(n)&&(!!fn(n)||(!!t(n)||!!un(n)))}function Nn(n){return!hn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/cores
 * @description Export the Validator singleton instance that allow to validate complex data structure
 * @example
 *
 const validator = Itee.Validators.Validator

 // Using unique function for One registered type
 // Usefull when a simple data structure is used multiple times
 validator.add( 'ColorType', color => {

                const r = color.r
                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
                    return false
                }

                const g = color.g
                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
                    return false
                }

                const b = color.b
                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
                    return false
                }

                return true
            } )

 // Using schema composition
 // Usefull for design validation schema faster and based on previous declared validation types
 validator.add( 'Range_0_255', ( value ) => {

                if ( Itee.Validators.isNotNumber( value ) ) {
                    return false
                }

                return !(value <= 0 || value > 255)

            } )

 validator.add( 'ColorSchema', {
                r: {
                    required: true,
                    type:     'Range_0_255'
                },
                g: {
                    required: true,
                    type:     'Range_0_255'
                },
                b: {
                    required: true,
                    type:     'Range_0_255'
                }
            } )

 validator.add( 'ColorStructure', {
                color_from_type: {
                    type: 'ColorType'
                },
                col_from_schema: {
                    type: 'ColorSchema'
                },
                col_from_fn:     {
                    // Inner function
	                // Usefull for specific validation requirement that cannot match other previous validation schema or type
                    fn: function ColorValidator ( color ) {

                        const r = color.r
                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
                            return false
                        }

                        const g = color.g
                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
                            return false
                        }

                        const b = color.b
                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
                            return false
                        }

                        return true
                    }
                }
            } )

 // The data to validate
 const colorStruct = {
                color_from_type: {
                    r: 0,
                    g: 1,
                    b: 2
                },
                col_from_schema: {
                    r: 10,
                    g: 20,
                    b: 30
                },
                col_from_fn:     {
                    r: 0,
                    g: 127,
                    b: 255
                }
            }

 // Execute

 try {

    if ( validator.check( colorStruct, 'ColorStructure' ) ) {
        alert( 'ColorStructure is valid !' )
    } else {
        alert( validator.errors )
    }

} catch ( err ) {
    alert( err )
}
 *
 */class pn{constructor(){this.validators={Boolean:o,Number:_,Integer:M,Float:O,Array:n,String:X,Object:G,Symbol:sn,Function:l},this.errors=[]}add(n,r){if(R(n))throw new TypeError("Validator: Expect type to be a string");if(s(r)&&L(r))throw new TypeError("Validator: Expect validator to be an object or a function");if(I(this.validators[n]))throw new TypeError(`Validator: a validator is already defined for type '${n}'`);this.validators[n]=r}remove(n){delete this.validators[n]}getAvalaibleTypes(){const n=[];for(let r in this.validators)n.push(r);return n}check(n,r,t=!0){const e=this.validators[r];if(A(e))throw new TypeError(`Validator: Unable to find schema validation of type '${r}'`);let u=!0;if(l(e))u=e(n);else{if(!G(e))throw new TypeError(`Validator: Unknown validator of type '${r}'`);{let i=!0;for(let o in e){const f=e[o];if(A(f))throw new TypeError(`Validator: Missing validator for key '${o}' of type '${r}'`);const c=n[o],a=f.required;if(A(c)){if(!a)continue;i=!1}let l=f.fn;if(I(l)){if(s(l))throw new TypeError(`Validator: Invalid validation function for '${o}' with type '${r}'`);i=l(c)}else i=this.check(c,f.type,t);if(!1===i&&(this.errors.push(`Validator: Invalid property '${o}' of type '${f.type}' with value '${c}' in object of type '${r}'`),u=!1,t))break}}}return u}}let dn;
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isArrayBuffer
 * @desc Export function to validate if a value is a array buffer
 * @example
 *
 * import { isArrayBuffer } from 'itee-validators'
 *
 * if( isArrayBuffer( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function bn(n){return n instanceof ArrayBuffer}function gn(n){return!bn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigInt64Array
 * @desc Export function to validate if a value is a big int 64 array buffer
 * @example
 *
 * import { isBigInt64Array } from 'itee-validators'
 *
 * if( isBigInt64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function In(n){return n instanceof BigInt64Array}function An(n){return!In(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isBigUint64Array
 * @desc Export function to validate if a value is a big unsigned int 64 array buffer
 * @example
 *
 * import { isBigUint64Array } from 'itee-validators'
 *
 * if( isBigUint64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function En(n){return n instanceof BigUint64Array}function mn(n){return!En(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat32Array
 * @desc Export function to validate if a value is a float 32 array buffer
 * @example
 *
 * import { isFloat32Array } from 'itee-validators'
 *
 * if( isFloat32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function vn(n){return n instanceof Float32Array}function wn(n){return!vn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isFloat64Array
 * @desc Export function to validate if a value is a float 64 array buffer
 * @example
 *
 * import { isFloat64Array } from 'itee-validators'
 *
 * if( isFloat64Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Tn(n){return n instanceof Float64Array}function Vn(n){return!Tn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt16Array
 * @desc Export function to validate if a value is a int 16 array buffer
 * @example
 *
 * import { isInt16Array } from 'itee-validators'
 *
 * if( isInt16Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Fn(n){return n instanceof Int16Array}function _n(n){return!Fn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt32Array
 * @desc Export function to validate if a value is a int 32 array buffer
 * @example
 *
 * import { isInt32Array } from 'itee-validators'
 *
 * if( isInt32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Un(n){return n instanceof Int32Array}function $n(n){return!Un(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isInt8Array
 * @desc Export function to validate if a value is a int 8 array buffer
 * @example
 *
 * import { isInt8Array } from 'itee-validators'
 *
 * if( isInt8Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Sn(n){return n instanceof Int8Array}function Mn(n){return!Sn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint16Array
 * @desc Export function to validate if a value is a unsigned int 16 array buffer
 * @example
 *
 * import { isUint16Array } from 'itee-validators'
 *
 * if( isUint16Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function On(n){return n instanceof Uint16Array}function jn(n){return!On(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint32Array
 * @desc Export function to validate if a value is a unsigned int 32 array buffer
 * @example
 *
 * import { isUint32Array } from 'itee-validators'
 *
 * if( isUint32Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function kn(n){return n instanceof Uint32Array}function Bn(n){return!kn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8Array
 * @desc Export function to validate if a value is a unsigned int 8 array buffer
 * @example
 *
 * import { isUint8Array } from 'itee-validators'
 *
 * if( isUint8Array( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Gn(n){return n instanceof Uint8Array}function Ln(n){return!Gn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/typed-arrays/isUint8ClampedArray
 * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer
 * @example
 *
 * import { isUint8ClampedArray } from 'itee-validators'
 *
 * if( isUint8ClampedArray( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Yn(n){return n instanceof Uint8ClampedArray}function xn(n){return!Yn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/constants
 * @desc Export constants about temperatures
 *
 */A(dn)&&(dn=new pn);const Pn=4.5e-10,Xn=-273.14999999955,Rn=-459.67;
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a Celsius temperature
 * @example
 *
 * import { isCelsius } from 'itee-validators'
 *
 * if( isCelsius( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function qn(n){return _(n)&&n>=-273.14999999955}function Cn(n){return!qn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a Fahrenheit temperature
 * @example
 *
 * import { isFahrenheit } from 'itee-validators'
 *
 * if( isFahrenheit( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function zn(n){return _(n)&&n>=-459.67}function Dn(n){return!zn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a kelvin temperature
 * @example
 *
 * import { isKelvin } from 'itee-validators'
 *
 * if( isKelvin( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Hn(n){return _(n)&&n>=4.5e-10}function Jn(n){return!Hn(n)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/physics/temperatures
 * @desc Export function to validate if a value is a temperature
 * @example
 *
 * import { isTemperature } from 'itee-validators'
 *
 * if( isTemperature( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function Kn(n){return Hn(n)||qn(n)||zn(n)}function Qn(n){return Jn(n)&&Cn(n)&&Dn(n)}export{Xn as ABSOLUTE_ZERO_CELSIUS,Rn as ABSOLUTE_ZERO_FAHRENHEIT,Pn as ABSOLUTE_ZERO_KELVIN,dn as Validator,n as isArray,bn as isArrayBuffer,u as isArrayOfArray,c as isArrayOfBoolean,y as isArrayOfFunction,N as isArrayOfMultiElement,b as isArrayOfNull,k as isArrayOfNumber,Y as isArrayOfObject,P as isArrayOfSingleElement,q as isArrayOfString,H as isArrayOfUndefined,In as isBigInt64Array,En as isBigUint64Array,an as isBlankString,o as isBoolean,qn as isCelsius,I as isDefined,hn as isEmpty,t as isEmptyArray,un as isEmptyObject,fn as isEmptyString,zn as isFahrenheit,Q as isFalse,w as isFinite,O as isFloat,vn as isFloat32Array,Tn as isFloat64Array,l as isFunction,E as isInfinite,m as isInfiniteNegative,v as isInfinitePositive,Fn as isInt16Array,Un as isInt32Array,Sn as isInt8Array,M as isInteger,Hn as isKelvin,Z as isMaxNegative,W as isMaxPositive,tn as isMaxSafeInteger,rn as isMinNegative,nn as isMinPositive,en as isMinSafeInteger,j as isNaN,r as isNotArray,gn as isNotArrayBuffer,i as isNotArrayOfArray,a as isNotArrayOfBoolean,h as isNotArrayOfFunction,g as isNotArrayOfNull,B as isNotArrayOfNumber,x as isNotArrayOfObject,C as isNotArrayOfString,J as isNotArrayOfUndefined,An as isNotBigInt64Array,mn as isNotBigUint64Array,ln as isNotBlankString,f as isNotBoolean,Cn as isNotCelsius,A as isNotDefined,Nn as isNotEmpty,e as isNotEmptyArray,on as isNotEmptyObject,cn as isNotEmptyString,Dn as isNotFahrenheit,wn as isNotFloat32Array,Vn as isNotFloat64Array,s as isNotFunction,_n as isNotInt16Array,$n as isNotInt32Array,Mn as isNotInt8Array,Jn as isNotKelvin,d as isNotNull,S as isNotNumber,L as isNotObject,R as isNotString,yn as isNotSymbol,Qn as isNotTemperature,jn as isNotUint16Array,Bn as isNotUint32Array,Ln as isNotUint8Array,xn as isNotUint8ClampedArray,D as isNotUndefined,p as isNull,_ as isNumber,$ as isNumberNegative,U as isNumberPositive,G as isObject,X as isString,sn as isSymbol,Kn as isTemperature,K as isTrue,On as isUint16Array,kn as isUint32Array,Gn as isUint8Array,Yn as isUint8ClampedArray,z as isUndefined,T as isZero,F as isZeroNegative,V as isZeroPositive};
