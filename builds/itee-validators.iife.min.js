!function(r){"use strict";
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArray
	 * @desc Export functions to validate if a value is an array or not
	 * @example {@lang javascript}
	 *
	 * import { isArray } from 'itee-validators'
	 *
	 * if( isArray( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function n(r){return Array.isArray(r)}function t(r){return!Array.isArray(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isEmptyArray
	 * @desc Export function to validate if a value is an array of null length or not
	 * @example
	 *
	 * import { isEmptyArray } from 'itee-validators'
	 *
	 * if( isEmptyArray( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function i(r){return!t(r)&&0===r.length}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/booleans/isBoolean
	 * @desc Export function to validate if a value is a boolean or not
	 * @example
	 *
	 * import { isBoolean } from 'itee-validators'
	 *
	 * if( isBoolean( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function e(r){return"boolean"==typeof r}function u(r){return"boolean"!=typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfBoolean
	 * @desc Export function to validate if a value is an array of booleans or not
	 * @example
	 *
	 * import { isArrayOfBoolean } from 'itee-validators'
	 *
	 * if( isArrayOfBoolean( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/functions/isFunction
	 * @desc Export function to validate if a value is a function or not
	 * @example
	 *
	 * import { isFunction } from 'itee-validators'
	 *
	 * if( isFunction( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function o(r){return"function"==typeof r}function f(r){return"function"!=typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfBoolean
	 * @desc Export function to validate if a value is an array of functions or not
	 * @example
	 *
	 * import { isArrayOfFunction } from 'itee-validators'
	 *
	 * if( isArrayOfFunction( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function a(r){return null!==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfNull
	 * @desc Export function to validate if a value is an array of null values or not
	 * @example
	 *
	 * import { isArrayOfNull } from 'itee-validators'
	 *
	 * if( isArrayOfNull( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * } *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isDefined
	 * @desc Export function to validate if a value is a defined or not
	 * @example
	 *
	 * import { isDefined } from 'itee-validators'
	 *
	 * if( isDefined( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function s(r){return null!=r}function c(r){return null==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isInfinite
	 * @desc Export function to validate if a value is a finite or infinite number
	 * @example
	 *
	 * import { isInfinite } from 'itee-validators'
	 *
	 * if( isInfinite( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function l(r){return r===Number.NEGATIVE_INFINITY}function y(r){return r===Number.POSITIVE_INFINITY}function N(r){return l(r)||y(r)}function A(r){return 0===r&&1/r===Number.POSITIVE_INFINITY}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isNumber
	 * @desc Export function to validate if a value is a number, or with special sign
	 * @example
	 *
	 * import { isNumber } from 'itee-validators'
	 *
	 * if( isNumber( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function g(r){return!c(r)&&r.constructor===Number}function d(r){return!g(r)}function h(r){return Number.isInteger(r)}function p(r){return!d(r)&&(!Number.isNaN(r)&&(!N(r)&&r%1!=0))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/objects/isObject
	 * @desc Export function to validate if a value is an object
	 * @example
	 *
	 * import { isObject } from 'itee-validators'
	 *
	 * if( isObject( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function I(r){return!c(r)&&r.constructor===Object}function b(r){return!I(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfObject
	 * @desc Export function to validate if a value is an array of objects or not
	 * @example
	 *
	 * import { isArrayOfObject } from 'itee-validators'
	 *
	 * if( isArrayOfObject( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isString
	 * @desc Export function to validate if a value is a string
	 * @example
	 *
	 * import { isString } from 'itee-validators'
	 *
	 * if( isString( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function E(r){return"string"==typeof r||r instanceof String}function m(r){return!E(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfString
	 * @desc Export function to validate if a value is an array of string or not
	 * @example
	 *
	 * import { isArrayOfString } from 'itee-validators'
	 *
	 * if( isArrayOfString( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function O(r){return void 0!==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfUndefined
	 * @desc Export function to validate if a value is an array of undefined values or not
	 * @example
	 *
	 * import { isArrayOfUndefined } from 'itee-validators'
	 *
	 * if( isArrayOfUndefined( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/objects/isEmptyObject
	 * @desc Export function to validate if a value is an empty object
	 * @example
	 *
	 * import { isEmptyObject } from 'itee-validators'
	 *
	 * if( isEmptyObject( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function v(r){if(b(r))return!1;if(0===r.length)return!0;for(let n in r)if(Object.prototype.hasOwnProperty.call(r,n))return!1;return!0}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isEmptyString
	 * @desc Export function to validate if a value is a empty string
	 * @example
	 *
	 * import { isEmptyString } from 'itee-validators'
	 *
	 * if( isEmptyString( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function U(r){return!m(r)&&0===r.length}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isBlankString
	 * @desc Export function to validate if a value is a blank string
	 * @example
	 *
	 * import { isBlankString } from 'itee-validators'
	 *
	 * if( isBlankString( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function S(r){return!m(r)&&(!U(r)&&!/\S/.test(r))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/symbols/isSymbol
	 * @desc Export function to validate if a value is a symbol
	 * @example
	 *
	 * import { isSymbol } from 'itee-validators'
	 *
	 * if( isSymbol( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function F(r){return"symbol"==typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isEmpty
	 * @desc Export function to validate if a value could be considered as empty
	 * @example
	 *
	 * import { isEmpty } from 'itee-validators'
	 *
	 * if( isEmpty( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function T(r){return!c(r)&&(!!U(r)||(!!i(r)||!!v(r)))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/cores
	 * @description Export the Validator singleton instance that allow to validate complex data structure
	 * @example
	 *
	 const validator = Itee.Validators.Validator

	 // Using unique function for One registered type
	 // Usefull when a simple data structure is used multiple times
	 validator.add( 'ColorType', color => {

	 const r = color.r
	 if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
	 return false
	 }

	 const g = color.g
	 if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
	 return false
	 }

	 const b = color.b
	 if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
	 return false
	 }

	 return true
	 } )

	 // Using schema composition
	 // Usefull for design validation schema faster and based on previous declared validation types
	 validator.add( 'Range_0_255', ( value ) => {

	 if ( Itee.Validators.isNotNumber( value ) ) {
	 return false
	 }

	 return !(value <= 0 || value > 255)

	 } )

	 validator.add( 'ColorSchema', {
	 r: {
	 required: true,
	 type:     'Range_0_255'
	 },
	 g: {
	 required: true,
	 type:     'Range_0_255'
	 },
	 b: {
	 required: true,
	 type:     'Range_0_255'
	 }
	 } )

	 validator.add( 'ColorStructure', {
	 color_from_type: {
	 type: 'ColorType'
	 },
	 col_from_schema: {
	 type: 'ColorSchema'
	 },
	 col_from_fn:     {
	 // Inner function
	 // Usefull for specific validation requirement that cannot match other previous validation schema or type
	 fn: function ColorValidator ( color ) {

	 const r = color.r
	 if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
	 return false
	 }

	 const g = color.g
	 if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
	 return false
	 }

	 const b = color.b
	 if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
	 return false
	 }

	 return true
	 }
	 }
	 } )

	 // The data to validate
	 const colorStruct = {
	 color_from_type: {
	 r: 0,
	 g: 1,
	 b: 2
	 },
	 col_from_schema: {
	 r: 10,
	 g: 20,
	 b: 30
	 },
	 col_from_fn:     {
	 r: 0,
	 g: 127,
	 b: 255
	 }
	 }

	 // Execute

	 try {

	 if ( validator.check( colorStruct, 'ColorStructure' ) ) {
	 alert( 'ColorStructure is valid !' )
	 } else {
	 alert( validator.errors )
	 }

	 } catch ( err ) {
	 alert( err )
	 }
	 *
	 */
class V{constructor(){this.validators={Boolean:e,Number:g,Integer:h,Float:p,Array:n,String:E,Object:I,Symbol:F,Function:o},this.errors=[]}add(r,n){if(m(r))throw new TypeError("Validator: Expect type to be a string");if(f(n)&&b(n))throw new TypeError("Validator: Expect validator to be an object or a function");if(s(this.validators[r]))throw new TypeError(`Validator: a validator is already defined for type '${r}'`);this.validators[r]=n}remove(r){delete this.validators[r]}getAvalaibleTypes(){const r=[];for(let n in this.validators)r.push(n);return r}check(r,n,t=!0){const i=this.validators[n];if(c(i))throw new TypeError(`Validator: Unable to find schema validation of type '${n}'`);let e=!0;if(o(i))e=i(r);else{if(!I(i))throw new TypeError(`Validator: Unknown validator of type '${n}'`);{let u=!0;for(let o in i){const a=i[o];if(c(a))throw new TypeError(`Validator: Missing validator for key '${o}' of type '${n}'`);const l=r[o],y=a.required;if(c(l)){if(!y)continue;u=!1}let N=a.fn;if(s(N)){if(f(N))throw new TypeError(`Validator: Invalid validation function for '${o}' with type '${n}'`);u=N(l)}else u=this.check(l,a.type,t);if(!1===u&&(this.errors.push(`Validator: Invalid property '${o}' of type '${a.type}' with value '${l}' in object of type '${n}'`),e=!1,t))break}}}return e}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isArrayBuffer
	 * @desc Export function to validate if a value is a array buffer
	 * @example
	 *
	 * import { isArrayBuffer } from 'itee-validators'
	 *
	 * if( isArrayBuffer( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function _(r){return r instanceof ArrayBuffer}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isBigInt64Array
	 * @desc Export function to validate if a value is a big int 64 array buffer
	 * @example
	 *
	 * import { isBigInt64Array } from 'itee-validators'
	 *
	 * if( isBigInt64Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function w(r){return r instanceof BigInt64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isBigUint64Array
	 * @desc Export function to validate if a value is a big unsigned int 64 array buffer
	 * @example
	 *
	 * import { isBigUint64Array } from 'itee-validators'
	 *
	 * if( isBigUint64Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function B(r){return r instanceof BigUint64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isFloat32Array
	 * @desc Export function to validate if a value is a float 32 array buffer
	 * @example
	 *
	 * import { isFloat32Array } from 'itee-validators'
	 *
	 * if( isFloat32Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function M(r){return r instanceof Float32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isFloat64Array
	 * @desc Export function to validate if a value is a float 64 array buffer
	 * @example
	 *
	 * import { isFloat64Array } from 'itee-validators'
	 *
	 * if( isFloat64Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function j(r){return r instanceof Float64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt16Array
	 * @desc Export function to validate if a value is a int 16 array buffer
	 * @example
	 *
	 * import { isInt16Array } from 'itee-validators'
	 *
	 * if( isInt16Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function $(r){return r instanceof Int16Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt32Array
	 * @desc Export function to validate if a value is a int 32 array buffer
	 * @example
	 *
	 * import { isInt32Array } from 'itee-validators'
	 *
	 * if( isInt32Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function L(r){return r instanceof Int32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt8Array
	 * @desc Export function to validate if a value is a int 8 array buffer
	 * @example
	 *
	 * import { isInt8Array } from 'itee-validators'
	 *
	 * if( isInt8Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function P(r){return r instanceof Int8Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint16Array
	 * @desc Export function to validate if a value is a unsigned int 16 array buffer
	 * @example
	 *
	 * import { isUint16Array } from 'itee-validators'
	 *
	 * if( isUint16Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function k(r){return r instanceof Uint16Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint32Array
	 * @desc Export function to validate if a value is a unsigned int 32 array buffer
	 * @example
	 *
	 * import { isUint32Array } from 'itee-validators'
	 *
	 * if( isUint32Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function C(r){return r instanceof Uint32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint8Array
	 * @desc Export function to validate if a value is a unsigned int 8 array buffer
	 * @example
	 *
	 * import { isUint8Array } from 'itee-validators'
	 *
	 * if( isUint8Array( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function R(r){return r instanceof Uint8Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint8ClampedArray
	 * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer
	 * @example
	 *
	 * import { isUint8ClampedArray } from 'itee-validators'
	 *
	 * if( isUint8ClampedArray( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function Z(r){return r instanceof Uint8ClampedArray}r.Validator=void 0,c(r.Validator)&&(r.Validator=new V);
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/constants
	 * @desc Export constants about temperatures
	 *
	 */
const x=4.5e-10,G=-273.14999999955,Y=-459.67;
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatures
	 * @desc Export function to validate if a value is a Celsius temperature
	 * @example
	 *
	 * import { isCelsius } from 'itee-validators'
	 *
	 * if( isCelsius( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function K(r){return g(r)&&r>=G}function X(r){return!K(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatures
	 * @desc Export function to validate if a value is a Fahrenheit temperature
	 * @example
	 *
	 * import { isFahrenheit } from 'itee-validators'
	 *
	 * if( isFahrenheit( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function D(r){return g(r)&&r>=Y}function H(r){return!D(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatures
	 * @desc Export function to validate if a value is a kelvin temperature
	 * @example
	 *
	 * import { isKelvin } from 'itee-validators'
	 *
	 * if( isKelvin( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function q(r){return g(r)&&r>=x}function z(r){return!q(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatures
	 * @desc Export function to validate if a value is a temperature
	 * @example
	 *
	 * import { isTemperature } from 'itee-validators'
	 *
	 * if( isTemperature( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */r.ABSOLUTE_ZERO_CELSIUS=G,r.ABSOLUTE_ZERO_FAHRENHEIT=Y,r.ABSOLUTE_ZERO_KELVIN=x,r.isArray=n,r.isArrayBuffer=_,r.isArrayOfArray=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfArray
	 * @desc Export function to validate if a value is an array of array or not
	 * @example
	 *
	 * import { isArrayOfArray } from 'itee-validators'
	 *
	 * if( isArrayOfArray( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,i=r.length;n<i;n++)if(t(r[n]))return!1;return!0},r.isArrayOfBoolean=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(u(r[n]))return!1;return!0},r.isArrayOfFunction=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(f(r[n]))return!1;return!0},r.isArrayOfMultiElement=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfMultiElement
	 * @desc Export function to validate if a value is an array with more than one value
	 * @example
	 *
	 * import { isArrayOfMultiElement } from 'itee-validators'
	 *
	 * if( isArrayOfMultiElement( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function(r){return!t(r)&&r.length>1}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isNull
	 * @desc Export function to validate if a value is null or not
	 * @example
	 *
	 * import { isNull } from 'itee-validators'
	 *
	 * if( isNull( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isArrayOfNull=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(a(r[n]))return!1;return!0},r.isArrayOfNumber=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfBoolean
	 * @desc Export function to validate if a value is an array of numbers or not
	 * @example
	 *
	 * import { isArrayOfNumber } from 'itee-validators'
	 *
	 * if( isArrayOfNumber( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(d(r[n]))return!1;return!0},r.isArrayOfObject=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(b(r[n]))return!1;return!0},r.isArrayOfSingleElement=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfSingleElement
	 * @desc Export function to validate if a value is an array of single value or not
	 * @example
	 *
	 * import { isArrayOfSingleElement } from 'itee-validators'
	 *
	 * if( isArrayOfSingleElement( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function(r){return!t(r)&&1===r.length},r.isArrayOfString=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(m(r[n]))return!1;return!0},r.isArrayOfUndefined=function(r){if(t(r))return!1;if(i(r))return!1;for(let n=0,t=r.length;n<t;n++)if(O(r[n]))return!1;return!0},r.isBigInt64Array=w,r.isBigUint64Array=B,r.isBlankString=S,r.isBoolean=e,r.isCelsius=K,r.isDefined=s,r.isEmpty=T,r.isEmptyArray=i,r.isEmptyObject=v,r.isEmptyString=U,r.isFahrenheit=D,r.isFalse=function(r){return e(r)&&!1===r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isMax
	 * @desc Export function to validate if a value is a maximum javascript number
	 * @example
	 *
	 * import { isMaxPositive } from 'itee-validators'
	 *
	 * if( isMaxPositive( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isFinite=function(r){return Number.isFinite(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isZero
	 * @desc Export function to validate if a value is zero, with a special sign
	 * @example
	 *
	 * import { isZero } from 'itee-validators'
	 *
	 * if( isZero( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isFloat=p,r.isFloat32Array=M,r.isFloat64Array=j,r.isFunction=o,r.isInfinite=N,r.isInfiniteNegative=l,r.isInfinitePositive=y,r.isInt16Array=$,r.isInt32Array=L,r.isInt8Array=P,r.isInteger=h,r.isKelvin=q,r.isMaxNegative=function(r){return r===-Number.MAX_VALUE}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isMin
	 * @desc Export function to validate if a value is a minimum javascript number
	 * @example
	 *
	 * import { isMaxPositive } from 'itee-validators'
	 *
	 * if( isMaxPositive( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isMaxPositive=function(r){return r===Number.MAX_VALUE},r.isMaxSafeInteger=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isSafeInteger
	 * @desc Export function to validate if a value is a safe integer number
	 * @example
	 *
	 * import { isMaxSafeInteger } from 'itee-validators'
	 *
	 * if( isMaxSafeInteger( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */
function(r){return r===Number.MAX_SAFE_INTEGER},r.isMinNegative=function(r){return r===-Number.MIN_VALUE},r.isMinPositive=function(r){return r===Number.MIN_VALUE},r.isMinSafeInteger=function(r){return r===Number.MIN_SAFE_INTEGER},r.isNaN=function(r){return Number.isNaN(r)},r.isNotArray=t,r.isNotArrayBuffer=function(r){return!_(r)},r.isNotArrayOfArray=function(r){if(t(r))return!0;if(i(r))return!0;for(let t=0,i=r.length;t<i;t++)if(n(r[t]))return!1;return!0},r.isNotArrayOfBoolean=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(u(r[n]))return!0;return!1},r.isNotArrayOfFunction=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(f(r[n]))return!0;return!1},r.isNotArrayOfNull=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(a(r[n]))return!0;return!1},r.isNotArrayOfNumber=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(d(r[n]))return!0;return!1},r.isNotArrayOfObject=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(b(r[n]))return!0;return!1},r.isNotArrayOfString=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(m(r[n]))return!0;return!1}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isUndefined
	 * @desc Export function to validate if a value is a void
	 * @example
	 *
	 * import { isNull } from 'itee-validators'
	 *
	 * if( isNull( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isNotArrayOfUndefined=function(r){if(t(r))return!0;if(i(r))return!0;for(let n=0,t=r.length;n<t;n++)if(O(r[n]))return!0;return!1}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/booleans/isTrue
	 * @desc Export function to validate if a value is a boolean set to true or false
	 * @example
	 *
	 * import { isTrue } from 'itee-validators'
	 *
	 * if( isTrue( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */,r.isNotBigInt64Array=function(r){return!w(r)},r.isNotBigUint64Array=function(r){return!B(r)},r.isNotBlankString=function(r){return!S(r)},r.isNotBoolean=u,r.isNotCelsius=X,r.isNotDefined=c,r.isNotEmpty=function(r){return!T(r)},r.isNotEmptyArray=function(r){return!!t(r)||r.length>0},r.isNotEmptyObject=function(r){return!v(r)},r.isNotEmptyString=function(r){return!U(r)},r.isNotFahrenheit=H,r.isNotFloat32Array=function(r){return!M(r)},r.isNotFloat64Array=function(r){return!j(r)},r.isNotFunction=f,r.isNotInt16Array=function(r){return!$(r)},r.isNotInt32Array=function(r){return!L(r)},r.isNotInt8Array=function(r){return!P(r)},r.isNotKelvin=z,r.isNotNull=a,r.isNotNumber=d,r.isNotObject=b,r.isNotString=m,r.isNotSymbol=function(r){return"symbol"!=typeof r},r.isNotTemperature=function(r){return z(r)&&X(r)&&H(r)},r.isNotUint16Array=function(r){return!k(r)},r.isNotUint32Array=function(r){return!C(r)},r.isNotUint8Array=function(r){return!R(r)},r.isNotUint8ClampedArray=function(r){return!Z(r)},r.isNotUndefined=O,r.isNull=function(r){return null===r},r.isNumber=g,r.isNumberNegative=function(r){return g(r)&&r<0},r.isNumberPositive=function(r){return!d(r)&&(r>0||A(r)||y(r))},r.isObject=I,r.isString=E,r.isSymbol=F,r.isTemperature=function(r){return q(r)||K(r)||D(r)},r.isTrue=function(r){return e(r)&&!0===r},r.isUint16Array=k,r.isUint32Array=C,r.isUint8Array=R,r.isUint8ClampedArray=Z,r.isUndefined=function(r){return void 0===r},r.isZero=function(r){return 0===r},r.isZeroNegative=function(r){return 0===r&&1/r===Number.NEGATIVE_INFINITY},r.isZeroPositive=A,Object.defineProperty(r,"__esModule",{value:!0})}({});
