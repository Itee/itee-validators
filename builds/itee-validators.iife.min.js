this.Itee=this.Itee||{},this.Itee.Validators=function(r){"use strict";
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArray
	 * @desc Export function to validate if a value is an array or not
	 * @example
	 *
	 * import { isArray } from 'itee-validators'
	 *
	 * if( isArray( value ) ) {
	 *     //...
	 * } else {
	 *     //...
	 * }
	 *
	 */function t(r){return Array.isArray(r)}function n(r){return!Array.isArray(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isEmptyArray
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */function i(r){return!n(r)&&0===r.length}function e(r){return null!==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfNull
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isDefined
	 * @desc Export function to validate if a value is a void
	 * @example todo
	 *
	 */
function u(r){return null!=r}function o(r){return null==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/objects/isObject
	 * @desc Export function to validate if a value is an object
	 * @example todo
	 *
	 */function f(r){return!o(r)&&r.constructor===Object}function a(r){return!f(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfObject
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isString
	 * @desc Export function to validate if a value is a string
	 * @example todo
	 *
	 */
function s(r){return"string"==typeof r||r instanceof String}function c(r){return!s(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfString
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */function l(r){return void 0!==r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfUndefined
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/booleans/isBoolean
	 * @desc Export function to validate if a value is a boolean or not
	 * @example todo
	 *
	 */
function y(r){return"boolean"==typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/functions/isFunction
	 * @desc Export function to validate if a value is a function or not
	 * @example todo
	 *
	 */
function N(r){return"function"==typeof r}function A(r){return"function"!=typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isZero
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */function I(r){return 0===r&&1/r===Number.POSITIVE_INFINITY}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isNumber
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */
function d(r){return!o(r)&&r.constructor===Number}function g(r){return!d(r)}function h(r){return Number.isInteger(r)}function p(r){return!g(r)&&(!Number.isNaN(r)&&(!b(r)&&r%1!=0))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isInfinite
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */
function b(r){return!g(r)&&(!Number.isNaN(r)&&!Number.isFinite(r))}function E(r){return r===Number.POSITIVE_INFINITY}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/objects/isEmptyObject
	 * @desc Export function to validate if a value is an object
	 * @example todo
	 *
	 */
function m(r){if(a(r))return!1;if(0===r.length)return!0;for(let t in r)if(Object.prototype.hasOwnProperty.call(r,t))return!1;return!0}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isEmptyString
	 * @desc Export function to validate if a value is a empty string
	 * @example todo
	 *
	 */
function v(r){return!c(r)&&0===r.length}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/strings/isBlankString
	 * @desc Export function to validate if a value is a blank string
	 * @example todo
	 *
	 */
function O(r){return!c(r)&&(!v(r)&&!/\S/.test(r))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/symbols/isSymbol
	 * @desc Export function to validate if a value is a symbol
	 * @example todo
	 *
	 */
function U(r){return"symbol"==typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isEmpty
	 * @desc Export function to validate if a value is a void
	 * @example todo
	 *
	 */
function S(r){return!o(r)&&(!!v(r)||(!!i(r)||!!m(r)))}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/cores
	 * @description Export the Validator singleton instance that allow to validate complex data structure
	 * @example
	 *
	 const validator = Itee.Validators.Validator

	 // Using unique function for One registered type
	 // Usefull when a simple data structure is used multiple times
	 validator.add( 'ColorType', color => {

	                const r = color.r
	                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
	                    return false
	                }

	                const g = color.g
	                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
	                    return false
	                }

	                const b = color.b
	                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
	                    return false
	                }

	                return true
	            } )

	 // Using schema composition
	 // Usefull for design validation schema faster and based on previous declared validation types
	 validator.add( 'Range_0_255', ( value ) => {

	                if ( Itee.Validators.isNotNumber( value ) ) {
	                    return false
	                }

	                return !(value < 0 || value > 255)

	            } )

	 validator.add( 'ColorSchema', {
	                r: {
	                    required: true,
	                    type:     'Range_0_255'
	                },
	                g: {
	                    required: true,
	                    type:     'Range_0_255'
	                },
	                b: {
	                    required: true,
	                    type:     'Range_0_255'
	                }
	            } )

	 validator.add( 'ColorStructure', {
	                color_from_type: {
	                    type: 'ColorType'
	                },
	                col_from_schema: {
	                    type: 'ColorSchema'
	                },
	                col_from_fn:     {
	                    // Inner function
		                // Usefull for specific validation requirement that cannot match other previous validation schema or type
	                    fn: function ColorValidator ( color ) {

	                        const r = color.r
	                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {
	                            return false
	                        }

	                        const g = color.g
	                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {
	                            return false
	                        }

	                        const b = color.b
	                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {
	                            return false
	                        }

	                        return true
	                    }
	                }
	            } )

	 // The data to validate
	 const colorStruct = {
	                color_from_type: {
	                    r: 0,
	                    g: 1,
	                    b: 2
	                },
	                col_from_schema: {
	                    r: 10,
	                    g: 20,
	                    b: 30
	                },
	                col_from_fn:     {
	                    r: 0,
	                    g: 127,
	                    b: 255
	                }
	            }

	 // Execute

	 try {

	    if ( validator.check( colorStruct, 'ColorStructure' ) ) {
	        alert( 'ColorStructure is valid !' )
	    } else {
	        alert( validator.errors )
	    }

	} catch ( err ) {
	    alert( err )
	}
	 *
	 */
class T{constructor(){this.validators={Boolean:y,Number:d,Integer:h,Float:p,Array:t,String:s,Object:f,Symbol:U,Function:N},this.errors=[]}add(r,t){if(c(r))throw new TypeError("Validator: Expect type to be a string");if(A(t)&&a(t))throw new TypeError("Validator: Expect validator to be an object or a function");if(u(this.validators[r]))throw new TypeError(`Validator: a validator is already defined for type '${r}'`);this.validators[r]=t}remove(r){delete this.validators[r]}getAvalaibleTypes(){const r=[];for(let t in this.validators)r.push(t);return r}check(r,t,n=!0){const i=this.validators[t];if(o(i))throw new TypeError(`Validator: Unable to find schema validation of type '${t}'`);let e=!0;if(N(i))e=i(r);else{if(!f(i))throw new TypeError(`Validator: Unknown validator of type '${t}'`);{let f=!0;for(let a in i){const s=i[a];if(o(s))throw new TypeError(`Validator: Missing validator for key '${a}' of type '${t}'`);const c=r[a],l=s.required;if(o(c)){if(!l)continue;f=!1}let y=s.fn;if(u(y)){if(A(y))throw new TypeError(`Validator: Invalid validation function for '${a}' with type '${t}'`);f=y(c)}else f=this.check(c,s.type,n);if(!1===f&&(this.errors.push(`Validator: Invalid property '${a}' of type '${s.type}' with value '${c}' in object of type '${t}'`),e=!1,n))break}}}return e}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isArrayBuffer
	 * @desc Export function to validate if a value is a array buffer
	 * @example todo
	 *
	 */
function F(r){return r instanceof ArrayBuffer}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isBigInt64Array
	 * @desc Export function to validate if a value is a big int 64 array buffer
	 * @example todo
	 *
	 */
function V(r){return r instanceof BigInt64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isBigUint64Array
	 * @desc Export function to validate if a value is a big unsigned int 64 array buffer
	 * @example todo
	 *
	 */
function w(r){return r instanceof BigUint64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isFloat32Array
	 * @desc Export function to validate if a value is a float 32 array buffer
	 * @example todo
	 *
	 */
function _(r){return r instanceof Float32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isFloat64Array
	 * @desc Export function to validate if a value is a float 64 array buffer
	 * @example todo
	 *
	 */
function B(r){return r instanceof Float64Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt16Array
	 * @desc Export function to validate if a value is a int 16 array buffer
	 * @example todo
	 *
	 */
function M(r){return r instanceof Int16Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt32Array
	 * @desc Export function to validate if a value is a int 32 array buffer
	 * @example todo
	 *
	 */
function j(r){return r instanceof Int32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isInt8Array
	 * @desc Export function to validate if a value is a int 8 array buffer
	 * @example todo
	 *
	 */
function $(r){return r instanceof Int8Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint16Array
	 * @desc Export function to validate if a value is a unsigned int 16 array buffer
	 * @example todo
	 *
	 */
function L(r){return r instanceof Uint16Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint32Array
	 * @desc Export function to validate if a value is a unsigned int 32 array buffer
	 * @example todo
	 *
	 */
function P(r){return r instanceof Uint32Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint8Array
	 * @desc Export function to validate if a value is a unsigned int 8 array buffer
	 * @example todo
	 *
	 */
function k(r){return r instanceof Uint8Array}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/typed-arrays/isUint8ClampedArray
	 * @desc Export function to validate if a value is a unsigned clamped int 8 array buffer
	 * @example todo
	 *
	 */
function C(r){return r instanceof Uint8ClampedArray}r.Validator=void 0,o(r.Validator)&&(r.Validator=new T);
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatues
	 * @desc Export function to validate if a value is a temperature
	 * @example todo
	 *
	 */
function R(r){return d(r)&&r>=-273.14999999955}function Z(r){return!R(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatues
	 * @desc Export function to validate if a value is a temperature
	 * @example todo
	 *
	 */function x(r){return d(r)&&r>=-459.67}function G(r){return!x(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatues
	 * @desc Export function to validate if a value is a temperature
	 * @example todo
	 *
	 */function Y(r){return d(r)&&r>=4.5e-10}function K(r){return!Y(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/temperatues
	 * @desc Export function to validate if a value is a temperature
	 * @example todo
	 *
	 */return r.ABSOLUTE_ZERO_CELSIUS=-273.14999999955,r.ABSOLUTE_ZERO_FAHRENHEIT=-459.67,r.ABSOLUTE_ZERO_KELVIN=4.5e-10,r.isArray=t,r.isArrayBuffer=F,r.isArrayOfArray=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfArray
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
function(r){if(n(r))return!1;if(i(r))return!1;for(let t=0,i=r.length;t<i;t++)if(n(r[t]))return!1;return!0},r.isArrayOfMultiElement=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfMultiElement
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
function(r){return!n(r)&&r.length>1}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isNull
	 * @desc Export function to validate if a value is a void
	 * @example todo
	 *
	 */,r.isArrayOfNull=function(r){if(n(r))return!1;if(i(r))return!1;for(let t=0,n=r.length;t<n;t++)if(e(r[t]))return!1;return!0},r.isArrayOfObject=function(r){if(n(r))return!1;if(i(r))return!1;for(let t=0,n=r.length;t<n;t++)if(a(r[t]))return!1;return!0},r.isArrayOfSingleElement=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/arrays/isArrayOfSingleElement
	 * @desc Export function to validate if a value is an array of array or not
	 * @example todo
	 *
	 */
function(r){return!n(r)&&1===r.length},r.isArrayOfString=function(r){if(n(r))return!1;if(i(r))return!1;for(let t=0,n=r.length;t<n;t++)if(c(r[t]))return!1;return!0},r.isArrayOfUndefined=function(r){if(n(r))return!1;if(i(r))return!1;for(let t=0,n=r.length;t<n;t++)if(l(r[t]))return!1;return!0},r.isBigInt64Array=V,r.isBigUint64Array=w,r.isBlankString=O,r.isBoolean=y,r.isCelsius=R,r.isDefined=u,r.isEmpty=S,r.isEmptyArray=i,r.isEmptyObject=m,r.isEmptyString=v,r.isFahrenheit=x,r.isFalse=function(r){return y(r)&&!1===r},r.isFinite=function(r){return Number.isFinite(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isMax
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */,r.isFloat=p,r.isFloat32Array=_,r.isFloat64Array=B,r.isFunction=N,r.isInfinite=b,r.isInfiniteNegative=function(r){return r===Number.NEGATIVE_INFINITY},r.isInfinitePositive=E,r.isInt16Array=M,r.isInt32Array=j,r.isInt8Array=$,r.isInteger=h,r.isKelvin=Y,r.isMaxNegative=function(r){return r===-Number.MAX_VALUE}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isMin
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */,r.isMaxPositive=function(r){return r===Number.MAX_VALUE},r.isMaxSafeInteger=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/numbers/isSafeInteger
	 * @desc Export function to validate if a value is a finite number
	 * @example todo
	 *
	 */
function(r){return r===Number.MAX_SAFE_INTEGER},r.isMinNegative=function(r){return r===-Number.MIN_VALUE},r.isMinPositive=function(r){return r===Number.MIN_VALUE},r.isMinSafeInteger=function(r){return r===Number.MIN_SAFE_INTEGER},r.isNaN=function(r){return Number.isNaN(r)},r.isNotArray=n,r.isNotArrayBuffer=function(r){return!F(r)},r.isNotArrayOfArray=function(r){if(n(r))return!0;if(i(r))return!0;for(let n=0,i=r.length;n<i;n++)if(t(r[n]))return!1;return!0},r.isNotArrayOfNull=function(r){if(n(r))return!0;if(i(r))return!0;for(let t=0,n=r.length;t<n;t++)if(e(r[t]))return!0;return!1},r.isNotArrayOfObject=function(r){if(n(r))return!0;if(i(r))return!0;for(let t=0,n=r.length;t<n;t++)if(a(r[t]))return!0;return!1},r.isNotArrayOfString=function(r){if(n(r))return!0;if(i(r))return!0;for(let t=0,n=r.length;t<n;t++)if(c(r[t]))return!0;return!1}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/voids/isUndefined
	 * @desc Export function to validate if a value is a void
	 * @example todo
	 *
	 */,r.isNotArrayOfUndefined=function(r){if(n(r))return!0;if(i(r))return!0;for(let t=0,n=r.length;t<n;t++)if(l(r[t]))return!0;return!1},r.isNotBigInt64Array=function(r){return!V(r)},r.isNotBigUint64Array=function(r){return!w(r)},r.isNotBlankString=function(r){return!O(r)},r.isNotBoolean=function(r){return"boolean"!=typeof r}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/cores/booleans/isTrue
	 * @desc Export function to validate if a value is a boolean set to true or false
	 * @example todo
	 *
	 */,r.isNotCelsius=Z,r.isNotDefined=o,r.isNotEmpty=function(r){return!S(r)},r.isNotEmptyArray=function(r){return!!n(r)||r.length>0},r.isNotEmptyObject=function(r){return!m(r)},r.isNotEmptyString=function(r){return!v(r)},r.isNotFahrenheit=G,r.isNotFloat32Array=function(r){return!_(r)},r.isNotFloat64Array=function(r){return!B(r)},r.isNotFunction=A,r.isNotInt16Array=function(r){return!M(r)},r.isNotInt32Array=function(r){return!j(r)},r.isNotInt8Array=function(r){return!$(r)},r.isNotKelvin=K,r.isNotNull=e,r.isNotNumber=g,r.isNotObject=a,r.isNotString=c,r.isNotSymbol=function(r){return"symbol"!=typeof r},r.isNotTemperature=function(r){return K(r)&&Z(r)&&G(r)},r.isNotUint16Array=function(r){return!L(r)},r.isNotUint32Array=function(r){return!P(r)},r.isNotUint8Array=function(r){return!k(r)},r.isNotUint8ClampedArray=function(r){return!C(r)}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @module sources/physics/constants
	 * @desc Export constants about temperatures
	 *
	 */,r.isNotUndefined=l,r.isNull=function(r){return null===r},r.isNumber=d,r.isNumberNegative=function(r){return d(r)&&r<0},r.isNumberPositive=function(r){return!g(r)&&(r>0||I(r)||E(r))},r.isObject=f,r.isString=s,r.isSymbol=U,r.isTemperature=function(r){return Y(r)||R(r)||x(r)},r.isTrue=function(r){return y(r)&&!0===r},r.isUint16Array=L,r.isUint32Array=P,r.isUint8Array=k,r.isUint8ClampedArray=C,r.isUndefined=function(r){return void 0===r},r.isZero=function(r){return 0===r},r.isZeroNegative=function(r){return 0===r&&1/r===Number.NEGATIVE_INFINITY},r.isZeroPositive=I,r}({});
//# sourceMappingURL=itee-validators.iife.min.js.map
