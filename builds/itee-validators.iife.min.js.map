{"version":3,"file":"itee-validators.iife.min.js","sources":["../sources/cores/voids.js","../sources/cores/strings.js","../sources/cores/objects.js","../sources/cores/arrays.js","../sources/cores/booleans.js","../sources/cores/functions.js","../sources/cores/numbers.js","../sources/cores/symbols.js","../sources/physics/temperatures.js","../sources/cores/cores.js"],"sourcesContent":["/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/voids\r\n * @description Export the validation methods about voids notions\r\n */\r\n\r\n/**\r\n * Check if given data is null\r\n *\r\n * @param data {any} The data to check against the nullity\r\n * @returns {boolean} true if data is null, false otherwise.\r\n */\r\nexport function isNull ( data ) {\r\n    return (data === null)\r\n}\r\n\r\n/**\r\n * Check if given data is not null\r\n *\r\n * @param data {any} The data to check against the nullity\r\n * @returns {boolean} true if data is not null, false otherwise.\r\n */\r\nexport function isNotNull ( data ) {\r\n    return (data !== null)\r\n}\r\n\r\n/**\r\n * Check if given data is undefined\r\n *\r\n * @param data {any} The data to check against the undefiness\r\n * @returns {boolean} true if data is undefined, false otherwise.\r\n */\r\nexport function isUndefined ( data ) {\r\n    return (typeof data === 'undefined')\r\n}\r\n\r\n/**\r\n * Check if given data is defined\r\n *\r\n * @param data {any} The data to check against the undefiness\r\n * @returns {boolean} true if data is defined, false otherwise.\r\n */\r\nexport function isNotUndefined ( data ) {\r\n    return (typeof data !== 'undefined')\r\n}\r\n\r\n/**\r\n * Check if given data is null or undefined\r\n *\r\n * @param data {any} The data to check against the existence\r\n * @returns {boolean} true if data is null or undefined, false otherwise.\r\n */\r\nexport function isNullOrUndefined ( data ) {\r\n    return ((data === null) || (typeof data === 'undefined'))\r\n}\r\n\r\n/**\r\n * Check if given data is not null and not undefined\r\n *\r\n * @param data {any} The data to check against the existence\r\n * @returns {boolean} true if data is not null and not undefined, false otherwise.\r\n */\r\nexport function isDefined ( data ) {\r\n    return ((data !== null) && (typeof data !== 'undefined'))\r\n}\r\n\r\n/**\r\n * Check emptiness of given data\r\n *\r\n * See: https://stackoverflow.com/questions/4346186/how-to-determine-if-a-function-is-empty\r\n *\r\n * @param data {any} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as empty, false otherwise.\r\n */\r\nexport function isEmpty ( data ) {\r\n\r\n    // null and undefined are consider as \"empty\"\r\n    if ( data === null ) {\r\n        return true\r\n    }\r\n    if ( data === undefined ) {\r\n        return true\r\n    }\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if ( data.length > 0 ) {\r\n        return false\r\n    }\r\n    if ( data.length === 0 ) {\r\n        return true\r\n    }\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    for ( let key in data ) {\r\n        if ( Object.prototype.hasOwnProperty.call( data, key ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n/**\r\n * Check fullness of given data\r\n *\r\n * @param data {any} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as not empty, false otherwise.\r\n */\r\nexport function isNotEmpty ( data ) {\r\n    return !isEmpty( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/strings\r\n * @description Export the validation methods about strings\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a string\r\n *\r\n * @param data {any} The data to check against the string type\r\n * @returns {boolean} true if data is a string, false otherwise.\r\n */\r\nexport function isString ( data ) {\r\n    return (typeof data === 'string' || data instanceof String)\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isString_0 ( val ) {\r\n    return (typeof val === 'string')\r\n}\r\n\r\nexport function isString_1 ( val ) {\r\n    return (typeof val === 'string' || ((!!val && typeof val === 'object') && Object.prototype.toString.call( val ) === '[object String]'))\r\n}\r\n\r\nexport function isString_2 ( val ) {\r\n    return (Object.prototype.toString.call( val ) === '[object String]')\r\n}\r\n\r\nexport function isString_3 ( val ) {\r\n    return (val !== null && val !== undefined && val.constructor === String)\r\n}\r\n\r\nexport function isString_4 ( val ) {\r\n    return (val === val + '')\r\n}\r\n// #endif\r\n\r\n/**\r\n * Check if given data is not a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is not a string, false otherwise.\r\n */\r\nexport function isNotString ( data ) {\r\n    return (typeof data !== 'string')\r\n}\r\n\r\n/**\r\n * Check if given data is an empty string\r\n *\r\n * @param data {any} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is an empty string, false otherwise.\r\n */\r\nexport function isEmptyString ( data ) {\r\n\r\n    console.assert( isString( data ), 'Expect a string !' )\r\n\r\n    return (data.length === 0)\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty string\r\n *\r\n * @param data {any} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is not an empty string, false otherwise.\r\n */\r\nexport function isNotEmptyString ( data ) {\r\n\r\n    if ( isNotString( data ) ) {\r\n        throw new TypeError( 'Expect a string !' )\r\n    }\r\n\r\n    return (data.length > 0)\r\n\r\n}\r\n\r\n/**\r\n * Check if the given data is a blank string\r\n *\r\n * @param data {any} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is a blank string, false otherwise.\r\n */\r\nexport function isBlankString ( data ) {\r\n\r\n    if ( isEmptyString( data ) ) {\r\n        throw new TypeError( 'Expect a non empty string !' )\r\n    }\r\n\r\n    return (!/\\S/.test( data ))\r\n}\r\n\r\n/**\r\n * Check if the given data is not a blank string\r\n *\r\n * @param data {any} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is not a blank string, false otherwise.\r\n */\r\nexport function isNotBlankString ( data ) {\r\n    return (isNotEmptyString( data ) && /\\S/.test( data ))\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/objects\r\n * @description Export the validation methods about objects\r\n * @requires {@link module:sources/cores/voids/isNull}\r\n * @requires {@link module:sources/cores/voids/isEmpty}\r\n */\r\n\r\nimport {\r\n    isNotNull,\r\n    isEmpty,\r\n    isNotEmpty\r\n} from './voids'\r\n\r\n/**\r\n * Check if given data is an object\r\n *\r\n * @param data {any} The data to check against the object type\r\n * @returns {boolean} true if data is object, false otherwise\r\n */\r\nexport function isObject ( data ) {\r\n    return (isNotNull( data ) && (typeof data === 'object') && !Array.isArray( data ))\r\n}\r\n\r\n/**\r\n * Check if given data is not an object\r\n *\r\n * @param data {any} The data to check against the object type\r\n * @returns {boolean} true if data is not an object, false otherwise\r\n */\r\nexport function isNotObject ( data ) {\r\n    return !isObject( data )\r\n}\r\n\r\n/**\r\n * Check if given data is an empty object\r\n *\r\n * @param data {any} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is an empty object, false otherwise\r\n */\r\nexport function isEmptyObject ( data ) {\r\n    return (isObject( data ) && isEmpty( data ))\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty object\r\n *\r\n * @param data {any} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is not an empty object, false otherwise\r\n */\r\nexport function isNotEmptyObject ( data ) {\r\n    return (isObject( data ) && isNotEmpty( data ))\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/arrays\r\n * @description Export the validation methods about Arrays\r\n * @requires {@link module:sources/cores/voids}\r\n * @requires {@link module:sources/cores/strings}\r\n * @requires {@link module:sources/cores/objects}\r\n *\r\n */\r\n\r\nimport {\r\n    isNull,\r\n    isNotNull,\r\n    isDefined,\r\n    isUndefined\r\n} from './voids'\r\nimport {\r\n    isString,\r\n    isNotString\r\n} from './strings'\r\nimport {\r\n    isObject,\r\n    isNotObject\r\n} from './objects'\r\n\r\n/**\r\n * Check if given data is an array\r\n *\r\n * @param data {any} The data to check against the array type\r\n * @returns {boolean} true if data is array, false otherwise\r\n */\r\nexport function isArray ( data ) {\r\n    return Array.isArray( data )\r\n}\r\n\r\n/**\r\n * Check if given data is not an array\r\n *\r\n * @param data {any} The data to check against the array type\r\n * @returns {boolean} true if data is not array, false otherwise\r\n */\r\nexport function isNotArray ( data ) {\r\n    return !Array.isArray( data )\r\n}\r\n\r\n// alt\r\n//export function isNotArray_1 ( data ) {\r\n//    return !isArray( data )\r\n//}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are null\r\n *\r\n * @param data {any} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are null, false otherwise\r\n */\r\nexport function isArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not null\r\n *\r\n * @param data {any} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are not null, false otherwise\r\n */\r\nexport function isNotArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return true\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isNull( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is an empty array\r\n *\r\n * @param data {any} The data to check against the empty array\r\n * @returns {boolean} true if data is an empty array, false otherwise\r\n */\r\nexport function isEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    return (data.length === 0)\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array\r\n *\r\n * @param data {any} The data to check against the empty array\r\n * @returns {boolean} true if data is not an empty array, false otherwise\r\n */\r\nexport function isNotEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    return (data.length > 0)\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are undefined\r\n *\r\n * @param data {any} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are undefined, false otherwise\r\n */\r\nexport function isArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n        if ( isDefined( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are defined\r\n *\r\n * @param data {any} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are defined, false otherwise\r\n */\r\nexport function isNotArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return true\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isUndefined( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is an array of array\r\n *\r\n * @param data {any} The data to check against the array of array type\r\n * @returns {boolean} true if data is an array of array, false otherwise\r\n */\r\nexport function isArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index += 1 ) {\r\n        if ( isNotArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an array of array\r\n *\r\n * @param data {any} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an array of array, false otherwise\r\n */\r\nexport function isNotArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return true\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if (isArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are string\r\n *\r\n * @param data {any} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are string, false otherwise\r\n */\r\nexport function isArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n//alt\r\n//export function isArrayOfString_1 ( data ) {\r\n//\r\n//    if ( !Array.isArray( data ) ) {\r\n//        return false\r\n//    }\r\n//\r\n//    const dataLength = data.length\r\n//    if ( dataLength === 0 ) {\r\n//        return false\r\n//    }\r\n//\r\n//    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n//        if ( typeof data[ index ] !== 'string' ) {\r\n//            return false\r\n//        }\r\n//    }\r\n//\r\n//    return true\r\n//\r\n//}\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not string\r\n *\r\n * @param data {any} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are not string, false otherwise\r\n */\r\nexport function isNotArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return true\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isString( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is an array with a single value\r\n *\r\n * @param data {any} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with a single value, false otherwise\r\n */\r\nexport function isArrayOfSingleElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    if ( data.length !== 1 ) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is an array with multiples values\r\n *\r\n * @param data {any} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with multiples values, false otherwise\r\n */\r\nexport function isArrayOfMultiElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    if ( data.length <= 1 ) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is an array where all values are of object type\r\n *\r\n * @param data {any} The data to check against the array of object type\r\n * @returns {boolean} true if data is an array where all values are of object type, false otherwise\r\n */\r\nexport function isArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/**\r\n * Check if given data is not an array where all values are of object type\r\n *\r\n * @param data {any} The data to check against the array of object type\r\n * @returns {boolean} true if data is not an array where all values are of object type, false otherwise\r\n */\r\nexport function isNotArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) {\r\n        return true\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return true\r\n    }\r\n\r\n    for ( let index = 0 ; index < dataLength ; index++ ) {\r\n        if ( isObject( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/booleans\r\n * @description Export the validation methods about booleans\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a boolean\r\n *\r\n * @param data {any} The data to check against the booleaness\r\n * @returns {boolean} true if data is a boolean, false otherwise.\r\n */\r\nexport function isBoolean ( data ) {\r\n    return (typeof data === 'boolean')\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isBoolean_alt ( value ) {\r\n\r\n    return typeof value === 'boolean' || (typeof value === 'object' && value !== null && typeof value.valueOf() === 'boolean')\r\n\r\n}\r\n// #endif\r\n\r\n/**\r\n * Check if given data is not a boolean\r\n *\r\n * @param data {any} The data to check against the booleaness\r\n * @returns {boolean} true if data is not a boolean, false otherwise.\r\n */\r\nexport function isNotBoolean ( data ) {\r\n    return (typeof data !== 'boolean')\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isNotBoolean_negbase ( data ) {\r\n    return !isBoolean( data )\r\n}\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/functions\r\n * @description Export the validation methods about functions\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a function\r\n *\r\n * @param data {any} The data to check against the functionality\r\n * @returns {boolean} true if data is a function, false otherwise.\r\n */\r\nexport function isFunction ( data ) {\r\n    return (typeof data === 'function')\r\n}\r\n\r\n/**\r\n * Check if given data is not a function\r\n *\r\n * @param data {any} The data to check against the functionality\r\n * @returns {boolean} true if data is not a function, false otherwise.\r\n */\r\nexport function isNotFunction ( data ) {\r\n    return (typeof data !== 'function')\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/numbers\r\n * @description Export the validation methods about numbers\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a number\r\n *\r\n * @param data {any} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a number, false otherwise.\r\n */\r\nexport function isNumber ( data ) {\r\n    return (typeof data === 'number' && !Number.isNaN( data ))\r\n}\r\n\r\nexport function isNumber_1 ( data ) {\r\n    return (Number( data ) === data)\r\n}\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {any} The data to check against the number type\r\n * @returns {boolean} true if data is not of type number or not a number, false otherwise.\r\n */\r\nexport function isNotNumber ( data ) {\r\n    return (typeof data !== 'number' || Number.isNaN( data ))\r\n}\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {any} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is not a number, false otherwise.\r\n */\r\nexport function isNaN ( data ) {\r\n    return Number.isNaN( data )\r\n}\r\n\r\n/**\r\n * Check if the data is a positive number\r\n *\r\n * @param data {any} The data to check against the positivity\r\n * @returns {boolean} true if data is a positive number, false otherwise.\r\n */\r\nexport function isNumberPositive ( data ) {\r\n    return (isNumber( data ) && data > 0)\r\n}\r\n\r\n/**\r\n * Check if the data is a negative number\r\n *\r\n * @param data {any} The data to check against the negativity\r\n * @returns {boolean} true if data is a negative number, false otherwise.\r\n */\r\nexport function isNumberNegative ( data ) {\r\n    return (isNumber( data ) && data < 0)\r\n}\r\n\r\n/**\r\n * Check if the given data is numerical\r\n *\r\n * @param data {any} The data to check against the numerical type\r\n * @returns {boolean} true if data is numeric, false otherwise\r\n */\r\nexport function isNumeric ( data ) {\r\n    return (typeof data === 'number')\r\n}\r\n\r\n/**\r\n * Check if the given data is not numerical\r\n *\r\n * @param data {any} The data to check against the numerical type\r\n * @returns {boolean} true if data is not numeric, false otherwise\r\n */\r\nexport function isNotNumeric ( data ) {\r\n    return (typeof data !== 'number')\r\n}\r\n\r\n/**\r\n * Check if the given data is an integer number\r\n *\r\n * @param data {any} The data to check against the integer state\r\n * @returns {boolean} true if data is an integer, false otherwise\r\n */\r\nexport function isInteger ( data ) {\r\n    return (data === 0 && (1 / data) === Number.POSITIVE_INFINITY)\r\n}\r\n\r\n// alt\r\n//export function isInteger_1 ( data ) {\r\n//    return data % 1 === 0\r\n//}\r\n//\r\n//export function isInteger_2 ( n ) {\r\n//    return n === +n && n === (n | 0);\r\n//}\r\n//\r\n//export function isInteger_3 ( nVal ) {\r\n//    return typeof nVal === \"number\" && isFinite( nVal ) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor( nVal ) === nVal;\r\n//}\r\n\r\n/**\r\n * Check if given data is a floating point number\r\n *\r\n * @param data {any} The data to check against the floating point\r\n * @returns {boolean} true if data is a float, false otherwise\r\n */\r\nexport function isFloat ( data ) {\r\n    return data % 1 !== 0\r\n}\r\n\r\n// Alt\r\n//export function isFloat_1 ( n ) {\r\n//    return n === +n && n !== (n | 0)\r\n//}\r\n//\r\n//export function isFloat_2 ( x ) {\r\n//    return !!(x % 1)\r\n//}\r\n\r\n/**\r\n * Check if the given data is zero\r\n *\r\n * @param data {any} The data to check against the zero value\r\n * @returns {boolean} true if data is zero, false otherwise\r\n */\r\nexport function isZero ( data ) {\r\n    return (data === 0)\r\n}\r\n\r\n/**\r\n * Check if the given data is a positive zero\r\n *\r\n * @param data {any} The data to check against the positive zero value\r\n * @returns {boolean} true if data is a positive zero, false otherwise\r\n */\r\nexport function isZeroPositive ( data ) {\r\n    return (data === 0 && (1 / data) === Number.POSITIVE_INFINITY)\r\n}\r\n\r\n/**\r\n * Check if the given data is a negative zero\r\n *\r\n * @param data {any} The data to check against the negative zero value\r\n * @returns {boolean} true if data is a negative zero, false otherwise\r\n */\r\nexport function isZeroNegative ( data ) {\r\n    return (data === 0 && (1 / data) === Number.NEGATIVE_INFINITY)\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum safe integer number\r\n *\r\n * @param data {any} The data to check against the minimum safe integer state\r\n * @returns {boolean} true if data is a minimum safe integer, false otherwise\r\n */\r\nexport function isMinSafeInteger ( data ) {\r\n    return (data === Number.MIN_SAFE_INTEGER)\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum positive number\r\n *\r\n * @param data {any} The data to check against the positive minimum state\r\n * @returns {boolean} true if data is positive minimum, false otherwise\r\n */\r\nexport function isMinPositive ( data ) {\r\n    return (data === Number.MIN_VALUE)\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum negative number\r\n *\r\n * @param data {any} The data to check against the minimum infinite state\r\n * @returns {boolean} true if data is negative minimum, false otherwise\r\n */\r\nexport function isMinNegative ( data ) {\r\n    return (data === -Number.MIN_VALUE)\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum safe integer number\r\n *\r\n * @param data {any} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a maximum safe integer, false otherwise\r\n */\r\nexport function isMaxSafeInteger ( data ) {\r\n    return (data === Number.MAX_SAFE_INTEGER)\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum positive number\r\n *\r\n * @param data {any} The data to check against the positive maximum state\r\n * @returns {boolean} true if data is positive maximum, false otherwise\r\n */\r\nexport function isMaxPositive ( data ) {\r\n    return (data === Number.MAX_VALUE)\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum negative number\r\n *\r\n * @param data {any} The data to check against the maximum infinite state\r\n * @returns {boolean} true if data is negative maximum, false otherwise\r\n */\r\nexport function isMaxNegative ( data ) {\r\n    return (data === -Number.MAX_VALUE)\r\n}\r\n\r\n/**\r\n * Check if the given data is a finite number\r\n *\r\n * @param data {any} The data to check against the finite state\r\n * @returns {boolean} true if data is finite, false otherwise\r\n */\r\nexport function isFinite ( data ) {\r\n    return Number.isFinite( data )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite number\r\n *\r\n * @param data {any} The data to check against the infinite state\r\n * @returns {boolean} true if data is infinite, false otherwise\r\n */\r\nexport function isInfinite ( data ) {\r\n    return !Number.isFinite( data )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite negative number\r\n *\r\n * @param data {any} The data to check against the negative infinite state\r\n * @returns {boolean} true if data is negative infinite, false otherwise\r\n */\r\nexport function isInfiniteNegative ( data ) {\r\n    return (data === Number.NEGATIVE_INFINITY)\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite positive number\r\n *\r\n * @param data {any} The data to check against the positive infinite state\r\n * @returns {boolean} true if data is positive infinite, false otherwise\r\n */\r\nexport function isInfinitePositive ( data ) {\r\n    return (data === Number.POSITIVE_INFINITY)\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/symbols\r\n * @description Export the validation methods about symbols\r\n */\r\n\r\n/**\r\n * Check if given data is a symbol\r\n *\r\n * @param data {any} The data to check against the symbol type\r\n * @returns {boolean} true if data is a symbol, false otherwise.\r\n */\r\nexport function isSymbol ( data ) {\r\n    return (typeof data === 'symbol')\r\n}\r\n\r\n/**\r\n * Check if given data is not a symbol\r\n *\r\n * @param data {any} The data to check against the symbol type\r\n * @returns {boolean} true if data is not a symbol, false otherwise.\r\n */\r\nexport function isNotSymbol ( data ) {\r\n    return (typeof data !== 'symbol')\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/physics/temperatures\r\n * @description Export the validation methods about temperatures\r\n * @requires {@link module:sources/cores/numbers}\r\n */\r\n\r\nimport { isNumber } from '../cores/numbers'\r\n\r\n// Todo: itee-physics\r\nexport const ABSOLUTE_ZERO_KELVIN     = 0.00000000045\r\nexport const ABSOLUTE_ZERO_CELSIUS    = -273.14999999955\r\nexport const ABSOLUTE_ZERO_FAHRENHEIT = -459.67\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isKelvin ( data ) {\r\n    return (isNumber( data ) && data >= ABSOLUTE_ZERO_KELVIN)\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotKelvin ( data ) {\r\n    return !isKelvin( data )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isCelsius ( data ) {\r\n    return (isNumber( data ) && data >= ABSOLUTE_ZERO_CELSIUS)\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotCelsius ( data ) {\r\n    return !isCelsius( data )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isFahrenheit ( data ) {\r\n    return (isNumber( data ) && data >= ABSOLUTE_ZERO_FAHRENHEIT)\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotFahrenheit ( data ) {\r\n    return !isFahrenheit( data )\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isTemperature ( data ) {\r\n    return (isKelvin( data ) || isCelsius( data ) || isFahrenheit( data ))\r\n}\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotTemperature ( data ) {\r\n    return (isNotKelvin( data ) && isNotCelsius( data ) && isNotFahrenheit( data ))\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @module sources/cores/cores\r\n * @description Export the Validator singleton instance that allow to validate complex data structure\r\n * @example\r\n *\r\n const validator = Itee.Validators.Validator\r\n\r\n // Using unique function for One registered type\r\n // Usefull when a simple data structure is used multiple times\r\n validator.add( 'ColorType', color => {\r\n\r\n                const r = color.r\r\n                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                    return false\r\n                }\r\n\r\n                const g = color.g\r\n                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                    return false\r\n                }\r\n\r\n                const b = color.b\r\n                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                    return false\r\n                }\r\n\r\n                return true\r\n            } )\r\n\r\n // Using schema composition\r\n // Usefull for design validation schema faster and based on previous declared validation types\r\n validator.add( 'Range_0_255', ( value ) => {\r\n\r\n                if ( Itee.Validators.isNotNumber( value ) ) {\r\n                    return false\r\n                }\r\n\r\n                return !(value < 0 || value > 255)\r\n\r\n            } )\r\n\r\n validator.add( 'ColorSchema', {\r\n                r: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                g: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                b: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                }\r\n            } )\r\n\r\n validator.add( 'ColorStructure', {\r\n                color_from_type: {\r\n                    type: 'ColorType'\r\n                },\r\n                col_from_schema: {\r\n                    type: 'ColorSchema'\r\n                },\r\n                col_from_fn:     {\r\n                    // Inner function\r\n\t                // Usefull for specific validation requirement that cannot match other previous validation schema or type\r\n                    fn: function ColorValidator ( color ) {\r\n\r\n                        const r = color.r\r\n                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const g = color.g\r\n                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const b = color.b\r\n                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    }\r\n                }\r\n            } )\r\n\r\n // The data to validate\r\n const colorStruct = {\r\n                color_from_type: {\r\n                    r: 0,\r\n                    g: 1,\r\n                    b: 2\r\n                },\r\n                col_from_schema: {\r\n                    r: 10,\r\n                    g: 20,\r\n                    b: 30\r\n                },\r\n                col_from_fn:     {\r\n                    r: 0,\r\n                    g: 127,\r\n                    b: 255\r\n                }\r\n            }\r\n\r\n // Execute\r\n\r\n try {\r\n\r\n    if ( validator.check( colorStruct, 'ColorStructure' ) ) {\r\n        alert( 'ColorStructure is valid !' )\r\n    } else {\r\n        alert( validator.errors )\r\n    }\r\n\r\n} catch ( err ) {\r\n    alert( err )\r\n}\r\n *\r\n */\r\n\r\nimport {\r\n    isNullOrUndefined,\r\n    isDefined\r\n}                    from './voids'\r\nimport {\r\n    isFunction,\r\n    isNotFunction\r\n}                    from './functions'\r\nimport { isBoolean } from './booleans'\r\nimport {\r\n    isNumber,\r\n    isInteger,\r\n    isFloat\r\n}                    from './numbers'\r\nimport { isArray }   from './arrays'\r\nimport { isSymbol }  from './symbols'\r\nimport {\r\n    isString,\r\n    isNotString\r\n}                    from './strings'\r\nimport {\r\n    isObject,\r\n    isNotObject\r\n}                    from './objects'\r\n\r\nclass Validator {\r\n\r\n    constructor () {\r\n\r\n        /**\r\n         * The validators store, by default it contains validators for Boolean, Number, Integer, Float, Array, String, Object, Symbol and Function\r\n         *\r\n         * @type {(function|object)}\r\n         */\r\n        this.validators = {\r\n            Boolean:  isBoolean,\r\n            Number:   isNumber,\r\n            Integer:  isInteger,\r\n            Float:    isFloat,\r\n            Array:    isArray,\r\n            String:   isString,\r\n            Object:   isObject,\r\n            Symbol:   isSymbol,\r\n            Function: isFunction\r\n        }\r\n\r\n        /**\r\n         * The list of errors occured during the check\r\n         *\r\n         * @type {Array.<string>}\r\n         */\r\n        this.errors = []\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a new validator schema to the validator instance\r\n     *\r\n     * @param type {string} - A string that represent the type of data to validate\r\n     * @param validator {(function|object)} - A function or validation schema that represent the type of data to validate\r\n     */\r\n    add ( type, validator ) {\r\n\r\n        if ( isNotString( type ) ) { throw new TypeError( `Validator: Expect type to be a string` ) }\r\n        if ( isNotFunction( validator ) && isNotObject( validator ) ) { throw new TypeError( `Validator: Expect validator to be an object or a function` ) }\r\n        if ( isDefined( this.validators[ type ] ) ) { throw new TypeError( `Validator: a validator is already defined for type '${type}'` ) }\r\n\r\n        this.validators[ type ] = validator\r\n\r\n    }\r\n\r\n    /**\r\n     * To remove a registered type\r\n     *\r\n     * @param type {string} - The type to remove\r\n     */\r\n    remove ( type ) {\r\n\r\n        delete this.validators[ type ]\r\n\r\n    }\r\n\r\n    /**\r\n     * Allow to known the available types store in current validator instance\r\n     *\r\n     * @return {Array.<string>} - The list of registered type\r\n     */\r\n    getAvalaibleTypes () {\r\n\r\n        const availablesTypes = []\r\n\r\n        for ( let key in this.validators ) {\r\n            availablesTypes.push( key )\r\n        }\r\n\r\n        return availablesTypes\r\n\r\n    }\r\n\r\n    /**\r\n     * Will perform a deep structural comparison between the given data and the validation schema of the given type\r\n     *\r\n     * @param data {any} - The data to validate\r\n     * @param type {string} - The type of the validation schema to apply\r\n     * @param breakOnError {boolean} - Return on first validation error ( true by default )\r\n     * @return {boolean} - Return true is the data is validated, false otherwise\r\n     */\r\n    check ( data, type, breakOnError = true ) {\r\n\r\n        const validator = this.validators[ type ]\r\n        if ( isNullOrUndefined( validator ) ) {\r\n            throw new TypeError( `Validator: Unable to find schema validation of type '${type}'` )\r\n        }\r\n\r\n        let result = true\r\n        if ( isFunction( validator ) ) {\r\n\r\n            result = validator( data )\r\n\r\n        } else if ( isObject( validator ) ) {\r\n\r\n            let subResult = true\r\n            for ( let key in validator ) {\r\n\r\n                const subValidator = validator[ key ]\r\n                if ( isNullOrUndefined( subValidator ) ) {\r\n                    throw new TypeError( `Validator: Missing validator for key '${key}' of type '${type}'` )\r\n                }\r\n\r\n                const value      = data[ key ]\r\n                const isRequired = subValidator.required\r\n                if ( isNullOrUndefined( value ) ) {\r\n                    if ( isRequired ) {\r\n                        subResult = false\r\n                    } else {\r\n                        continue\r\n                    }\r\n                }\r\n\r\n                // In case of overriden validation function check it first\r\n                let validatorFunction = subValidator.fn\r\n                if ( isDefined( validatorFunction ) ) {\r\n\r\n                    if ( isNotFunction( validatorFunction ) ) {\r\n                        throw new TypeError( `Validator: Invalid validation function for '${key}' with type '${type}'` )\r\n                    }\r\n\r\n                    subResult = validatorFunction( value )\r\n\r\n                } else {\r\n\r\n                    subResult = this.check( value, subValidator.type, breakOnError )\r\n\r\n                }\r\n\r\n                if ( subResult === false ) {\r\n\r\n                    this.errors.push( `Validator: Invalid property '${key}' of type '${subValidator.type}' with value '${value}' in object of type '${type}'` )\r\n                    result = false\r\n                    if ( breakOnError ) {\r\n                        break\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new TypeError( `Validator: Unknown validator of type '${type}'` )\r\n\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The singleton instance\r\n *\r\n * @type {Validator}\r\n */\r\nlet validatorInstance = undefined\r\nif ( isNullOrUndefined( validatorInstance ) ) {\r\n    validatorInstance = new Validator()\r\n}\r\n\r\nexport { validatorInstance as Validator }\r\n"],"names":["isNull","data","isNotNull","isUndefined","isNotUndefined","isNullOrUndefined","isDefined","isEmpty","undefined","length","key","Object","prototype","hasOwnProperty","call","isNotEmpty","isString","String","isNotString","isEmptyString","console","assert","isNotEmptyString","TypeError","isBlankString","test","isNotBlankString","isObject","Array","isArray","isNotObject","isEmptyObject","isNotEmptyObject","isNotArray","isArrayOfNull","dataLength","index","isNotArrayOfNull","isEmptyArray","isNotEmptyArray","isArrayOfUndefined","arrayLength","isNotArrayOfUndefined","isArrayOfArray","isNotArrayOfArray","isArrayOfString","isNotArrayOfString","isArrayOfSingleElement","isArrayOfMultiElement","isArrayOfObject","isNotArrayOfObject","isBoolean","isNotBoolean","isFunction","isNotFunction","isNumber","Number","isNaN","isNumber_1","isNotNumber","isNumberPositive","isNumberNegative","isNumeric","isNotNumeric","isInteger","POSITIVE_INFINITY","isFloat","isZero","isZeroPositive","isZeroNegative","NEGATIVE_INFINITY","isMinSafeInteger","MIN_SAFE_INTEGER","isMinPositive","MIN_VALUE","isMinNegative","isMaxSafeInteger","MAX_SAFE_INTEGER","isMaxPositive","MAX_VALUE","isMaxNegative","isFinite","isInfinite","isInfiniteNegative","isInfinitePositive","isSymbol","isNotSymbol","isKelvin","ABSOLUTE_ZERO_KELVIN","isNotKelvin","isCelsius","ABSOLUTE_ZERO_CELSIUS","isNotCelsius","isFahrenheit","ABSOLUTE_ZERO_FAHRENHEIT","isNotFahrenheit","isTemperature","isNotTemperature","Validator","[object Object]","this","validators","Boolean","Integer","Float","Symbol","Function","errors","type","validator","availablesTypes","push","breakOnError","result","subResult","subValidator","value","isRequired","required","validatorFunction","fn","check","validatorInstance"],"mappings":"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"}