{"version":3,"file":"itee-validators.umd.min.js","sources":["../sources/cores/arrays/isArray.js","../sources/cores/arrays/isEmptyArray.js","../sources/cores/arrays/isArrayOfArray.js","../sources/cores/arrays/isArrayOfMultiElement.js","../sources/cores/voids/isNull.js","../sources/cores/arrays/isArrayOfNull.js","../sources/cores/voids/isDefined.js","../sources/cores/objects/isObject.js","../sources/cores/arrays/isArrayOfObject.js","../sources/cores/arrays/isArrayOfSingleElement.js","../sources/cores/strings/isString.js","../sources/cores/arrays/isArrayOfString.js","../sources/cores/voids/isUndefined.js","../sources/cores/arrays/isArrayOfUndefined.js","../sources/cores/booleans/isBoolean.js","../sources/cores/booleans/isTrue.js","../sources/cores/functions/isFunction.js","../sources/cores/numbers/isZero.js","../sources/cores/numbers/isNumber.js","../sources/cores/numbers/isInfinite.js","../sources/cores/numbers/isMax.js","../sources/cores/numbers/isMin.js","../sources/cores/numbers/isSafeInteger.js","../sources/cores/objects/isEmptyObject.js","../sources/cores/strings/isEmptyString.js","../sources/cores/strings/isBlankString.js","../sources/cores/symbols/isSymbol.js","../sources/cores/voids/isEmpty.js","../sources/cores/typed_arrays/isArrayBuffer.js","../sources/cores/typed_arrays/isBigInt64Array.js","../sources/cores/typed_arrays/isBigUint64Array.js","../sources/cores/typed_arrays/isFloat32Array.js","../sources/cores/typed_arrays/isFloat64Array.js","../sources/cores/typed_arrays/isInt16Array.js","../sources/cores/typed_arrays/isInt32Array.js","../sources/cores/typed_arrays/isInt8Array.js","../sources/cores/typed_arrays/isUint16Array.js","../sources/cores/typed_arrays/isUint32Array.js","../sources/cores/typed_arrays/isUint8Array.js","../sources/cores/typed_arrays/isUint8ClampedArray.js","../sources/physics/temperatures/isCelsius.js","../sources/physics/temperatures/isFahrenheit.js","../sources/physics/temperatures/isKelvin.js","../sources/physics/temperatures/isTemperature.js","../sources/cores/cores.js","../sources/physics/temperatures/constants.js"],"sourcesContent":["/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array or not\r\n * @example\r\n *\r\n * import { isArray } from 'itee-validators'\r\n *\r\n * if( isArray( value ) ) {\r\n *     //...\r\n * } else {\r\n *     //...\r\n * }\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is array, false otherwise\r\n */\r\nexport function isArray ( data ) {\r\n    return Array.isArray( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\n\r\n// Not exported alternative for benchmark\r\nexport function isArray_0 ( data ) {\r\n    return data instanceof Array\r\n}\r\n\r\n// #endif\r\n\r\n////////////////////\r\n\r\n/**\r\n * Check if given data is not an array\r\n *\r\n * @param data {*} The data to check against the array type\r\n * @returns {boolean} true if data is not array, false otherwise\r\n */\r\nexport function isNotArray ( data ) {\r\n    return !Array.isArray( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\n\r\nexport function isNotArray_0 ( data ) {\r\n    return !isArray( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is an empty array, false otherwise\r\n */\r\nexport function isEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n///////\r\n\r\n/**\r\n * Check if given data is not an empty array\r\n *\r\n * @param data {*} The data to check against the empty array\r\n * @returns {boolean} true if data is not an empty array, false otherwise\r\n */\r\nexport function isNotEmptyArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n\r\n    return ( data.length > 0 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isArray,\r\n    isNotArray\r\n}                       from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is an array of array, false otherwise\r\n */\r\nexport function isArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is not an array of array\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an array of array, false otherwise\r\n */\r\nexport function isNotArrayOfArray ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isArray( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with multiples values\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with multiples values, false otherwise\r\n */\r\nexport function isArrayOfMultiElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    return ( data.length > 1 )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/voids\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is null, false otherwise.\r\n */\r\nexport function isNull ( data ) {\r\n    return ( data === null )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is not null\r\n *\r\n * @param data {*} The data to check against the nullity\r\n * @returns {boolean} true if data is not null, false otherwise.\r\n */\r\nexport function isNotNull ( data ) {\r\n    return ( data !== null )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNull }    from '../voids/isNull'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are null, false otherwise\r\n */\r\nexport function isArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not null\r\n *\r\n * @param data {*} The data to check against the array of array type\r\n * @returns {boolean} true if data is not an empty array where all values are not null, false otherwise\r\n */\r\nexport function isNotArrayOfNull ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotNull( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/voids\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is not null and not undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is not null and not undefined, false otherwise.\r\n */\r\nexport function isDefined ( data ) {\r\n    return ( ( data !== null ) && ( typeof data !== 'undefined' ) )\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is null or undefined\r\n *\r\n * @param data {*} The data to check against the existence\r\n * @returns {boolean} true if data is null or undefined, false otherwise.\r\n */\r\nexport function isNotDefined ( data ) {\r\n    return ( ( data === null ) || ( typeof data === 'undefined' ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/objects\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotDefined } from '../voids/isDefined'\r\n\r\n/**\r\n * Check if given data is an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is object, false otherwise\r\n */\r\nexport function isObject ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Object )\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an object\r\n *\r\n * @param data {*} The data to check against the object type\r\n * @returns {boolean} true if data is not an object, false otherwise\r\n */\r\nexport function isNotObject ( data ) {\r\n    return !isObject( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject }  from '../objects/isObject'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is an array where all values are of object type, false otherwise\r\n */\r\nexport function isArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an array where all values are of object type\r\n *\r\n * @param data {*} The data to check against the array of object type\r\n * @returns {boolean} true if data is not an array where all values are of object type, false otherwise\r\n */\r\nexport function isNotArrayOfObject ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotObject( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotArray } from './isArray'\r\n\r\n/**\r\n * Check if given data is an array with a single value\r\n *\r\n * @param data {*} The data to check against the single valued array\r\n * @returns {boolean} true if data is an array with a single value, false otherwise\r\n */\r\nexport function isArrayOfSingleElement ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n\r\n    if ( data.length !== 1 ) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/strings\r\n * @desc Export function to validate if a value is a string\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is a string, false otherwise.\r\n */\r\nexport function isString ( data ) {\r\n    return ( typeof data === 'string' || data instanceof String )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isString_0 ( val ) {\r\n    return ( typeof val === 'string' )\r\n}\r\n\r\nexport function isString_1 ( val ) {\r\n    return ( typeof val === 'string' || ( ( !!val && typeof val === 'object' ) && Object.prototype.toString.call( val ) === '[object String]' ) )\r\n}\r\n\r\nexport function isString_2 ( val ) {\r\n    return ( Object.prototype.toString.call( val ) === '[object String]' )\r\n}\r\n\r\nexport function isString_3 ( val ) {\r\n    return ( val !== null && val !== undefined && val.constructor === String )\r\n}\r\n\r\nexport function isString_4 ( val ) {\r\n    return ( val === val + '' )\r\n}\r\n\r\n// #endif\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a string\r\n *\r\n * @param data {*} The data to check against the string type\r\n * @returns {boolean} true if data is not a string, false otherwise.\r\n */\r\nexport function isNotString ( data ) {\r\n    return !isString( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString }  from '../strings/isString'\r\nimport { isNotArray }   from './isArray'\r\nimport { isEmptyArray } from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are string, false otherwise\r\n */\r\nexport function isArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isArrayOfString_1 ( data ) {\r\n\r\n    if ( !Array.isArray( data ) ) {\r\n        return false\r\n    }\r\n\r\n    const dataLength = data.length\r\n    if ( dataLength === 0 ) {\r\n        return false\r\n    }\r\n\r\n    for ( let index = 0, arrayLength = data.length ; index < arrayLength ; index += 1 ) {\r\n        if ( typeof data[ index ] !== 'string' ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n// #endif\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are not string\r\n *\r\n * @param data {*} The data to check against the array of strings\r\n * @returns {boolean} true if data is not an empty array where all values are not string, false otherwise\r\n */\r\nexport function isNotArrayOfString ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotString( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/voids\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is undefined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is undefined, false otherwise.\r\n */\r\nexport function isUndefined ( data ) {\r\n    return ( typeof data === 'undefined' )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is defined\r\n *\r\n * @param data {*} The data to check against the undefiness\r\n * @returns {boolean} true if data is defined, false otherwise.\r\n */\r\nexport function isNotUndefined ( data ) {\r\n    return ( typeof data !== 'undefined' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/arrays\r\n * @desc Export function to validate if a value is an array of array or not\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotUndefined } from '../voids/isUndefined'\r\nimport { isNotArray }     from './isArray'\r\nimport { isEmptyArray }   from './isEmptyArray'\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are undefined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are undefined, false otherwise\r\n */\r\nexport function isArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return false }\r\n    if ( isEmptyArray( data ) ) { return false }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty array where all values are defined\r\n *\r\n * @param data {*} The data to check against the array of undefined\r\n * @returns {boolean} true if data is not an empty array where all values are defined, false otherwise\r\n */\r\nexport function isNotArrayOfUndefined ( data ) {\r\n\r\n    if ( isNotArray( data ) ) { return true }\r\n    if ( isEmptyArray( data ) ) { return true }\r\n\r\n    for ( let index = 0, dataLength = data.length ; index < dataLength ; index++ ) {\r\n        if ( isNotUndefined( data[ index ] ) ) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/booleans\r\n * @desc Export function to validate if a value is a boolean or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is a boolean, false otherwise.\r\n */\r\nexport function isBoolean ( data ) {\r\n    return ( typeof data === 'boolean' )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isBoolean_alt ( value ) {\r\n    return typeof value === 'boolean' || ( typeof value === 'object' && value !== null && typeof value.valueOf() === 'boolean' )\r\n}\r\n\r\n// #endif\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a boolean\r\n *\r\n * @param data {*} The data to check against the booleaness\r\n * @returns {boolean} true if data is not a boolean, false otherwise.\r\n */\r\nexport function isNotBoolean ( data ) {\r\n    return ( typeof data !== 'boolean' )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isNotBoolean_negbase ( data ) {\r\n    return !isBoolean( data )\r\n}\r\n\r\n// #endif\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { isBoolean } from './isBoolean'\r\n\r\nexport function isTrue ( value ) {\r\n    return ( isBoolean( value ) && ( value === true ) )\r\n}\r\n\r\nexport function isFalse ( value ) {\r\n    return ( isBoolean( value ) && ( value === false ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/functions\r\n * @desc Export function to validate if a value is a function or not\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is a function, false otherwise.\r\n */\r\nexport function isFunction ( data ) {\r\n    return ( typeof data === 'function' )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if given data is not a function\r\n *\r\n * @param data {*} The data to check against the functionality\r\n * @returns {boolean} true if data is not a function, false otherwise.\r\n */\r\nexport function isNotFunction ( data ) {\r\n    return ( typeof data !== 'function' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isZero\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is zero\r\n *\r\n * @param data {*} The data to check against the zero value\r\n * @returns {boolean} true if data is zero, false otherwise\r\n */\r\nexport function isZero ( data ) {\r\n    return ( data === 0 )\r\n}\r\n\r\n/**\r\n * Check if the given data is a positive zero\r\n *\r\n * @param data {*} The data to check against the positive zero value\r\n * @returns {boolean} true if data is a positive zero, false otherwise\r\n */\r\nexport function isZeroPositive ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is a negative zero\r\n *\r\n * @param data {*} The data to check against the negative zero value\r\n * @returns {boolean} true if data is a negative zero, false otherwise\r\n */\r\nexport function isZeroNegative ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.NEGATIVE_INFINITY )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isNumber\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotDefined }   from '../voids/isDefined'\r\nimport {\r\n    isInfinite,\r\n    isInfinitePositive\r\n}                         from './isInfinite'\r\nimport { isZeroPositive } from './isZero'\r\n\r\n/**\r\n * Check if given data is a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a number, false otherwise.\r\n */\r\nexport function isNumber ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n\r\n    return ( data.constructor === Number )\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isNumber_0 ( data ) {\r\n    return ( typeof data === 'number' && !Number.isNaN( data ) )\r\n}\r\n\r\nexport function isNumber_1 ( data ) {\r\n    return ( Number( data ) === data )\r\n}\r\n\r\n// #endif\r\n\r\n/**\r\n * Check if the data is a positive number\r\n *\r\n * @param data {*} The data to check against the positivity\r\n * @returns {boolean} true if data is a positive number, false otherwise.\r\n */\r\nexport function isNumberPositive ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n\r\n    return ( data > 0 || isZeroPositive( data ) || isInfinitePositive( data ) )\r\n\r\n}\r\n\r\n/**\r\n * Check if the data is a negative number\r\n *\r\n * @param data {*} The data to check against the negativity\r\n * @returns {boolean} true if data is a negative number, false otherwise.\r\n */\r\nexport function isNumberNegative ( data ) {\r\n    return ( isNumber( data ) && data < 0 )\r\n}\r\n\r\n//////\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the number type\r\n * @returns {boolean} true if data is not of type number or not a number, false otherwise.\r\n */\r\nexport function isNotNumber ( data ) {\r\n    return !( isNumber( data ) )\r\n}\r\n\r\n/////////\r\n\r\n//Todo: isInRange(x, y, value, xInclusive, yInclusive)\r\n//Todo: isInRangeZeroOne(value, zeroInclusive, oneInclusive) //inclusive\r\n\r\n/////////\r\n\r\n/**\r\n * Check if the given data is an integer number\r\n *\r\n * @param data {*} The data to check against the integer state\r\n * @returns {boolean} true if data is an integer, false otherwise\r\n */\r\nexport function isInteger ( data ) {\r\n    return Number.isInteger( data )\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isInteger_0 ( data ) {\r\n    return ( data === 0 && ( 1 / data ) === Number.POSITIVE_INFINITY )\r\n}\r\n\r\nexport function isInteger_1 ( data ) {\r\n    return data % 1 === 0\r\n}\r\n\r\nexport function isInteger_2 ( n ) {\r\n    return n === +n && n === ( n | 0 )\r\n}\r\n\r\nexport function isInteger_3 ( nVal ) {\r\n    return typeof nVal === 'number' && isFinite( nVal ) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor( nVal ) === nVal\r\n}\r\n\r\n// #endif\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is a floating point number\r\n *\r\n * @param data {*} The data to check against the floating point\r\n * @returns {boolean} true if data is a float, false otherwise\r\n */\r\nexport function isFloat ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n    if ( isInfinite( data ) ) { return false}\r\n\r\n    return data % 1 !== 0\r\n\r\n}\r\n\r\n// #if IS_REMOVE\r\nexport function isFloat_1 ( n ) {\r\n    return n === +n && n !== ( n | 0 )\r\n}\r\n\r\nexport function isFloat_2 ( x ) {\r\n    return !!( x % 1 )\r\n}\r\n\r\n// #endif\r\n\r\n////////\r\n\r\n/**\r\n * Check if given data is not a number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is not a number, false otherwise.\r\n */\r\nexport function isNaN ( data ) {\r\n    return Number.isNaN( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isInfinite\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotNumber } from './isNumber'\r\n\r\n/**\r\n * Check if the given data is an infinite number\r\n *\r\n * @param data {*} The data to check against the infinite state\r\n * @returns {boolean} true if data is infinite, false otherwise\r\n */\r\nexport function isInfinite ( data ) {\r\n\r\n    if ( isNotNumber( data ) ) { return false }\r\n    if ( Number.isNaN( data ) ) { return false }\r\n\r\n    return !Number.isFinite( data )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite negative number\r\n *\r\n * @param data {*} The data to check against the negative infinite state\r\n * @returns {boolean} true if data is negative infinite, false otherwise\r\n */\r\nexport function isInfiniteNegative ( data ) {\r\n    return ( data === Number.NEGATIVE_INFINITY )\r\n}\r\n\r\n/**\r\n * Check if the given data is an infinite positive number\r\n *\r\n * @param data {*} The data to check against the positive infinite state\r\n * @returns {boolean} true if data is positive infinite, false otherwise\r\n */\r\nexport function isInfinitePositive ( data ) {\r\n    return ( data === Number.POSITIVE_INFINITY )\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check if the given data is a finite number\r\n *\r\n * @param data {*} The data to check against the finite state\r\n * @returns {boolean} true if data is finite, false otherwise\r\n */\r\nexport function isFinite ( data ) {\r\n    return Number.isFinite( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isMax\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum positive number\r\n *\r\n * @param data {*} The data to check against the positive maximum state\r\n * @returns {boolean} true if data is positive maximum, false otherwise\r\n */\r\nexport function isMaxPositive ( data ) {\r\n    return ( data === Number.MAX_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a maximum negative number\r\n *\r\n * @param data {*} The data to check against the maximum infinite state\r\n * @returns {boolean} true if data is negative maximum, false otherwise\r\n */\r\nexport function isMaxNegative ( data ) {\r\n    return ( data === -Number.MAX_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isMin\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a minimum positive number\r\n *\r\n * @param data {*} The data to check against the positive minimum state\r\n * @returns {boolean} true if data is positive minimum, false otherwise\r\n */\r\nexport function isMinPositive ( data ) {\r\n    return ( data === Number.MIN_VALUE )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum negative number\r\n *\r\n * @param data {*} The data to check against the minimum infinite state\r\n * @returns {boolean} true if data is negative minimum, false otherwise\r\n */\r\nexport function isMinNegative ( data ) {\r\n    return ( data === -Number.MIN_VALUE )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/numbers/isSafeInteger\r\n * @desc Export function to validate if a value is a finite number\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if the given data is a maximum safe integer number\r\n *\r\n * @param data {*} The data to check against the maximum safe integer state\r\n * @returns {boolean} true if data is a maximum safe integer, false otherwise\r\n */\r\nexport function isMaxSafeInteger ( data ) {\r\n    return ( data === Number.MAX_SAFE_INTEGER )\r\n}\r\n\r\n/**\r\n * Check if the given data is a minimum safe integer number\r\n *\r\n * @param data {*} The data to check against the minimum safe integer state\r\n * @returns {boolean} true if data is a minimum safe integer, false otherwise\r\n */\r\nexport function isMinSafeInteger ( data ) {\r\n    return ( data === Number.MIN_SAFE_INTEGER )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/objects\r\n * @desc Export function to validate if a value is an object\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotObject } from './isObject'\r\n\r\n/**\r\n * Check if given data is an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is an empty object, false otherwise\r\n */\r\nexport function isEmptyObject ( data ) {\r\n\r\n    if ( isNotObject( data ) ) { return false }\r\n\r\n    if ( data.length === 0 ) {\r\n        return true\r\n    }\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    for ( let key in data ) {\r\n        if ( Object.prototype.hasOwnProperty.call( data, key ) ) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty object\r\n *\r\n * @param data {*} The data to check against the emptiness of the object\r\n * @returns {boolean} true if data is not an empty object, false otherwise\r\n */\r\nexport function isNotEmptyObject ( data ) {\r\n    return !( isEmptyObject( data ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/strings\r\n * @desc Export function to validate if a value is a string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNotString } from './isString'\r\n\r\n/**\r\n * Check if given data is an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is an empty string, false otherwise.\r\n */\r\nexport function isEmptyString ( data ) {\r\n\r\n    if ( isNotString( data ) ) {\r\n        return false\r\n    }\r\n\r\n    return ( data.length === 0 )\r\n\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if given data is not an empty string\r\n *\r\n * @param data {*} The data to check against the emptiness of the string\r\n * @returns {boolean} true if data is not an empty string, false otherwise.\r\n */\r\nexport function isNotEmptyString ( data ) {\r\n\r\n    return !( isEmptyString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/strings\r\n * @desc Export function to validate if a value is a string\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyString } from './isEmptyString'\r\nimport { isNotString }   from './isString'\r\n\r\n/**\r\n * Check if the given data is a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is a blank string, false otherwise.\r\n */\r\nexport function isBlankString ( data ) {\r\n\r\n    if ( isNotString( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return false }\r\n\r\n    return ( !/\\S/.test( data ) )\r\n}\r\n\r\n////\r\n\r\n/**\r\n * Check if the given data is not a blank string\r\n *\r\n * @param data {*} The data to check against the blankness of the string\r\n * @returns {boolean} true if data is not a blank string, false otherwise.\r\n */\r\nexport function isNotBlankString ( data ) {\r\n\r\n    return !( isBlankString( data ) )\r\n\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/symbols\r\n * @desc Export function to validate if a value is a symbol\r\n * @example todo\r\n *\r\n */\r\n\r\n/**\r\n * Check if given data is a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is a symbol, false otherwise.\r\n */\r\nexport function isSymbol ( data ) {\r\n    return ( typeof data === 'symbol' )\r\n}\r\n\r\n/////\r\n\r\n/**\r\n * Check if given data is not a symbol\r\n *\r\n * @param data {*} The data to check against the symbol type\r\n * @returns {boolean} true if data is not a symbol, false otherwise.\r\n */\r\nexport function isNotSymbol ( data ) {\r\n    return ( typeof data !== 'symbol' )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/voids\r\n * @desc Export function to validate if a value is a void\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isEmptyArray }  from '../arrays/isEmptyArray'\r\nimport { isEmptyObject } from '../objects/isEmptyObject'\r\nimport { isEmptyString } from '../strings/isEmptyString'\r\nimport { isNotDefined }  from './isDefined'\r\n\r\n/**\r\n * Check emptiness of given data\r\n *\r\n * See: https://stackoverflow.com/questions/4346186/how-to-determine-if-a-function-is-empty\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as empty, false otherwise.\r\n */\r\nexport function isEmpty ( data ) {\r\n\r\n    if ( isNotDefined( data ) ) { return false }\r\n    if ( isEmptyString( data ) ) { return true}\r\n    if ( isEmptyArray( data ) ) { return true }\r\n    if ( isEmptyObject( data ) ) { return true }\r\n\r\n    return false\r\n\r\n}\r\n\r\n///\r\n\r\n/**\r\n * Check fullness of given data\r\n *\r\n * @param data {*} The data to check against the emptiness\r\n * @returns {boolean} true if data is considered as not empty, false otherwise.\r\n */\r\nexport function isNotEmpty ( data ) {\r\n    return !isEmpty( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isArrayBuffer ( data ) {\r\n    return ( data instanceof ArrayBuffer )\r\n}\r\n\r\nexport function isNotArrayBuffer ( data ) {\r\n    return !isArrayBuffer( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isBigInt64Array ( data ) {\r\n    return ( data instanceof BigInt64Array )\r\n}\r\n\r\nexport function isNotBigInt64Array ( data ) {\r\n    return !isBigInt64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isBigUint64Array ( data ) {\r\n    return ( data instanceof BigUint64Array )\r\n}\r\n\r\nexport function isNotBigUint64Array ( data ) {\r\n    return !isBigUint64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isFloat32Array ( data ) {\r\n    return ( data instanceof Float32Array )\r\n}\r\n\r\nexport function isNotFloat32Array ( data ) {\r\n    return !isFloat32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isFloat64Array ( data ) {\r\n    return ( data instanceof Float64Array )\r\n}\r\n\r\nexport function isNotFloat64Array ( data ) {\r\n    return !isFloat64Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isInt16Array ( data ) {\r\n    return ( data instanceof Int16Array )\r\n}\r\n\r\nexport function isNotInt16Array ( data ) {\r\n    return !isInt16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isInt32Array ( data ) {\r\n    return ( data instanceof Int32Array )\r\n}\r\n\r\nexport function isNotInt32Array ( data ) {\r\n    return !isInt32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isInt8Array ( data ) {\r\n    return ( data instanceof Int8Array )\r\n}\r\n\r\nexport function isNotInt8Array ( data ) {\r\n    return !isInt8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isUint16Array ( data ) {\r\n    return ( data instanceof Uint16Array )\r\n}\r\n\r\nexport function isNotUint16Array ( data ) {\r\n    return !isUint16Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isUint32Array ( data ) {\r\n    return ( data instanceof Uint32Array )\r\n}\r\n\r\nexport function isNotUint32Array ( data ) {\r\n    return !isUint32Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isUint8Array ( data ) {\r\n    return ( data instanceof Uint8Array )\r\n}\r\n\r\nexport function isNotUint8Array ( data ) {\r\n    return !isUint8Array( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nexport function isUint8ClampedArray ( data ) {\r\n    return ( data instanceof Uint8ClampedArray )\r\n}\r\n\r\nexport function isNotUint8ClampedArray ( data ) {\r\n    return !isUint8ClampedArray( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }              from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_CELSIUS } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isCelsius ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_CELSIUS )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotCelsius ( data ) {\r\n    return !isCelsius( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }                 from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_FAHRENHEIT } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isFahrenheit ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_FAHRENHEIT )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotFahrenheit ( data ) {\r\n    return !isFahrenheit( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport { isNumber }             from '../../cores/numbers/isNumber'\r\nimport { ABSOLUTE_ZERO_KELVIN } from './constants'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isKelvin ( data ) {\r\n    return ( isNumber( data ) && data >= ABSOLUTE_ZERO_KELVIN )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotKelvin ( data ) {\r\n    return !isKelvin( data )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module physics/temperatues\r\n * @desc Export function to validate if a value is a temperature\r\n * @example todo\r\n *\r\n */\r\n\r\nimport {\r\n    isCelsius,\r\n    isNotCelsius\r\n} from './isCelsius'\r\nimport {\r\n    isFahrenheit,\r\n    isNotFahrenheit\r\n} from './isFahrenheit'\r\nimport {\r\n    isKelvin,\r\n    isNotKelvin\r\n} from './isKelvin'\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean|*|boolean}\r\n */\r\nexport function isTemperature ( data ) {\r\n    return ( isKelvin( data ) || isCelsius( data ) || isFahrenheit( data ) )\r\n}\r\n\r\n///\r\n\r\n/**\r\n *\r\n * @param data\r\n * @return {boolean}\r\n */\r\nexport function isNotTemperature ( data ) {\r\n    return ( isNotKelvin( data ) && isNotCelsius( data ) && isNotFahrenheit( data ) )\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module cores/cores\r\n * @description Export the Validator singleton instance that allow to validate complex data structure\r\n * @example\r\n *\r\n const validator = Itee.Validators.Validator\r\n\r\n // Using unique function for One registered type\r\n // Usefull when a simple data structure is used multiple times\r\n validator.add( 'ColorType', color => {\r\n\r\n                const r = color.r\r\n                if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                    return false\r\n                }\r\n\r\n                const g = color.g\r\n                if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                    return false\r\n                }\r\n\r\n                const b = color.b\r\n                if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                    return false\r\n                }\r\n\r\n                return true\r\n            } )\r\n\r\n // Using schema composition\r\n // Usefull for design validation schema faster and based on previous declared validation types\r\n validator.add( 'Range_0_255', ( value ) => {\r\n\r\n                if ( Itee.Validators.isNotNumber( value ) ) {\r\n                    return false\r\n                }\r\n\r\n                return !(value < 0 || value > 255)\r\n\r\n            } )\r\n\r\n validator.add( 'ColorSchema', {\r\n                r: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                g: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                },\r\n                b: {\r\n                    required: true,\r\n                    type:     'Range_0_255'\r\n                }\r\n            } )\r\n\r\n validator.add( 'ColorStructure', {\r\n                color_from_type: {\r\n                    type: 'ColorType'\r\n                },\r\n                col_from_schema: {\r\n                    type: 'ColorSchema'\r\n                },\r\n                col_from_fn:     {\r\n                    // Inner function\r\n\t                // Usefull for specific validation requirement that cannot match other previous validation schema or type\r\n                    fn: function ColorValidator ( color ) {\r\n\r\n                        const r = color.r\r\n                        if ( color.r === undefined || Itee.Validators.isNotNumber( r ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const g = color.g\r\n                        if ( color.g === undefined || Itee.Validators.isNotNumber( g ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        const b = color.b\r\n                        if ( color.b === undefined || Itee.Validators.isNotNumber( b ) ) {\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    }\r\n                }\r\n            } )\r\n\r\n // The data to validate\r\n const colorStruct = {\r\n                color_from_type: {\r\n                    r: 0,\r\n                    g: 1,\r\n                    b: 2\r\n                },\r\n                col_from_schema: {\r\n                    r: 10,\r\n                    g: 20,\r\n                    b: 30\r\n                },\r\n                col_from_fn:     {\r\n                    r: 0,\r\n                    g: 127,\r\n                    b: 255\r\n                }\r\n            }\r\n\r\n // Execute\r\n\r\n try {\r\n\r\n    if ( validator.check( colorStruct, 'ColorStructure' ) ) {\r\n        alert( 'ColorStructure is valid !' )\r\n    } else {\r\n        alert( validator.errors )\r\n    }\r\n\r\n} catch ( err ) {\r\n    alert( err )\r\n}\r\n *\r\n */\r\n\r\nimport { isArray }   from './arrays/_arrays'\r\nimport { isBoolean } from './booleans/_booleans'\r\nimport {\r\n    isFunction,\r\n    isNotFunction\r\n}                    from './functions/_functions'\r\nimport {\r\n    isFloat,\r\n    isInteger,\r\n    isNumber\r\n}                    from './numbers/_numbers'\r\nimport {\r\n    isNotObject,\r\n    isObject\r\n}                    from './objects/_objects'\r\nimport {\r\n    isNotString,\r\n    isString\r\n}                    from './strings/_strings'\r\nimport { isSymbol }  from './symbols/_symbols'\r\nimport {\r\n    isDefined,\r\n    isNotDefined\r\n}                    from './voids/_voids'\r\n\r\nclass Validator {\r\n\r\n    constructor () {\r\n\r\n        /**\r\n         * The validators store, by default it contains validators for Boolean, Number, Integer, Float, Array, String, Object, Symbol and Function\r\n         *\r\n         * @type {(function|object)}\r\n         */\r\n        this.validators = {\r\n            Boolean:  isBoolean,\r\n            Number:   isNumber,\r\n            Integer:  isInteger,\r\n            Float:    isFloat,\r\n            Array:    isArray,\r\n            String:   isString,\r\n            Object:   isObject,\r\n            Symbol:   isSymbol,\r\n            Function: isFunction\r\n        }\r\n\r\n        /**\r\n         * The list of errors occured during the check\r\n         *\r\n         * @type {Array.<string>}\r\n         */\r\n        this.errors = []\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a new validator schema to the validator instance\r\n     *\r\n     * @param type {string} - A string that represent the type of data to validate\r\n     * @param validator {(function|object)} - A function or validation schema that represent the type of data to validate\r\n     */\r\n    add ( type, validator ) {\r\n\r\n        if ( isNotString( type ) ) { throw new TypeError( `Validator: Expect type to be a string` ) }\r\n        if ( isNotFunction( validator ) && isNotObject( validator ) ) { throw new TypeError( `Validator: Expect validator to be an object or a function` ) }\r\n        if ( isDefined( this.validators[ type ] ) ) { throw new TypeError( `Validator: a validator is already defined for type '${type}'` ) }\r\n\r\n        this.validators[ type ] = validator\r\n\r\n    }\r\n\r\n    /**\r\n     * To remove a registered type\r\n     *\r\n     * @param type {string} - The type to remove\r\n     */\r\n    remove ( type ) {\r\n\r\n        delete this.validators[ type ]\r\n\r\n    }\r\n\r\n    /**\r\n     * Allow to known the available types store in current validator instance\r\n     *\r\n     * @return {Array.<string>} - The list of registered type\r\n     */\r\n    getAvalaibleTypes () {\r\n\r\n        const availablesTypes = []\r\n\r\n        for ( let key in this.validators ) {\r\n            availablesTypes.push( key )\r\n        }\r\n\r\n        return availablesTypes\r\n\r\n    }\r\n\r\n    /**\r\n     * Will perform a deep structural comparison between the given data and the validation schema of the given type\r\n     *\r\n     * @param data {*} - The data to validate\r\n     * @param type {string} - The type of the validation schema to apply\r\n     * @param breakOnError {boolean} - Return on first validation error ( true by default )\r\n     * @return {boolean} - Return true is the data is validated, false otherwise\r\n     */\r\n    check ( data, type, breakOnError = true ) {\r\n\r\n        const validator = this.validators[ type ]\r\n        if ( isNotDefined( validator ) ) {\r\n            throw new TypeError( `Validator: Unable to find schema validation of type '${type}'` )\r\n        }\r\n\r\n        let result = true\r\n        if ( isFunction( validator ) ) {\r\n\r\n            result = validator( data )\r\n\r\n        } else if ( isObject( validator ) ) {\r\n\r\n            let subResult = true\r\n            for ( let key in validator ) {\r\n\r\n                const subValidator = validator[ key ]\r\n                if ( isNotDefined( subValidator ) ) {\r\n                    throw new TypeError( `Validator: Missing validator for key '${key}' of type '${type}'` )\r\n                }\r\n\r\n                const value      = data[ key ]\r\n                const isRequired = subValidator.required\r\n                if ( isNotDefined( value ) ) {\r\n                    if ( isRequired ) {\r\n                        subResult = false\r\n                    } else {\r\n                        continue\r\n                    }\r\n                }\r\n\r\n                // In case of overriden validation function check it first\r\n                let validatorFunction = subValidator.fn\r\n                if ( isDefined( validatorFunction ) ) {\r\n\r\n                    if ( isNotFunction( validatorFunction ) ) {\r\n                        throw new TypeError( `Validator: Invalid validation function for '${key}' with type '${type}'` )\r\n                    }\r\n\r\n                    subResult = validatorFunction( value )\r\n\r\n                } else {\r\n\r\n                    subResult = this.check( value, subValidator.type, breakOnError )\r\n\r\n                }\r\n\r\n                if ( subResult === false ) {\r\n\r\n                    this.errors.push( `Validator: Invalid property '${key}' of type '${subValidator.type}' with value '${value}' in object of type '${type}'` )\r\n                    result = false\r\n                    if ( breakOnError ) {\r\n                        break\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new TypeError( `Validator: Unknown validator of type '${type}'` )\r\n\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The singleton instance\r\n *\r\n * @type {Validator}\r\n */\r\nlet validatorInstance = undefined\r\nif ( isNotDefined( validatorInstance ) ) {\r\n    validatorInstance = new Validator()\r\n}\r\n\r\nexport { validatorInstance as Validator }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @module physics/temperatues\r\n * @desc Export constants about temperatures\r\n * @example todo\r\n *\r\n */\r\n\r\nexport const ABSOLUTE_ZERO_KELVIN     = 0.00000000045\r\nexport const ABSOLUTE_ZERO_CELSIUS    = -273.14999999955\r\nexport const ABSOLUTE_ZERO_FAHRENHEIT = -459.67\r\n"],"names":["isArray","data","Array","isNotArray","isEmptyArray","length","isNotEmptyArray","isArrayOfArray","index","dataLength","isNotArrayOfArray","isArrayOfMultiElement","isNull","isNotNull","isArrayOfNull","isNotArrayOfNull","isDefined","isNotDefined","isObject","constructor","Object","isNotObject","isArrayOfObject","isNotArrayOfObject","isArrayOfSingleElement","isString","String","isNotString","isArrayOfString","isNotArrayOfString","isUndefined","isNotUndefined","isArrayOfUndefined","isNotArrayOfUndefined","isBoolean","isNotBoolean","isTrue","value","isFalse","isFunction","isNotFunction","isZero","isZeroPositive","Number","POSITIVE_INFINITY","isZeroNegative","NEGATIVE_INFINITY","isNumber","isNumberPositive","isNotNumber","isInfinitePositive","isNumberNegative","isInteger","isFloat","isNaN","isInfinite","isFinite","isInfiniteNegative","isMaxPositive","MAX_VALUE","isMaxNegative","isMinPositive","MIN_VALUE","isMinNegative","isMaxSafeInteger","MAX_SAFE_INTEGER","isMinSafeInteger","MIN_SAFE_INTEGER","isEmptyObject","key","prototype","hasOwnProperty","call","isNotEmptyObject","isEmptyString","isNotEmptyString","isBlankString","test","isNotBlankString","isSymbol","isNotSymbol","isEmpty","isNotEmpty","isArrayBuffer","ArrayBuffer","isNotArrayBuffer","isBigInt64Array","BigInt64Array","isNotBigInt64Array","isBigUint64Array","BigUint64Array","isNotBigUint64Array","isFloat32Array","Float32Array","isNotFloat32Array","isFloat64Array","Float64Array","isNotFloat64Array","isInt16Array","Int16Array","isNotInt16Array","isInt32Array","Int32Array","isNotInt32Array","isInt8Array","Int8Array","isNotInt8Array","isUint16Array","Uint16Array","isNotUint16Array","isUint32Array","Uint32Array","isNotUint32Array","isUint8Array","Uint8Array","isNotUint8Array","isUint8ClampedArray","Uint8ClampedArray","isNotUint8ClampedArray","isCelsius","ABSOLUTE_ZERO_CELSIUS","isNotCelsius","isFahrenheit","ABSOLUTE_ZERO_FAHRENHEIT","isNotFahrenheit","isKelvin","ABSOLUTE_ZERO_KELVIN","isNotKelvin","isTemperature","isNotTemperature","Validator","[object Object]","this","validators","Boolean","Integer","Float","Symbol","Function","errors","type","validator","TypeError","availablesTypes","push","breakOnError","result","subResult","subValidator","isRequired","required","validatorFunction","fn","check","undefined","validatorInstance"],"mappings":"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"}